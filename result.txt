









lemma-100 = ==
lemma-100 = ==(map2, cons)
lemma-100 = ==(cons)
lemma-100 = ==(map2)
lemma-100 = map2
lemma-100 = map2(y :=>: x, cons)
lemma-100 = map2(cons)
lemma-100 = map2(y :=>: x)
lemma-100 = y :=>: x
lemma-100 = cons
lemma-100 = cons(anyType, nil)
lemma-100 = cons(nil)
lemma-100 = cons(anyType)
lemma-100 = anyType
lemma-100 = nil
lemma-100 = cons(@, nil)
lemma-100 = cons(@)
lemma-100 = @
lemma-100 = @(y :=>: x, anyType)
lemma-100 = @(anyType)
lemma-100 = @(y :=>: x)
lemma-100 = _abstract Equals
lemma-100 = _abstract Equals(Func, Func)
lemma-100 = _abstract Equals(Func)
lemma-100 = _abstract Func
lemma-100 = _abstract Func(FuncType, Func)
lemma-100 = _abstract Func(Func)
lemma-100 = _abstract Func(FuncType)
lemma-100 = _abstract FuncType
lemma-100 = _abstract Func(Var, Func)
lemma-100 = _abstract Func(Var)
lemma-100 = _abstract Var
lemma-100 = _abstract Func(@, Func)
lemma-100 = _abstract Func(@)
lemma-100 = _abstract @
lemma-100 = _abstract @(FuncType, Var)
lemma-100 = _abstract @(Var)
lemma-100 = _abstract @(FuncType)
lemma-100 = _length 26
lemma-100 = _lengthDistinct 21
lemma-100 = _distinctRatio 0.8
lemma-100 = _popular anyType
lemma-100 = _commutative False
lemma-100 = _associative False
lemma-100 = _distributive False
lemma-100 = _abstractLength 26
lemma-100 = _abstractLengthDistinct 17
lemma-100 = _innerFunctionApplication True
lemma-100 = _innerFunctionDepth 3
lemma-100 = _func match y
lemma-100 = _func match y(nil, cons)
lemma-100 = _func match y(cons)
lemma-100 = _func match y(nil)
lemma-100 = _func nil
lemma-100 = _func cons
lemma-100 = _func cons(@, map2)
lemma-100 = _func cons(map2)
lemma-100 = _func cons(@)
lemma-100 = _func @
lemma-100 = _func @(a :=>: b, anyType)
lemma-100 = _func @(anyType)
lemma-100 = _func @(a :=>: b)
lemma-100 = _func a :=>: b
lemma-100 = _func anyType
lemma-100 = _func map2
lemma-100 = _func map2(a :=>: b, list)
lemma-100 = _func map2(list)
lemma-100 = _func map2(a :=>: b)
lemma-100 = _func list
lemma-100 = _func _abstract match Var
lemma-100 = _func _abstract match Var(Func, Func)
lemma-100 = _func _abstract match Var(Func)
lemma-100 = _func _abstract Func
lemma-100 = _func _abstract Func(@, Func)
lemma-100 = _func _abstract Func(Func)
lemma-100 = _func _abstract Func(@)
lemma-100 = _func _abstract @
lemma-100 = _func _abstract @(FuncType, Var)
lemma-100 = _func _abstract @(Var)
lemma-100 = _func _abstract @(FuncType)
lemma-100 = _func _abstract FuncType
lemma-100 = _func _abstract Var
lemma-100 = _func _abstract Func(FuncType, Var)
lemma-100 = _func _abstract Func(Var)
lemma-100 = _func _abstract Func(FuncType)
lemma-100 = _func _length 20
lemma-100 = _func _lengthDistinct 20
lemma-100 = _func _distinctRatio 1.0
lemma-100 = _func _popular @
lemma-100 = _func recursive True
lemma-100 = _func _abstractLength 21
lemma-100 = _func _abstractLengthDistinct 16
lemma-100 = _func _nArgs 2

lemma-101 = ==
lemma-101 = ==(cons, map2)
lemma-101 = ==(map2)
lemma-101 = ==(cons)
lemma-101 = cons
lemma-101 = cons(@, map2)
lemma-101 = cons(map2)
lemma-101 = cons(@)
lemma-101 = @
lemma-101 = @(y :=>: x, anyType)
lemma-101 = @(anyType)
lemma-101 = @(y :=>: x)
lemma-101 = y :=>: x
lemma-101 = anyType
lemma-101 = map2
lemma-101 = map2(y :=>: x, list)
lemma-101 = map2(list)
lemma-101 = map2(y :=>: x)
lemma-101 = list
lemma-101 = map2(y :=>: x, cons)
lemma-101 = map2(cons)
lemma-101 = cons(anyType, list)
lemma-101 = cons(list)
lemma-101 = cons(anyType)
lemma-101 = _abstract Equals
lemma-101 = _abstract Equals(Func, Func)
lemma-101 = _abstract Equals(Func)
lemma-101 = _abstract Func
lemma-101 = _abstract Func(@, Func)
lemma-101 = _abstract Func(Func)
lemma-101 = _abstract Func(@)
lemma-101 = _abstract @
lemma-101 = _abstract @(FuncType, Var)
lemma-101 = _abstract @(Var)
lemma-101 = _abstract @(FuncType)
lemma-101 = _abstract FuncType
lemma-101 = _abstract Var
lemma-101 = _abstract Func(FuncType, Var)
lemma-101 = _abstract Func(Var)
lemma-101 = _abstract Func(FuncType)
lemma-101 = _abstract Func(FuncType, Func)
lemma-101 = _abstract Func(Var, Var)
lemma-101 = _length 31
lemma-101 = _lengthDistinct 24
lemma-101 = _distinctRatio 0.8
lemma-101 = _popular y :=>: x
lemma-101 = _commutative False
lemma-101 = _associative False
lemma-101 = _distributive False
lemma-101 = _abstractLength 31
lemma-101 = _abstractLengthDistinct 18
lemma-101 = _innerFunctionApplication True
lemma-101 = _innerFunctionDepth 2
lemma-101 = _func match y
lemma-101 = _func match y(nil, cons)
lemma-101 = _func match y(cons)
lemma-101 = _func match y(nil)
lemma-101 = _func nil
lemma-101 = _func cons
lemma-101 = _func cons(@, map2)
lemma-101 = _func cons(map2)
lemma-101 = _func cons(@)
lemma-101 = _func @
lemma-101 = _func @(a :=>: b, anyType)
lemma-101 = _func @(anyType)
lemma-101 = _func @(a :=>: b)
lemma-101 = _func a :=>: b
lemma-101 = _func anyType
lemma-101 = _func map2
lemma-101 = _func map2(a :=>: b, list)
lemma-101 = _func map2(list)
lemma-101 = _func map2(a :=>: b)
lemma-101 = _func list
lemma-101 = _func _abstract match Var
lemma-101 = _func _abstract match Var(Func, Func)
lemma-101 = _func _abstract match Var(Func)
lemma-101 = _func _abstract Func
lemma-101 = _func _abstract Func(@, Func)
lemma-101 = _func _abstract Func(Func)
lemma-101 = _func _abstract Func(@)
lemma-101 = _func _abstract @
lemma-101 = _func _abstract @(FuncType, Var)
lemma-101 = _func _abstract @(Var)
lemma-101 = _func _abstract @(FuncType)
lemma-101 = _func _abstract FuncType
lemma-101 = _func _abstract Var
lemma-101 = _func _abstract Func(FuncType, Var)
lemma-101 = _func _abstract Func(Var)
lemma-101 = _func _abstract Func(FuncType)
lemma-101 = _func _length 20
lemma-101 = _func _lengthDistinct 20
lemma-101 = _func _distinctRatio 1.0
lemma-101 = _func _popular @
lemma-101 = _func recursive True
lemma-101 = _func _abstractLength 21
lemma-101 = _func _abstractLengthDistinct 16
lemma-101 = _func _nArgs 2

lemma-102 = ==
lemma-102 = ==(take, cons)
lemma-102 = ==(cons)
lemma-102 = ==(take)
lemma-102 = take
lemma-102 = take(S, cons)
lemma-102 = take(cons)
lemma-102 = take(S)
lemma-102 = S
lemma-102 = S(Nat)
lemma-102 = Nat
lemma-102 = cons
lemma-102 = cons(anyType, list)
lemma-102 = cons(list)
lemma-102 = cons(anyType)
lemma-102 = anyType
lemma-102 = list
lemma-102 = cons(anyType, take)
lemma-102 = cons(take)
lemma-102 = take(Nat, list)
lemma-102 = take(list)
lemma-102 = take(Nat)
lemma-102 = _abstract Equals
lemma-102 = _abstract Equals(Func, Func)
lemma-102 = _abstract Equals(Func)
lemma-102 = _abstract Func
lemma-102 = _abstract Func(Func, Func)
lemma-102 = _abstract Func(Func)
lemma-102 = _abstract Func(Var)
lemma-102 = _abstract Var
lemma-102 = _abstract Func(Var, Var)
lemma-102 = _abstract Func(Var, Func)
lemma-102 = _length 28
lemma-102 = _lengthDistinct 22
lemma-102 = _distinctRatio 0.8
lemma-102 = _popular Nat
lemma-102 = _commutative False
lemma-102 = _associative False
lemma-102 = _distributive False
lemma-102 = _abstractLength 28
lemma-102 = _abstractLengthDistinct 10
lemma-102 = _innerFunctionApplication True
lemma-102 = _innerFunctionDepth 2
lemma-102 = _func match x
lemma-102 = _func match x(nil, match y)
lemma-102 = _func match x(match y)
lemma-102 = _func match x(nil)
lemma-102 = _func nil
lemma-102 = _func match y
lemma-102 = _func match y(nil, cons)
lemma-102 = _func match y(cons)
lemma-102 = _func match y(nil)
lemma-102 = _func cons
lemma-102 = _func cons(anyType, take)
lemma-102 = _func cons(take)
lemma-102 = _func cons(anyType)
lemma-102 = _func anyType
lemma-102 = _func take
lemma-102 = _func take(Nat, list)
lemma-102 = _func take(list)
lemma-102 = _func take(Nat)
lemma-102 = _func Nat
lemma-102 = _func list
lemma-102 = _func _abstract match Var
lemma-102 = _func _abstract match Var(Func, match Var)
lemma-102 = _func _abstract match Var(match Var)
lemma-102 = _func _abstract match Var(Func)
lemma-102 = _func _abstract Func
lemma-102 = _func _abstract match Var(Func, Func)
lemma-102 = _func _abstract Func(Var, Func)
lemma-102 = _func _abstract Func(Func)
lemma-102 = _func _abstract Func(Var)
lemma-102 = _func _abstract Var
lemma-102 = _func _abstract Func(Var, Var)
lemma-102 = _func _length 20
lemma-102 = _func _lengthDistinct 20
lemma-102 = _func _distinctRatio 1.0
lemma-102 = _func _popular Nat
lemma-102 = _func recursive True
lemma-102 = _func _abstractLength 21
lemma-102 = _func _abstractLengthDistinct 11
lemma-102 = _func _nArgs 2

lemma-103 = ==
lemma-103 = ==(zip, zipConcat)
lemma-103 = ==(zipConcat)
lemma-103 = ==(zip)
lemma-103 = zip
lemma-103 = zip(cons, list)
lemma-103 = zip(list)
lemma-103 = zip(cons)
lemma-103 = cons
lemma-103 = cons(anyType, list)
lemma-103 = cons(list)
lemma-103 = cons(anyType)
lemma-103 = anyType
lemma-103 = list
lemma-103 = zipConcat
lemma-103 = zipConcat(anyType, list, list)
lemma-103 = zipConcat(list, list)
lemma-103 = zipConcat(anyType)
lemma-103 = zipConcat(anyType, list)
lemma-103 = zipConcat(list)
lemma-103 = _abstract Equals
lemma-103 = _abstract Equals(Func, Func)
lemma-103 = _abstract Equals(Func)
lemma-103 = _abstract Func
lemma-103 = _abstract Func(Func, Var)
lemma-103 = _abstract Func(Var)
lemma-103 = _abstract Func(Func)
lemma-103 = _abstract Func(Var, Var)
lemma-103 = _abstract Var
lemma-103 = _abstract Func(Var, Var, Var)
lemma-103 = _length 28
lemma-103 = _lengthDistinct 20
lemma-103 = _distinctRatio 0.7
lemma-103 = _popular list
lemma-103 = _commutative False
lemma-103 = _associative False
lemma-103 = _distributive False
lemma-103 = _abstractLength 28
lemma-103 = _abstractLengthDistinct 10
lemma-103 = _innerFunctionApplication True
lemma-103 = _innerFunctionDepth 2
lemma-103 = _func match x
lemma-103 = _func match x(nil, match y)
lemma-103 = _func match x(match y)
lemma-103 = _func match x(nil)
lemma-103 = _func nil
lemma-103 = _func match y
lemma-103 = _func match y(nil, cons)
lemma-103 = _func match y(cons)
lemma-103 = _func match y(nil)
lemma-103 = _func cons
lemma-103 = _func cons(Pair2, zip)
lemma-103 = _func cons(zip)
lemma-103 = _func cons(Pair2)
lemma-103 = _func Pair2
lemma-103 = _func Pair2(anyType, anyType)
lemma-103 = _func Pair2(anyType)
lemma-103 = _func anyType
lemma-103 = _func zip
lemma-103 = _func zip(list, list)
lemma-103 = _func zip(list)
lemma-103 = _func list
lemma-103 = _func _abstract match Var
lemma-103 = _func _abstract match Var(Func, match Var)
lemma-103 = _func _abstract match Var(match Var)
lemma-103 = _func _abstract match Var(Func)
lemma-103 = _func _abstract Func
lemma-103 = _func _abstract match Var(Func, Func)
lemma-103 = _func _abstract Func(Func, Func)
lemma-103 = _func _abstract Func(Func)
lemma-103 = _func _abstract Func(Var, Var)
lemma-103 = _func _abstract Func(Var)
lemma-103 = _func _abstract Var
lemma-103 = _func _length 21
lemma-103 = _func _lengthDistinct 21
lemma-103 = _func _distinctRatio 1.0
lemma-103 = _func _popular Pair2
lemma-103 = _func recursive True
lemma-103 = _func _abstractLength 26
lemma-103 = _func _abstractLengthDistinct 11
lemma-103 = _func _nArgs 2
lemma-103 = _func match z
lemma-103 = _func match z(nil, cons)
lemma-103 = _func match z(cons)
lemma-103 = _func match z(nil)
lemma-103 = _func nil
lemma-103 = _func cons
lemma-103 = _func cons(Pair2, zip)
lemma-103 = _func cons(zip)
lemma-103 = _func cons(Pair2)
lemma-103 = _func Pair2
lemma-103 = _func Pair2(anyType, anyType)
lemma-103 = _func Pair2(anyType)
lemma-103 = _func anyType
lemma-103 = _func zip
lemma-103 = _func zip(list, list)
lemma-103 = _func zip(list)
lemma-103 = _func list
lemma-103 = _func _abstract match Var
lemma-103 = _func _abstract match Var(Func, Func)
lemma-103 = _func _abstract match Var(Func)
lemma-103 = _func _abstract Func
lemma-103 = _func _abstract Func(Func, Func)
lemma-103 = _func _abstract Func(Func)
lemma-103 = _func _abstract Func(Var, Var)
lemma-103 = _func _abstract Func(Var)
lemma-103 = _func _abstract Var
lemma-103 = _func _length 17
lemma-103 = _func _lengthDistinct 17
lemma-103 = _func _distinctRatio 1.0
lemma-103 = _func _popular Pair2
lemma-103 = _func recursive False
lemma-103 = _func _abstractLength 21
lemma-103 = _func _abstractLengthDistinct 9
lemma-103 = _func _nArgs 3

lemma-104 = ==
lemma-104 = ==(zip, nil)
lemma-104 = ==(nil)
lemma-104 = ==(zip)
lemma-104 = zip
lemma-104 = zip(list, nil)
lemma-104 = zip(nil)
lemma-104 = zip(list)
lemma-104 = list
lemma-104 = nil
lemma-104 = _abstract Equals
lemma-104 = _abstract Equals(Func, Func)
lemma-104 = _abstract Equals(Func)
lemma-104 = _abstract Func
lemma-104 = _abstract Func(Var, Func)
lemma-104 = _abstract Func(Func)
lemma-104 = _abstract Func(Var)
lemma-104 = _abstract Var
lemma-104 = _length 11
lemma-104 = _lengthDistinct 10
lemma-104 = _distinctRatio 0.9
lemma-104 = _popular nil
lemma-104 = _commutative False
lemma-104 = _associative False
lemma-104 = _distributive False
lemma-104 = _abstractLength 11
lemma-104 = _abstractLengthDistinct 8
lemma-104 = _innerFunctionApplication True
lemma-104 = _innerFunctionDepth 2
lemma-104 = _func match x
lemma-104 = _func match x(nil, match y)
lemma-104 = _func match x(match y)
lemma-104 = _func match x(nil)
lemma-104 = _func nil
lemma-104 = _func match y
lemma-104 = _func match y(nil, cons)
lemma-104 = _func match y(cons)
lemma-104 = _func match y(nil)
lemma-104 = _func cons
lemma-104 = _func cons(Pair2, zip)
lemma-104 = _func cons(zip)
lemma-104 = _func cons(Pair2)
lemma-104 = _func Pair2
lemma-104 = _func Pair2(anyType, anyType)
lemma-104 = _func Pair2(anyType)
lemma-104 = _func anyType
lemma-104 = _func zip
lemma-104 = _func zip(list, list)
lemma-104 = _func zip(list)
lemma-104 = _func list
lemma-104 = _func _abstract match Var
lemma-104 = _func _abstract match Var(Func, match Var)
lemma-104 = _func _abstract match Var(match Var)
lemma-104 = _func _abstract match Var(Func)
lemma-104 = _func _abstract Func
lemma-104 = _func _abstract match Var(Func, Func)
lemma-104 = _func _abstract Func(Func, Func)
lemma-104 = _func _abstract Func(Func)
lemma-104 = _func _abstract Func(Var, Var)
lemma-104 = _func _abstract Func(Var)
lemma-104 = _func _abstract Var
lemma-104 = _func _length 21
lemma-104 = _func _lengthDistinct 21
lemma-104 = _func _distinctRatio 1.0
lemma-104 = _func _popular Pair2
lemma-104 = _func recursive True
lemma-104 = _func _abstractLength 26
lemma-104 = _func _abstractLengthDistinct 11
lemma-104 = _func _nArgs 2

lemma-105 = ==
lemma-105 = ==(zip, nil)
lemma-105 = ==(nil)
lemma-105 = ==(zip)
lemma-105 = zip
lemma-105 = zip(nil, list)
lemma-105 = zip(list)
lemma-105 = zip(nil)
lemma-105 = nil
lemma-105 = list
lemma-105 = _abstract Equals
lemma-105 = _abstract Equals(Func, Func)
lemma-105 = _abstract Equals(Func)
lemma-105 = _abstract Func
lemma-105 = _abstract Func(Func, Var)
lemma-105 = _abstract Func(Var)
lemma-105 = _abstract Func(Func)
lemma-105 = _abstract Var
lemma-105 = _length 11
lemma-105 = _lengthDistinct 10
lemma-105 = _distinctRatio 0.9
lemma-105 = _popular nil
lemma-105 = _commutative False
lemma-105 = _associative False
lemma-105 = _distributive False
lemma-105 = _abstractLength 11
lemma-105 = _abstractLengthDistinct 8
lemma-105 = _innerFunctionApplication True
lemma-105 = _innerFunctionDepth 2
lemma-105 = _func match x
lemma-105 = _func match x(nil, match y)
lemma-105 = _func match x(match y)
lemma-105 = _func match x(nil)
lemma-105 = _func nil
lemma-105 = _func match y
lemma-105 = _func match y(nil, cons)
lemma-105 = _func match y(cons)
lemma-105 = _func match y(nil)
lemma-105 = _func cons
lemma-105 = _func cons(Pair2, zip)
lemma-105 = _func cons(zip)
lemma-105 = _func cons(Pair2)
lemma-105 = _func Pair2
lemma-105 = _func Pair2(anyType, anyType)
lemma-105 = _func Pair2(anyType)
lemma-105 = _func anyType
lemma-105 = _func zip
lemma-105 = _func zip(list, list)
lemma-105 = _func zip(list)
lemma-105 = _func list
lemma-105 = _func _abstract match Var
lemma-105 = _func _abstract match Var(Func, match Var)
lemma-105 = _func _abstract match Var(match Var)
lemma-105 = _func _abstract match Var(Func)
lemma-105 = _func _abstract Func
lemma-105 = _func _abstract match Var(Func, Func)
lemma-105 = _func _abstract Func(Func, Func)
lemma-105 = _func _abstract Func(Func)
lemma-105 = _func _abstract Func(Var, Var)
lemma-105 = _func _abstract Func(Var)
lemma-105 = _func _abstract Var
lemma-105 = _func _length 21
lemma-105 = _func _lengthDistinct 21
lemma-105 = _func _distinctRatio 1.0
lemma-105 = _func _popular Pair2
lemma-105 = _func recursive True
lemma-105 = _func _abstractLength 26
lemma-105 = _func _abstractLengthDistinct 11
lemma-105 = _func _nArgs 2

lemma-106 = ==
lemma-106 = ==(zip, cons)
lemma-106 = ==(cons)
lemma-106 = ==(zip)
lemma-106 = zip
lemma-106 = zip(cons, cons)
lemma-106 = zip(cons)
lemma-106 = cons
lemma-106 = cons(anyType, list)
lemma-106 = cons(list)
lemma-106 = cons(anyType)
lemma-106 = anyType
lemma-106 = list
lemma-106 = cons(Pair2, zip)
lemma-106 = cons(zip)
lemma-106 = cons(Pair2)
lemma-106 = Pair2
lemma-106 = Pair2(anyType, anyType)
lemma-106 = Pair2(anyType)
lemma-106 = zip(list, list)
lemma-106 = zip(list)
lemma-106 = _abstract Equals
lemma-106 = _abstract Equals(Func, Func)
lemma-106 = _abstract Equals(Func)
lemma-106 = _abstract Func
lemma-106 = _abstract Func(Func, Func)
lemma-106 = _abstract Func(Func)
lemma-106 = _abstract Func(Var, Var)
lemma-106 = _abstract Func(Var)
lemma-106 = _abstract Var
lemma-106 = _length 36
lemma-106 = _lengthDistinct 21
lemma-106 = _distinctRatio 0.6
lemma-106 = _popular anyType
lemma-106 = _commutative False
lemma-106 = _associative False
lemma-106 = _distributive False
lemma-106 = _abstractLength 36
lemma-106 = _abstractLengthDistinct 9
lemma-106 = _innerFunctionApplication True
lemma-106 = _innerFunctionDepth 2
lemma-106 = _func match x
lemma-106 = _func match x(nil, match y)
lemma-106 = _func match x(match y)
lemma-106 = _func match x(nil)
lemma-106 = _func nil
lemma-106 = _func match y
lemma-106 = _func match y(nil, cons)
lemma-106 = _func match y(cons)
lemma-106 = _func match y(nil)
lemma-106 = _func cons
lemma-106 = _func cons(Pair2, zip)
lemma-106 = _func cons(zip)
lemma-106 = _func cons(Pair2)
lemma-106 = _func Pair2
lemma-106 = _func Pair2(anyType, anyType)
lemma-106 = _func Pair2(anyType)
lemma-106 = _func anyType
lemma-106 = _func zip
lemma-106 = _func zip(list, list)
lemma-106 = _func zip(list)
lemma-106 = _func list
lemma-106 = _func _abstract match Var
lemma-106 = _func _abstract match Var(Func, match Var)
lemma-106 = _func _abstract match Var(match Var)
lemma-106 = _func _abstract match Var(Func)
lemma-106 = _func _abstract Func
lemma-106 = _func _abstract match Var(Func, Func)
lemma-106 = _func _abstract Func(Func, Func)
lemma-106 = _func _abstract Func(Func)
lemma-106 = _func _abstract Func(Var, Var)
lemma-106 = _func _abstract Func(Var)
lemma-106 = _func _abstract Var
lemma-106 = _func _length 21
lemma-106 = _func _lengthDistinct 21
lemma-106 = _func _distinctRatio 1.0
lemma-106 = _func _popular Pair2
lemma-106 = _func recursive True
lemma-106 = _func _abstractLength 26
lemma-106 = _func _abstractLengthDistinct 11
lemma-106 = _func _nArgs 2

lemma-107 = ==
lemma-107 = ==(zipConcat, nil)
lemma-107 = ==(nil)
lemma-107 = ==(zipConcat)
lemma-107 = zipConcat
lemma-107 = zipConcat(anyType, list, nil)
lemma-107 = zipConcat(list, nil)
lemma-107 = zipConcat(anyType)
lemma-107 = zipConcat(anyType, nil)
lemma-107 = zipConcat(nil)
lemma-107 = zipConcat(anyType, list)
lemma-107 = zipConcat(list)
lemma-107 = anyType
lemma-107 = list
lemma-107 = nil
lemma-107 = _abstract Equals
lemma-107 = _abstract Equals(Func, Func)
lemma-107 = _abstract Equals(Func)
lemma-107 = _abstract Func
lemma-107 = _abstract Func(Var, Var, Func)
lemma-107 = _abstract Func(Var, Func)
lemma-107 = _abstract Func(Var)
lemma-107 = _abstract Func(Func)
lemma-107 = _abstract Func(Var, Var)
lemma-107 = _abstract Var
lemma-107 = _length 18
lemma-107 = _lengthDistinct 15
lemma-107 = _distinctRatio 0.8
lemma-107 = _popular zipConcat(anyType)
lemma-107 = _commutative False
lemma-107 = _associative False
lemma-107 = _distributive False
lemma-107 = _abstractLength 18
lemma-107 = _abstractLengthDistinct 10
lemma-107 = _innerFunctionApplication True
lemma-107 = _innerFunctionDepth 2
lemma-107 = _func match z
lemma-107 = _func match z(nil, cons)
lemma-107 = _func match z(cons)
lemma-107 = _func match z(nil)
lemma-107 = _func nil
lemma-107 = _func cons
lemma-107 = _func cons(Pair2, zip)
lemma-107 = _func cons(zip)
lemma-107 = _func cons(Pair2)
lemma-107 = _func Pair2
lemma-107 = _func Pair2(anyType, anyType)
lemma-107 = _func Pair2(anyType)
lemma-107 = _func anyType
lemma-107 = _func zip
lemma-107 = _func zip(list, list)
lemma-107 = _func zip(list)
lemma-107 = _func list
lemma-107 = _func _abstract match Var
lemma-107 = _func _abstract match Var(Func, Func)
lemma-107 = _func _abstract match Var(Func)
lemma-107 = _func _abstract Func
lemma-107 = _func _abstract Func(Func, Func)
lemma-107 = _func _abstract Func(Func)
lemma-107 = _func _abstract Func(Var, Var)
lemma-107 = _func _abstract Func(Var)
lemma-107 = _func _abstract Var
lemma-107 = _func _length 17
lemma-107 = _func _lengthDistinct 17
lemma-107 = _func _distinctRatio 1.0
lemma-107 = _func _popular Pair2
lemma-107 = _func recursive False
lemma-107 = _func _abstractLength 21
lemma-107 = _func _abstractLengthDistinct 9
lemma-107 = _func _nArgs 3

lemma-108 = ==
lemma-108 = ==(zip, zipConcat)
lemma-108 = ==(zipConcat)
lemma-108 = ==(zip)
lemma-108 = zip
lemma-108 = zip(cons, list)
lemma-108 = zip(list)
lemma-108 = zip(cons)
lemma-108 = cons
lemma-108 = cons(anyType, list)
lemma-108 = cons(list)
lemma-108 = cons(anyType)
lemma-108 = anyType
lemma-108 = list
lemma-108 = zipConcat
lemma-108 = zipConcat(anyType, list, list)
lemma-108 = zipConcat(list, list)
lemma-108 = zipConcat(anyType)
lemma-108 = zipConcat(anyType, list)
lemma-108 = zipConcat(list)
lemma-108 = _abstract Equals
lemma-108 = _abstract Equals(Func, Func)
lemma-108 = _abstract Equals(Func)
lemma-108 = _abstract Func
lemma-108 = _abstract Func(Func, Var)
lemma-108 = _abstract Func(Var)
lemma-108 = _abstract Func(Func)
lemma-108 = _abstract Func(Var, Var)
lemma-108 = _abstract Var
lemma-108 = _abstract Func(Var, Var, Var)
lemma-108 = _length 28
lemma-108 = _lengthDistinct 20
lemma-108 = _distinctRatio 0.7
lemma-108 = _popular list
lemma-108 = _commutative False
lemma-108 = _associative False
lemma-108 = _distributive False
lemma-108 = _abstractLength 28
lemma-108 = _abstractLengthDistinct 10
lemma-108 = _innerFunctionApplication True
lemma-108 = _innerFunctionDepth 2
lemma-108 = _func match x
lemma-108 = _func match x(nil, match y)
lemma-108 = _func match x(match y)
lemma-108 = _func match x(nil)
lemma-108 = _func nil
lemma-108 = _func match y
lemma-108 = _func match y(nil, cons)
lemma-108 = _func match y(cons)
lemma-108 = _func match y(nil)
lemma-108 = _func cons
lemma-108 = _func cons(Pair2, zip)
lemma-108 = _func cons(zip)
lemma-108 = _func cons(Pair2)
lemma-108 = _func Pair2
lemma-108 = _func Pair2(anyType, anyType)
lemma-108 = _func Pair2(anyType)
lemma-108 = _func anyType
lemma-108 = _func zip
lemma-108 = _func zip(list, list)
lemma-108 = _func zip(list)
lemma-108 = _func list
lemma-108 = _func _abstract match Var
lemma-108 = _func _abstract match Var(Func, match Var)
lemma-108 = _func _abstract match Var(match Var)
lemma-108 = _func _abstract match Var(Func)
lemma-108 = _func _abstract Func
lemma-108 = _func _abstract match Var(Func, Func)
lemma-108 = _func _abstract Func(Func, Func)
lemma-108 = _func _abstract Func(Func)
lemma-108 = _func _abstract Func(Var, Var)
lemma-108 = _func _abstract Func(Var)
lemma-108 = _func _abstract Var
lemma-108 = _func _length 21
lemma-108 = _func _lengthDistinct 21
lemma-108 = _func _distinctRatio 1.0
lemma-108 = _func _popular Pair2
lemma-108 = _func recursive True
lemma-108 = _func _abstractLength 26
lemma-108 = _func _abstractLengthDistinct 11
lemma-108 = _func _nArgs 2
lemma-108 = _func match z
lemma-108 = _func match z(nil, cons)
lemma-108 = _func match z(cons)
lemma-108 = _func match z(nil)
lemma-108 = _func nil
lemma-108 = _func cons
lemma-108 = _func cons(Pair2, zip)
lemma-108 = _func cons(zip)
lemma-108 = _func cons(Pair2)
lemma-108 = _func Pair2
lemma-108 = _func Pair2(anyType, anyType)
lemma-108 = _func Pair2(anyType)
lemma-108 = _func anyType
lemma-108 = _func zip
lemma-108 = _func zip(list, list)
lemma-108 = _func zip(list)
lemma-108 = _func list
lemma-108 = _func _abstract match Var
lemma-108 = _func _abstract match Var(Func, Func)
lemma-108 = _func _abstract match Var(Func)
lemma-108 = _func _abstract Func
lemma-108 = _func _abstract Func(Func, Func)
lemma-108 = _func _abstract Func(Func)
lemma-108 = _func _abstract Func(Var, Var)
lemma-108 = _func _abstract Func(Var)
lemma-108 = _func _abstract Var
lemma-108 = _func _length 17
lemma-108 = _func _lengthDistinct 17
lemma-108 = _func _distinctRatio 1.0
lemma-108 = _func _popular Pair2
lemma-108 = _func recursive False
lemma-108 = _func _abstractLength 21
lemma-108 = _func _abstractLengthDistinct 9
lemma-108 = _func _nArgs 3

lemma-109 = ==
lemma-109 = ==(zipConcat, cons)
lemma-109 = ==(cons)
lemma-109 = ==(zipConcat)
lemma-109 = zipConcat
lemma-109 = zipConcat(anyType, list, cons)
lemma-109 = zipConcat(list, cons)
lemma-109 = zipConcat(anyType)
lemma-109 = zipConcat(anyType, cons)
lemma-109 = zipConcat(cons)
lemma-109 = zipConcat(anyType, list)
lemma-109 = zipConcat(list)
lemma-109 = anyType
lemma-109 = list
lemma-109 = cons
lemma-109 = cons(anyType, nil)
lemma-109 = cons(nil)
lemma-109 = cons(anyType)
lemma-109 = nil
lemma-109 = cons(Pair2, nil)
lemma-109 = cons(Pair2)
lemma-109 = Pair2
lemma-109 = Pair2(anyType, anyType)
lemma-109 = Pair2(anyType)
lemma-109 = _abstract Equals
lemma-109 = _abstract Equals(Func, Func)
lemma-109 = _abstract Equals(Func)
lemma-109 = _abstract Func
lemma-109 = _abstract Func(Var, Var, Func)
lemma-109 = _abstract Func(Var, Func)
lemma-109 = _abstract Func(Var)
lemma-109 = _abstract Func(Func)
lemma-109 = _abstract Func(Var, Var)
lemma-109 = _abstract Var
lemma-109 = _abstract Func(Func, Func)
lemma-109 = _length 33
lemma-109 = _lengthDistinct 24
lemma-109 = _distinctRatio 0.7
lemma-109 = _popular anyType
lemma-109 = _commutative False
lemma-109 = _associative False
lemma-109 = _distributive False
lemma-109 = _abstractLength 33
lemma-109 = _abstractLengthDistinct 11
lemma-109 = _innerFunctionApplication True
lemma-109 = _innerFunctionDepth 3
lemma-109 = _func match z
lemma-109 = _func match z(nil, cons)
lemma-109 = _func match z(cons)
lemma-109 = _func match z(nil)
lemma-109 = _func nil
lemma-109 = _func cons
lemma-109 = _func cons(Pair2, zip)
lemma-109 = _func cons(zip)
lemma-109 = _func cons(Pair2)
lemma-109 = _func Pair2
lemma-109 = _func Pair2(anyType, anyType)
lemma-109 = _func Pair2(anyType)
lemma-109 = _func anyType
lemma-109 = _func zip
lemma-109 = _func zip(list, list)
lemma-109 = _func zip(list)
lemma-109 = _func list
lemma-109 = _func _abstract match Var
lemma-109 = _func _abstract match Var(Func, Func)
lemma-109 = _func _abstract match Var(Func)
lemma-109 = _func _abstract Func
lemma-109 = _func _abstract Func(Func, Func)
lemma-109 = _func _abstract Func(Func)
lemma-109 = _func _abstract Func(Var, Var)
lemma-109 = _func _abstract Func(Var)
lemma-109 = _func _abstract Var
lemma-109 = _func _length 17
lemma-109 = _func _lengthDistinct 17
lemma-109 = _func _distinctRatio 1.0
lemma-109 = _func _popular Pair2
lemma-109 = _func recursive False
lemma-109 = _func _abstractLength 21
lemma-109 = _func _abstractLengthDistinct 9
lemma-109 = _func _nArgs 3

lemma-110 = ==
lemma-110 = ==(zipConcat, cons)
lemma-110 = ==(cons)
lemma-110 = ==(zipConcat)
lemma-110 = zipConcat
lemma-110 = zipConcat(anyType, nil, cons)
lemma-110 = zipConcat(nil, cons)
lemma-110 = zipConcat(anyType)
lemma-110 = zipConcat(anyType, cons)
lemma-110 = zipConcat(cons)
lemma-110 = zipConcat(anyType, nil)
lemma-110 = zipConcat(nil)
lemma-110 = anyType
lemma-110 = nil
lemma-110 = cons
lemma-110 = cons(anyType, list)
lemma-110 = cons(list)
lemma-110 = cons(anyType)
lemma-110 = list
lemma-110 = cons(Pair2, nil)
lemma-110 = cons(nil)
lemma-110 = cons(Pair2)
lemma-110 = Pair2
lemma-110 = Pair2(anyType, anyType)
lemma-110 = Pair2(anyType)
lemma-110 = _abstract Equals
lemma-110 = _abstract Equals(Func, Func)
lemma-110 = _abstract Equals(Func)
lemma-110 = _abstract Func
lemma-110 = _abstract Func(Var, Func, Func)
lemma-110 = _abstract Func(Func, Func)
lemma-110 = _abstract Func(Var)
lemma-110 = _abstract Func(Var, Func)
lemma-110 = _abstract Func(Func)
lemma-110 = _abstract Var
lemma-110 = _abstract Func(Var, Var)
lemma-110 = _length 33
lemma-110 = _lengthDistinct 25
lemma-110 = _distinctRatio 0.8
lemma-110 = _popular anyType
lemma-110 = _commutative False
lemma-110 = _associative False
lemma-110 = _distributive False
lemma-110 = _abstractLength 33
lemma-110 = _abstractLengthDistinct 11
lemma-110 = _innerFunctionApplication True
lemma-110 = _innerFunctionDepth 2
lemma-110 = _func match z
lemma-110 = _func match z(nil, cons)
lemma-110 = _func match z(cons)
lemma-110 = _func match z(nil)
lemma-110 = _func nil
lemma-110 = _func cons
lemma-110 = _func cons(Pair2, zip)
lemma-110 = _func cons(zip)
lemma-110 = _func cons(Pair2)
lemma-110 = _func Pair2
lemma-110 = _func Pair2(anyType, anyType)
lemma-110 = _func Pair2(anyType)
lemma-110 = _func anyType
lemma-110 = _func zip
lemma-110 = _func zip(list, list)
lemma-110 = _func zip(list)
lemma-110 = _func list
lemma-110 = _func _abstract match Var
lemma-110 = _func _abstract match Var(Func, Func)
lemma-110 = _func _abstract match Var(Func)
lemma-110 = _func _abstract Func
lemma-110 = _func _abstract Func(Func, Func)
lemma-110 = _func _abstract Func(Func)
lemma-110 = _func _abstract Func(Var, Var)
lemma-110 = _func _abstract Func(Var)
lemma-110 = _func _abstract Var
lemma-110 = _func _length 17
lemma-110 = _func _lengthDistinct 17
lemma-110 = _func _distinctRatio 1.0
lemma-110 = _func _popular Pair2
lemma-110 = _func recursive False
lemma-110 = _func _abstractLength 21
lemma-110 = _func _abstractLengthDistinct 9
lemma-110 = _func _nArgs 3

lemma-111 = ==
lemma-111 = ==(cons, zipConcat)
lemma-111 = ==(zipConcat)
lemma-111 = ==(cons)
lemma-111 = cons
lemma-111 = cons(Pair2, zip)
lemma-111 = cons(zip)
lemma-111 = cons(Pair2)
lemma-111 = Pair2
lemma-111 = Pair2(anyType, anyType)
lemma-111 = Pair2(anyType)
lemma-111 = anyType
lemma-111 = zip
lemma-111 = zip(list, list)
lemma-111 = zip(list)
lemma-111 = list
lemma-111 = zipConcat
lemma-111 = zipConcat(anyType, list, cons)
lemma-111 = zipConcat(list, cons)
lemma-111 = zipConcat(anyType)
lemma-111 = zipConcat(anyType, cons)
lemma-111 = zipConcat(cons)
lemma-111 = zipConcat(anyType, list)
lemma-111 = zipConcat(list)
lemma-111 = cons(anyType, list)
lemma-111 = cons(list)
lemma-111 = cons(anyType)
lemma-111 = _abstract Equals
lemma-111 = _abstract Equals(Func, Func)
lemma-111 = _abstract Equals(Func)
lemma-111 = _abstract Func
lemma-111 = _abstract Func(Func, Func)
lemma-111 = _abstract Func(Func)
lemma-111 = _abstract Func(Var, Var)
lemma-111 = _abstract Func(Var)
lemma-111 = _abstract Var
lemma-111 = _abstract Func(Var, Var, Func)
lemma-111 = _abstract Func(Var, Func)
lemma-111 = _length 38
lemma-111 = _lengthDistinct 27
lemma-111 = _distinctRatio 0.7
lemma-111 = _popular anyType
lemma-111 = _commutative False
lemma-111 = _associative False
lemma-111 = _distributive False
lemma-111 = _abstractLength 38
lemma-111 = _abstractLengthDistinct 11
lemma-111 = _innerFunctionApplication True
lemma-111 = _innerFunctionDepth 2
lemma-111 = _func match x
lemma-111 = _func match x(nil, match y)
lemma-111 = _func match x(match y)
lemma-111 = _func match x(nil)
lemma-111 = _func nil
lemma-111 = _func match y
lemma-111 = _func match y(nil, cons)
lemma-111 = _func match y(cons)
lemma-111 = _func match y(nil)
lemma-111 = _func cons
lemma-111 = _func cons(Pair2, zip)
lemma-111 = _func cons(zip)
lemma-111 = _func cons(Pair2)
lemma-111 = _func Pair2
lemma-111 = _func Pair2(anyType, anyType)
lemma-111 = _func Pair2(anyType)
lemma-111 = _func anyType
lemma-111 = _func zip
lemma-111 = _func zip(list, list)
lemma-111 = _func zip(list)
lemma-111 = _func list
lemma-111 = _func _abstract match Var
lemma-111 = _func _abstract match Var(Func, match Var)
lemma-111 = _func _abstract match Var(match Var)
lemma-111 = _func _abstract match Var(Func)
lemma-111 = _func _abstract Func
lemma-111 = _func _abstract match Var(Func, Func)
lemma-111 = _func _abstract Func(Func, Func)
lemma-111 = _func _abstract Func(Func)
lemma-111 = _func _abstract Func(Var, Var)
lemma-111 = _func _abstract Func(Var)
lemma-111 = _func _abstract Var
lemma-111 = _func _length 21
lemma-111 = _func _lengthDistinct 21
lemma-111 = _func _distinctRatio 1.0
lemma-111 = _func _popular Pair2
lemma-111 = _func recursive True
lemma-111 = _func _abstractLength 26
lemma-111 = _func _abstractLengthDistinct 11
lemma-111 = _func _nArgs 2
lemma-111 = _func match z
lemma-111 = _func match z(nil, cons)
lemma-111 = _func match z(cons)
lemma-111 = _func match z(nil)
lemma-111 = _func nil
lemma-111 = _func cons
lemma-111 = _func cons(Pair2, zip)
lemma-111 = _func cons(zip)
lemma-111 = _func cons(Pair2)
lemma-111 = _func Pair2
lemma-111 = _func Pair2(anyType, anyType)
lemma-111 = _func Pair2(anyType)
lemma-111 = _func anyType
lemma-111 = _func zip
lemma-111 = _func zip(list, list)
lemma-111 = _func zip(list)
lemma-111 = _func list
lemma-111 = _func _abstract match Var
lemma-111 = _func _abstract match Var(Func, Func)
lemma-111 = _func _abstract match Var(Func)
lemma-111 = _func _abstract Func
lemma-111 = _func _abstract Func(Func, Func)
lemma-111 = _func _abstract Func(Func)
lemma-111 = _func _abstract Func(Var, Var)
lemma-111 = _func _abstract Func(Var)
lemma-111 = _func _abstract Var
lemma-111 = _func _length 17
lemma-111 = _func _lengthDistinct 17
lemma-111 = _func _distinctRatio 1.0
lemma-111 = _func _popular Pair2
lemma-111 = _func recursive False
lemma-111 = _func _abstractLength 21
lemma-111 = _func _abstractLengthDistinct 9
lemma-111 = _func _nArgs 3

lemma-112 = ==
lemma-112 = ==(zip, cons)
lemma-112 = ==(cons)
lemma-112 = ==(zip)
lemma-112 = zip
lemma-112 = zip(cons, cons)
lemma-112 = zip(cons)
lemma-112 = cons
lemma-112 = cons(anyType, list)
lemma-112 = cons(list)
lemma-112 = cons(anyType)
lemma-112 = anyType
lemma-112 = list
lemma-112 = cons(Pair2, zip)
lemma-112 = cons(zip)
lemma-112 = cons(Pair2)
lemma-112 = Pair2
lemma-112 = Pair2(anyType, anyType)
lemma-112 = Pair2(anyType)
lemma-112 = zip(list, list)
lemma-112 = zip(list)
lemma-112 = _abstract Equals
lemma-112 = _abstract Equals(Func, Func)
lemma-112 = _abstract Equals(Func)
lemma-112 = _abstract Func
lemma-112 = _abstract Func(Func, Func)
lemma-112 = _abstract Func(Func)
lemma-112 = _abstract Func(Var, Var)
lemma-112 = _abstract Func(Var)
lemma-112 = _abstract Var
lemma-112 = _length 36
lemma-112 = _lengthDistinct 21
lemma-112 = _distinctRatio 0.6
lemma-112 = _popular anyType
lemma-112 = _commutative False
lemma-112 = _associative False
lemma-112 = _distributive False
lemma-112 = _abstractLength 36
lemma-112 = _abstractLengthDistinct 9
lemma-112 = _innerFunctionApplication True
lemma-112 = _innerFunctionDepth 2
lemma-112 = _func match x
lemma-112 = _func match x(nil, match y)
lemma-112 = _func match x(match y)
lemma-112 = _func match x(nil)
lemma-112 = _func nil
lemma-112 = _func match y
lemma-112 = _func match y(nil, cons)
lemma-112 = _func match y(cons)
lemma-112 = _func match y(nil)
lemma-112 = _func cons
lemma-112 = _func cons(Pair2, zip)
lemma-112 = _func cons(zip)
lemma-112 = _func cons(Pair2)
lemma-112 = _func Pair2
lemma-112 = _func Pair2(anyType, anyType)
lemma-112 = _func Pair2(anyType)
lemma-112 = _func anyType
lemma-112 = _func zip
lemma-112 = _func zip(list, list)
lemma-112 = _func zip(list)
lemma-112 = _func list
lemma-112 = _func _abstract match Var
lemma-112 = _func _abstract match Var(Func, match Var)
lemma-112 = _func _abstract match Var(match Var)
lemma-112 = _func _abstract match Var(Func)
lemma-112 = _func _abstract Func
lemma-112 = _func _abstract match Var(Func, Func)
lemma-112 = _func _abstract Func(Func, Func)
lemma-112 = _func _abstract Func(Func)
lemma-112 = _func _abstract Func(Var, Var)
lemma-112 = _func _abstract Func(Var)
lemma-112 = _func _abstract Var
lemma-112 = _func _length 21
lemma-112 = _func _lengthDistinct 21
lemma-112 = _func _distinctRatio 1.0
lemma-112 = _func _popular Pair2
lemma-112 = _func recursive True
lemma-112 = _func _abstractLength 26
lemma-112 = _func _abstractLengthDistinct 11
lemma-112 = _func _nArgs 2

lemma-113 = ==
lemma-113 = ==(zip, nil)
lemma-113 = ==(nil)
lemma-113 = ==(zip)
lemma-113 = zip
lemma-113 = zip(nil, list)
lemma-113 = zip(list)
lemma-113 = zip(nil)
lemma-113 = nil
lemma-113 = list
lemma-113 = _abstract Equals
lemma-113 = _abstract Equals(Func, Func)
lemma-113 = _abstract Equals(Func)
lemma-113 = _abstract Func
lemma-113 = _abstract Func(Func, Var)
lemma-113 = _abstract Func(Var)
lemma-113 = _abstract Func(Func)
lemma-113 = _abstract Var
lemma-113 = _length 11
lemma-113 = _lengthDistinct 10
lemma-113 = _distinctRatio 0.9
lemma-113 = _popular nil
lemma-113 = _commutative False
lemma-113 = _associative False
lemma-113 = _distributive False
lemma-113 = _abstractLength 11
lemma-113 = _abstractLengthDistinct 8
lemma-113 = _innerFunctionApplication True
lemma-113 = _innerFunctionDepth 2
lemma-113 = _func match x
lemma-113 = _func match x(nil, match y)
lemma-113 = _func match x(match y)
lemma-113 = _func match x(nil)
lemma-113 = _func nil
lemma-113 = _func match y
lemma-113 = _func match y(nil, cons)
lemma-113 = _func match y(cons)
lemma-113 = _func match y(nil)
lemma-113 = _func cons
lemma-113 = _func cons(Pair2, zip)
lemma-113 = _func cons(zip)
lemma-113 = _func cons(Pair2)
lemma-113 = _func Pair2
lemma-113 = _func Pair2(anyType, anyType)
lemma-113 = _func Pair2(anyType)
lemma-113 = _func anyType
lemma-113 = _func zip
lemma-113 = _func zip(list, list)
lemma-113 = _func zip(list)
lemma-113 = _func list
lemma-113 = _func _abstract match Var
lemma-113 = _func _abstract match Var(Func, match Var)
lemma-113 = _func _abstract match Var(match Var)
lemma-113 = _func _abstract match Var(Func)
lemma-113 = _func _abstract Func
lemma-113 = _func _abstract match Var(Func, Func)
lemma-113 = _func _abstract Func(Func, Func)
lemma-113 = _func _abstract Func(Func)
lemma-113 = _func _abstract Func(Var, Var)
lemma-113 = _func _abstract Func(Var)
lemma-113 = _func _abstract Var
lemma-113 = _func _length 21
lemma-113 = _func _lengthDistinct 21
lemma-113 = _func _distinctRatio 1.0
lemma-113 = _func _popular Pair2
lemma-113 = _func recursive True
lemma-113 = _func _abstractLength 26
lemma-113 = _func _abstractLengthDistinct 11
lemma-113 = _func _nArgs 2

lemma-114 = ==
lemma-114 = ==(mirror, Leaf)
lemma-114 = ==(Leaf)
lemma-114 = ==(mirror)
lemma-114 = mirror
lemma-114 = mirror(Leaf)
lemma-114 = Leaf
lemma-114 = _abstract Equals
lemma-114 = _abstract Equals(Func, Func)
lemma-114 = _abstract Equals(Func)
lemma-114 = _abstract Func
lemma-114 = _abstract Func(Func)
lemma-114 = _length 8
lemma-114 = _lengthDistinct 7
lemma-114 = _distinctRatio 0.9
lemma-114 = _popular Leaf
lemma-114 = _commutative False
lemma-114 = _associative False
lemma-114 = _distributive False
lemma-114 = _abstractLength 8
lemma-114 = _abstractLengthDistinct 5
lemma-114 = _innerFunctionApplication False
lemma-114 = _innerFunctionDepth 0
lemma-114 = _func match x
lemma-114 = _func match x(Leaf, Node)
lemma-114 = _func match x(Node)
lemma-114 = _func match x(Leaf)
lemma-114 = _func Leaf
lemma-114 = _func Node
lemma-114 = _func Node(mirror, anyType, mirror)
lemma-114 = _func Node(anyType, mirror)
lemma-114 = _func Node(mirror)
lemma-114 = _func Node(mirror, mirror)
lemma-114 = _func Node(mirror, anyType)
lemma-114 = _func Node(anyType)
lemma-114 = _func mirror
lemma-114 = _func mirror(Tree)
lemma-114 = _func Tree
lemma-114 = _func anyType
lemma-114 = _func _abstract match Var
lemma-114 = _func _abstract match Var(Func, Func)
lemma-114 = _func _abstract match Var(Func)
lemma-114 = _func _abstract Func
lemma-114 = _func _abstract Func(Func, Var, Func)
lemma-114 = _func _abstract Func(Var, Func)
lemma-114 = _func _abstract Func(Func)
lemma-114 = _func _abstract Func(Func, Func)
lemma-114 = _func _abstract Func(Func, Var)
lemma-114 = _func _abstract Func(Var)
lemma-114 = _func _abstract Var
lemma-114 = _func _length 16
lemma-114 = _func _lengthDistinct 16
lemma-114 = _func _distinctRatio 1.0
lemma-114 = _func _popular Leaf
lemma-114 = _func recursive True
lemma-114 = _func _abstractLength 22
lemma-114 = _func _abstractLengthDistinct 11
lemma-114 = _func _nArgs 1

lemma-115 = ==
lemma-115 = ==(mirror, Tree)
lemma-115 = ==(Tree)
lemma-115 = ==(mirror)
lemma-115 = mirror
lemma-115 = mirror(mirror)
lemma-115 = mirror(Tree)
lemma-115 = Tree
lemma-115 = _abstract Equals
lemma-115 = _abstract Equals(Func, Var)
lemma-115 = _abstract Equals(Var)
lemma-115 = _abstract Equals(Func)
lemma-115 = _abstract Func
lemma-115 = _abstract Func(Func)
lemma-115 = _abstract Func(Var)
lemma-115 = _abstract Var
lemma-115 = _length 10
lemma-115 = _lengthDistinct 8
lemma-115 = _distinctRatio 0.8
lemma-115 = _popular Tree
lemma-115 = _commutative False
lemma-115 = _associative False
lemma-115 = _distributive False
lemma-115 = _abstractLength 10
lemma-115 = _abstractLengthDistinct 8
lemma-115 = _innerFunctionApplication True
lemma-115 = _innerFunctionDepth 2
lemma-115 = _func match x
lemma-115 = _func match x(Leaf, Node)
lemma-115 = _func match x(Node)
lemma-115 = _func match x(Leaf)
lemma-115 = _func Leaf
lemma-115 = _func Node
lemma-115 = _func Node(mirror, anyType, mirror)
lemma-115 = _func Node(anyType, mirror)
lemma-115 = _func Node(mirror)
lemma-115 = _func Node(mirror, mirror)
lemma-115 = _func Node(mirror, anyType)
lemma-115 = _func Node(anyType)
lemma-115 = _func mirror
lemma-115 = _func mirror(Tree)
lemma-115 = _func Tree
lemma-115 = _func anyType
lemma-115 = _func _abstract match Var
lemma-115 = _func _abstract match Var(Func, Func)
lemma-115 = _func _abstract match Var(Func)
lemma-115 = _func _abstract Func
lemma-115 = _func _abstract Func(Func, Var, Func)
lemma-115 = _func _abstract Func(Var, Func)
lemma-115 = _func _abstract Func(Func)
lemma-115 = _func _abstract Func(Func, Func)
lemma-115 = _func _abstract Func(Func, Var)
lemma-115 = _func _abstract Func(Var)
lemma-115 = _func _abstract Var
lemma-115 = _func _length 16
lemma-115 = _func _lengthDistinct 16
lemma-115 = _func _distinctRatio 1.0
lemma-115 = _func _popular Leaf
lemma-115 = _func recursive True
lemma-115 = _func _abstractLength 22
lemma-115 = _func _abstractLengthDistinct 11
lemma-115 = _func _nArgs 1

lemma-118 = ==
lemma-118 = ==(height, Z)
lemma-118 = ==(Z)
lemma-118 = ==(height)
lemma-118 = height
lemma-118 = height(Leaf)
lemma-118 = Leaf
lemma-118 = Z
lemma-118 = _abstract Equals
lemma-118 = _abstract Equals(Func, Func)
lemma-118 = _abstract Equals(Func)
lemma-118 = _abstract Func
lemma-118 = _abstract Func(Func)
lemma-118 = _length 8
lemma-118 = _lengthDistinct 8
lemma-118 = _distinctRatio 1.0
lemma-118 = _popular ==
lemma-118 = _commutative False
lemma-118 = _associative False
lemma-118 = _distributive False
lemma-118 = _abstractLength 8
lemma-118 = _abstractLengthDistinct 5
lemma-118 = _innerFunctionApplication False
lemma-118 = _innerFunctionDepth 0
lemma-118 = _func match x
lemma-118 = _func match x(Z, S)
lemma-118 = _func match x(S)
lemma-118 = _func match x(Z)
lemma-118 = _func Z
lemma-118 = _func S
lemma-118 = _func S(max2)
lemma-118 = _func max2
lemma-118 = _func max2(height, height)
lemma-118 = _func max2(height)
lemma-118 = _func height
lemma-118 = _func height(Tree)
lemma-118 = _func Tree
lemma-118 = _func _abstract match Var
lemma-118 = _func _abstract match Var(Func, Func)
lemma-118 = _func _abstract match Var(Func)
lemma-118 = _func _abstract Func
lemma-118 = _func _abstract Func(Func)
lemma-118 = _func _abstract Func(Func, Func)
lemma-118 = _func _abstract Func(Var)
lemma-118 = _func _abstract Var
lemma-118 = _func _length 13
lemma-118 = _func _lengthDistinct 13
lemma-118 = _func _distinctRatio 1.0
lemma-118 = _func _popular S
lemma-118 = _func recursive True
lemma-118 = _func _abstractLength 17
lemma-118 = _func _abstractLengthDistinct 8
lemma-118 = _func _nArgs 1

lemma-119 = ==
lemma-119 = ==(height, S)
lemma-119 = ==(S)
lemma-119 = ==(height)
lemma-119 = height
lemma-119 = height(Node)
lemma-119 = Node
lemma-119 = Node(Tree, anyType, Tree)
lemma-119 = Node(anyType, Tree)
lemma-119 = Node(Tree)
lemma-119 = Node(Tree, Tree)
lemma-119 = Node(Tree, anyType)
lemma-119 = Node(anyType)
lemma-119 = Tree
lemma-119 = anyType
lemma-119 = S
lemma-119 = S(height)
lemma-119 = height(Tree)
lemma-119 = _abstract Equals
lemma-119 = _abstract Equals(Func, Func)
lemma-119 = _abstract Equals(Func)
lemma-119 = _abstract Func
lemma-119 = _abstract Func(Func)
lemma-119 = _abstract Func(Var, Var, Var)
lemma-119 = _abstract Func(Var, Var)
lemma-119 = _abstract Func(Var)
lemma-119 = _abstract Var
lemma-119 = _length 24
lemma-119 = _lengthDistinct 18
lemma-119 = _distinctRatio 0.8
lemma-119 = _popular Node(Tree)
lemma-119 = _commutative False
lemma-119 = _associative False
lemma-119 = _distributive False
lemma-119 = _abstractLength 24
lemma-119 = _abstractLengthDistinct 9
lemma-119 = _innerFunctionApplication True
lemma-119 = _innerFunctionDepth 2
lemma-119 = _func match x
lemma-119 = _func match x(Z, S)
lemma-119 = _func match x(S)
lemma-119 = _func match x(Z)
lemma-119 = _func Z
lemma-119 = _func S
lemma-119 = _func S(max2)
lemma-119 = _func max2
lemma-119 = _func max2(height, height)
lemma-119 = _func max2(height)
lemma-119 = _func height
lemma-119 = _func height(Tree)
lemma-119 = _func Tree
lemma-119 = _func _abstract match Var
lemma-119 = _func _abstract match Var(Func, Func)
lemma-119 = _func _abstract match Var(Func)
lemma-119 = _func _abstract Func
lemma-119 = _func _abstract Func(Func)
lemma-119 = _func _abstract Func(Func, Func)
lemma-119 = _func _abstract Func(Var)
lemma-119 = _func _abstract Var
lemma-119 = _func _length 13
lemma-119 = _func _lengthDistinct 13
lemma-119 = _func _distinctRatio 1.0
lemma-119 = _func _popular S
lemma-119 = _func recursive True
lemma-119 = _func _abstractLength 17
lemma-119 = _func _abstractLengthDistinct 8
lemma-119 = _func _nArgs 1

lemma-120 = ==
lemma-120 = ==(height, S)
lemma-120 = ==(S)
lemma-120 = ==(height)
lemma-120 = height
lemma-120 = height(Node)
lemma-120 = Node
lemma-120 = Node(Tree, anyType, Leaf)
lemma-120 = Node(anyType, Leaf)
lemma-120 = Node(Tree)
lemma-120 = Node(Tree, Leaf)
lemma-120 = Node(Leaf)
lemma-120 = Node(Tree, anyType)
lemma-120 = Node(anyType)
lemma-120 = Tree
lemma-120 = anyType
lemma-120 = Leaf
lemma-120 = S
lemma-120 = S(height)
lemma-120 = height(Tree)
lemma-120 = _abstract Equals
lemma-120 = _abstract Equals(Func, Func)
lemma-120 = _abstract Equals(Func)
lemma-120 = _abstract Func
lemma-120 = _abstract Func(Func)
lemma-120 = _abstract Func(Var, Var, Func)
lemma-120 = _abstract Func(Var, Func)
lemma-120 = _abstract Func(Var)
lemma-120 = _abstract Func(Var, Var)
lemma-120 = _abstract Var
lemma-120 = _length 24
lemma-120 = _lengthDistinct 20
lemma-120 = _distinctRatio 0.8
lemma-120 = _popular Node(Tree)
lemma-120 = _commutative False
lemma-120 = _associative False
lemma-120 = _distributive False
lemma-120 = _abstractLength 24
lemma-120 = _abstractLengthDistinct 10
lemma-120 = _innerFunctionApplication True
lemma-120 = _innerFunctionDepth 3
lemma-120 = _func match x
lemma-120 = _func match x(Z, S)
lemma-120 = _func match x(S)
lemma-120 = _func match x(Z)
lemma-120 = _func Z
lemma-120 = _func S
lemma-120 = _func S(max2)
lemma-120 = _func max2
lemma-120 = _func max2(height, height)
lemma-120 = _func max2(height)
lemma-120 = _func height
lemma-120 = _func height(Tree)
lemma-120 = _func Tree
lemma-120 = _func _abstract match Var
lemma-120 = _func _abstract match Var(Func, Func)
lemma-120 = _func _abstract match Var(Func)
lemma-120 = _func _abstract Func
lemma-120 = _func _abstract Func(Func)
lemma-120 = _func _abstract Func(Func, Func)
lemma-120 = _func _abstract Func(Var)
lemma-120 = _func _abstract Var
lemma-120 = _func _length 13
lemma-120 = _func _lengthDistinct 13
lemma-120 = _func _distinctRatio 1.0
lemma-120 = _func _popular S
lemma-120 = _func recursive True
lemma-120 = _func _abstractLength 17
lemma-120 = _func _abstractLengthDistinct 8
lemma-120 = _func _nArgs 1

lemma-121 = ==
lemma-121 = ==(height, S)
lemma-121 = ==(S)
lemma-121 = ==(height)
lemma-121 = height
lemma-121 = height(Node)
lemma-121 = Node
lemma-121 = Node(Leaf, anyType, Tree)
lemma-121 = Node(anyType, Tree)
lemma-121 = Node(Leaf)
lemma-121 = Node(Leaf, Tree)
lemma-121 = Node(Tree)
lemma-121 = Node(Leaf, anyType)
lemma-121 = Node(anyType)
lemma-121 = Leaf
lemma-121 = anyType
lemma-121 = Tree
lemma-121 = S
lemma-121 = S(height)
lemma-121 = height(Tree)
lemma-121 = _abstract Equals
lemma-121 = _abstract Equals(Func, Func)
lemma-121 = _abstract Equals(Func)
lemma-121 = _abstract Func
lemma-121 = _abstract Func(Func)
lemma-121 = _abstract Func(Func, Var, Var)
lemma-121 = _abstract Func(Var, Var)
lemma-121 = _abstract Func(Func, Var)
lemma-121 = _abstract Func(Var)
lemma-121 = _abstract Var
lemma-121 = _length 24
lemma-121 = _lengthDistinct 20
lemma-121 = _distinctRatio 0.8
lemma-121 = _popular Node(Leaf)
lemma-121 = _commutative False
lemma-121 = _associative False
lemma-121 = _distributive False
lemma-121 = _abstractLength 24
lemma-121 = _abstractLengthDistinct 10
lemma-121 = _innerFunctionApplication True
lemma-121 = _innerFunctionDepth 3
lemma-121 = _func match x
lemma-121 = _func match x(Z, S)
lemma-121 = _func match x(S)
lemma-121 = _func match x(Z)
lemma-121 = _func Z
lemma-121 = _func S
lemma-121 = _func S(max2)
lemma-121 = _func max2
lemma-121 = _func max2(height, height)
lemma-121 = _func max2(height)
lemma-121 = _func height
lemma-121 = _func height(Tree)
lemma-121 = _func Tree
lemma-121 = _func _abstract match Var
lemma-121 = _func _abstract match Var(Func, Func)
lemma-121 = _func _abstract match Var(Func)
lemma-121 = _func _abstract Func
lemma-121 = _func _abstract Func(Func)
lemma-121 = _func _abstract Func(Func, Func)
lemma-121 = _func _abstract Func(Var)
lemma-121 = _func _abstract Var
lemma-121 = _func _length 13
lemma-121 = _func _lengthDistinct 13
lemma-121 = _func _distinctRatio 1.0
lemma-121 = _func _popular S
lemma-121 = _func recursive True
lemma-121 = _func _abstractLength 17
lemma-121 = _func _abstractLengthDistinct 8
lemma-121 = _func _nArgs 1

lemma-122 = ==
lemma-122 = ==(height, height)
lemma-122 = ==(height)
lemma-122 = height
lemma-122 = height(Node)
lemma-122 = Node
lemma-122 = Node(Tree, anyType, Tree)
lemma-122 = Node(anyType, Tree)
lemma-122 = Node(Tree)
lemma-122 = Node(Tree, Tree)
lemma-122 = Node(Tree, anyType)
lemma-122 = Node(anyType)
lemma-122 = Tree
lemma-122 = anyType
lemma-122 = _abstract Equals
lemma-122 = _abstract Equals(Func, Func)
lemma-122 = _abstract Equals(Func)
lemma-122 = _abstract Func
lemma-122 = _abstract Func(Func)
lemma-122 = _abstract Func(Var, Var, Var)
lemma-122 = _abstract Func(Var, Var)
lemma-122 = _abstract Func(Var)
lemma-122 = _abstract Var
lemma-122 = _length 34
lemma-122 = _lengthDistinct 14
lemma-122 = _distinctRatio 0.4
lemma-122 = _popular Node(Tree)
lemma-122 = _commutative False
lemma-122 = _associative False
lemma-122 = _distributive False
lemma-122 = _abstractLength 34
lemma-122 = _abstractLengthDistinct 9
lemma-122 = _innerFunctionApplication True
lemma-122 = _innerFunctionDepth 2
lemma-122 = _func match x
lemma-122 = _func match x(Z, S)
lemma-122 = _func match x(S)
lemma-122 = _func match x(Z)
lemma-122 = _func Z
lemma-122 = _func S
lemma-122 = _func S(max2)
lemma-122 = _func max2
lemma-122 = _func max2(height, height)
lemma-122 = _func max2(height)
lemma-122 = _func height
lemma-122 = _func height(Tree)
lemma-122 = _func Tree
lemma-122 = _func _abstract match Var
lemma-122 = _func _abstract match Var(Func, Func)
lemma-122 = _func _abstract match Var(Func)
lemma-122 = _func _abstract Func
lemma-122 = _func _abstract Func(Func)
lemma-122 = _func _abstract Func(Func, Func)
lemma-122 = _func _abstract Func(Var)
lemma-122 = _func _abstract Var
lemma-122 = _func _length 13
lemma-122 = _func _lengthDistinct 13
lemma-122 = _func _distinctRatio 1.0
lemma-122 = _func _popular S
lemma-122 = _func recursive True
lemma-122 = _func _abstractLength 17
lemma-122 = _func _abstractLengthDistinct 8
lemma-122 = _func _nArgs 1

lemma-123 = ==
lemma-123 = ==(height, height)
lemma-123 = ==(height)
lemma-123 = height
lemma-123 = height(mirror)
lemma-123 = mirror
lemma-123 = mirror(Tree)
lemma-123 = Tree
lemma-123 = height(Tree)
lemma-123 = _abstract Equals
lemma-123 = _abstract Equals(Func, Func)
lemma-123 = _abstract Equals(Func)
lemma-123 = _abstract Func
lemma-123 = _abstract Func(Func)
lemma-123 = _abstract Func(Var)
lemma-123 = _abstract Var
lemma-123 = _length 12
lemma-123 = _lengthDistinct 9
lemma-123 = _distinctRatio 0.8
lemma-123 = _popular ==(height)
lemma-123 = _commutative False
lemma-123 = _associative False
lemma-123 = _distributive False
lemma-123 = _abstractLength 12
lemma-123 = _abstractLengthDistinct 7
lemma-123 = _innerFunctionApplication True
lemma-123 = _innerFunctionDepth 2
lemma-123 = _func match x
lemma-123 = _func match x(Z, S)
lemma-123 = _func match x(S)
lemma-123 = _func match x(Z)
lemma-123 = _func Z
lemma-123 = _func S
lemma-123 = _func S(max2)
lemma-123 = _func max2
lemma-123 = _func max2(height, height)
lemma-123 = _func max2(height)
lemma-123 = _func height
lemma-123 = _func height(Tree)
lemma-123 = _func Tree
lemma-123 = _func _abstract match Var
lemma-123 = _func _abstract match Var(Func, Func)
lemma-123 = _func _abstract match Var(Func)
lemma-123 = _func _abstract Func
lemma-123 = _func _abstract Func(Func)
lemma-123 = _func _abstract Func(Func, Func)
lemma-123 = _func _abstract Func(Var)
lemma-123 = _func _abstract Var
lemma-123 = _func _length 13
lemma-123 = _func _lengthDistinct 13
lemma-123 = _func _distinctRatio 1.0
lemma-123 = _func _popular S
lemma-123 = _func recursive True
lemma-123 = _func _abstractLength 17
lemma-123 = _func _abstractLengthDistinct 8
lemma-123 = _func _nArgs 1
lemma-123 = _func match x
lemma-123 = _func match x(Leaf, Node)
lemma-123 = _func match x(Node)
lemma-123 = _func match x(Leaf)
lemma-123 = _func Leaf
lemma-123 = _func Node
lemma-123 = _func Node(mirror, anyType, mirror)
lemma-123 = _func Node(anyType, mirror)
lemma-123 = _func Node(mirror)
lemma-123 = _func Node(mirror, mirror)
lemma-123 = _func Node(mirror, anyType)
lemma-123 = _func Node(anyType)
lemma-123 = _func mirror
lemma-123 = _func mirror(Tree)
lemma-123 = _func Tree
lemma-123 = _func anyType
lemma-123 = _func _abstract match Var
lemma-123 = _func _abstract match Var(Func, Func)
lemma-123 = _func _abstract match Var(Func)
lemma-123 = _func _abstract Func
lemma-123 = _func _abstract Func(Func, Var, Func)
lemma-123 = _func _abstract Func(Var, Func)
lemma-123 = _func _abstract Func(Func)
lemma-123 = _func _abstract Func(Func, Func)
lemma-123 = _func _abstract Func(Func, Var)
lemma-123 = _func _abstract Func(Var)
lemma-123 = _func _abstract Var
lemma-123 = _func _length 16
lemma-123 = _func _lengthDistinct 16
lemma-123 = _func _distinctRatio 1.0
lemma-123 = _func _popular Leaf
lemma-123 = _func recursive True
lemma-123 = _func _abstractLength 22
lemma-123 = _func _abstractLengthDistinct 11
lemma-123 = _func _nArgs 1

lemma-124 = ==
lemma-124 = ==(height, height)
lemma-124 = ==(height)
lemma-124 = height
lemma-124 = height(mirror)
lemma-124 = mirror
lemma-124 = mirror(Tree)
lemma-124 = Tree
lemma-124 = height(Tree)
lemma-124 = _abstract Equals
lemma-124 = _abstract Equals(Func, Func)
lemma-124 = _abstract Equals(Func)
lemma-124 = _abstract Func
lemma-124 = _abstract Func(Func)
lemma-124 = _abstract Func(Var)
lemma-124 = _abstract Var
lemma-124 = _length 12
lemma-124 = _lengthDistinct 9
lemma-124 = _distinctRatio 0.8
lemma-124 = _popular ==(height)
lemma-124 = _commutative False
lemma-124 = _associative False
lemma-124 = _distributive False
lemma-124 = _abstractLength 12
lemma-124 = _abstractLengthDistinct 7
lemma-124 = _innerFunctionApplication True
lemma-124 = _innerFunctionDepth 2
lemma-124 = _func match x
lemma-124 = _func match x(Z, S)
lemma-124 = _func match x(S)
lemma-124 = _func match x(Z)
lemma-124 = _func Z
lemma-124 = _func S
lemma-124 = _func S(max2)
lemma-124 = _func max2
lemma-124 = _func max2(height, height)
lemma-124 = _func max2(height)
lemma-124 = _func height
lemma-124 = _func height(Tree)
lemma-124 = _func Tree
lemma-124 = _func _abstract match Var
lemma-124 = _func _abstract match Var(Func, Func)
lemma-124 = _func _abstract match Var(Func)
lemma-124 = _func _abstract Func
lemma-124 = _func _abstract Func(Func)
lemma-124 = _func _abstract Func(Func, Func)
lemma-124 = _func _abstract Func(Var)
lemma-124 = _func _abstract Var
lemma-124 = _func _length 13
lemma-124 = _func _lengthDistinct 13
lemma-124 = _func _distinctRatio 1.0
lemma-124 = _func _popular S
lemma-124 = _func recursive True
lemma-124 = _func _abstractLength 17
lemma-124 = _func _abstractLengthDistinct 8
lemma-124 = _func _nArgs 1
lemma-124 = _func match x
lemma-124 = _func match x(Leaf, Node)
lemma-124 = _func match x(Node)
lemma-124 = _func match x(Leaf)
lemma-124 = _func Leaf
lemma-124 = _func Node
lemma-124 = _func Node(mirror, anyType, mirror)
lemma-124 = _func Node(anyType, mirror)
lemma-124 = _func Node(mirror)
lemma-124 = _func Node(mirror, mirror)
lemma-124 = _func Node(mirror, anyType)
lemma-124 = _func Node(anyType)
lemma-124 = _func mirror
lemma-124 = _func mirror(Tree)
lemma-124 = _func Tree
lemma-124 = _func anyType
lemma-124 = _func _abstract match Var
lemma-124 = _func _abstract match Var(Func, Func)
lemma-124 = _func _abstract match Var(Func)
lemma-124 = _func _abstract Func
lemma-124 = _func _abstract Func(Func, Var, Func)
lemma-124 = _func _abstract Func(Var, Func)
lemma-124 = _func _abstract Func(Func)
lemma-124 = _func _abstract Func(Func, Func)
lemma-124 = _func _abstract Func(Func, Var)
lemma-124 = _func _abstract Func(Var)
lemma-124 = _func _abstract Var
lemma-124 = _func _length 16
lemma-124 = _func _lengthDistinct 16
lemma-124 = _func _distinctRatio 1.0
lemma-124 = _func _popular Leaf
lemma-124 = _func recursive True
lemma-124 = _func _abstractLength 22
lemma-124 = _func _abstractLengthDistinct 11
lemma-124 = _func _nArgs 1

lemma-125 = ==
lemma-125 = ==(Node, mirror)
lemma-125 = ==(mirror)
lemma-125 = ==(Node)
lemma-125 = Node
lemma-125 = Node(Leaf, anyType, mirror)
lemma-125 = Node(anyType, mirror)
lemma-125 = Node(Leaf)
lemma-125 = Node(Leaf, mirror)
lemma-125 = Node(mirror)
lemma-125 = Node(Leaf, anyType)
lemma-125 = Node(anyType)
lemma-125 = Leaf
lemma-125 = anyType
lemma-125 = mirror
lemma-125 = mirror(Tree)
lemma-125 = Tree
lemma-125 = mirror(Node)
lemma-125 = Node(Tree, anyType, Leaf)
lemma-125 = Node(anyType, Leaf)
lemma-125 = Node(Tree)
lemma-125 = Node(Tree, Leaf)
lemma-125 = Node(Tree, anyType)
lemma-125 = _abstract Equals
lemma-125 = _abstract Equals(Func, Func)
lemma-125 = _abstract Equals(Func)
lemma-125 = _abstract Func
lemma-125 = _abstract Func(Func, Var, Func)
lemma-125 = _abstract Func(Var, Func)
lemma-125 = _abstract Func(Func)
lemma-125 = _abstract Func(Func, Func)
lemma-125 = _abstract Func(Func, Var)
lemma-125 = _abstract Func(Var)
lemma-125 = _abstract Var
lemma-125 = _abstract Func(Var, Var, Func)
lemma-125 = _abstract Func(Var, Var)
lemma-125 = _length 34
lemma-125 = _lengthDistinct 23
lemma-125 = _distinctRatio 0.7
lemma-125 = _popular Node(Leaf)
lemma-125 = _commutative False
lemma-125 = _associative False
lemma-125 = _distributive False
lemma-125 = _abstractLength 34
lemma-125 = _abstractLengthDistinct 13
lemma-125 = _innerFunctionApplication True
lemma-125 = _innerFunctionDepth 3
lemma-125 = _func match x
lemma-125 = _func match x(Leaf, Node)
lemma-125 = _func match x(Node)
lemma-125 = _func match x(Leaf)
lemma-125 = _func Leaf
lemma-125 = _func Node
lemma-125 = _func Node(mirror, anyType, mirror)
lemma-125 = _func Node(anyType, mirror)
lemma-125 = _func Node(mirror)
lemma-125 = _func Node(mirror, mirror)
lemma-125 = _func Node(mirror, anyType)
lemma-125 = _func Node(anyType)
lemma-125 = _func mirror
lemma-125 = _func mirror(Tree)
lemma-125 = _func Tree
lemma-125 = _func anyType
lemma-125 = _func _abstract match Var
lemma-125 = _func _abstract match Var(Func, Func)
lemma-125 = _func _abstract match Var(Func)
lemma-125 = _func _abstract Func
lemma-125 = _func _abstract Func(Func, Var, Func)
lemma-125 = _func _abstract Func(Var, Func)
lemma-125 = _func _abstract Func(Func)
lemma-125 = _func _abstract Func(Func, Func)
lemma-125 = _func _abstract Func(Func, Var)
lemma-125 = _func _abstract Func(Var)
lemma-125 = _func _abstract Var
lemma-125 = _func _length 16
lemma-125 = _func _lengthDistinct 16
lemma-125 = _func _distinctRatio 1.0
lemma-125 = _func _popular Leaf
lemma-125 = _func recursive True
lemma-125 = _func _abstractLength 22
lemma-125 = _func _abstractLengthDistinct 11
lemma-125 = _func _nArgs 1

lemma-126 = ==
lemma-126 = ==(Node, mirror)
lemma-126 = ==(mirror)
lemma-126 = ==(Node)
lemma-126 = Node
lemma-126 = Node(mirror, anyType, mirror)
lemma-126 = Node(anyType, mirror)
lemma-126 = Node(mirror)
lemma-126 = Node(mirror, mirror)
lemma-126 = Node(mirror, anyType)
lemma-126 = Node(anyType)
lemma-126 = mirror
lemma-126 = mirror(Tree)
lemma-126 = Tree
lemma-126 = anyType
lemma-126 = mirror(Node)
lemma-126 = Node(Tree, anyType, Tree)
lemma-126 = Node(anyType, Tree)
lemma-126 = Node(Tree)
lemma-126 = Node(Tree, Tree)
lemma-126 = Node(Tree, anyType)
lemma-126 = _abstract Equals
lemma-126 = _abstract Equals(Func, Func)
lemma-126 = _abstract Equals(Func)
lemma-126 = _abstract Func
lemma-126 = _abstract Func(Func, Var, Func)
lemma-126 = _abstract Func(Var, Func)
lemma-126 = _abstract Func(Func)
lemma-126 = _abstract Func(Func, Func)
lemma-126 = _abstract Func(Func, Var)
lemma-126 = _abstract Func(Var)
lemma-126 = _abstract Var
lemma-126 = _abstract Func(Var, Var, Var)
lemma-126 = _abstract Func(Var, Var)
lemma-126 = _length 36
lemma-126 = _lengthDistinct 21
lemma-126 = _distinctRatio 0.6
lemma-126 = _popular Node(Tree)
lemma-126 = _commutative False
lemma-126 = _associative False
lemma-126 = _distributive False
lemma-126 = _abstractLength 36
lemma-126 = _abstractLengthDistinct 13
lemma-126 = _innerFunctionApplication True
lemma-126 = _innerFunctionDepth 2
lemma-126 = _func match x
lemma-126 = _func match x(Leaf, Node)
lemma-126 = _func match x(Node)
lemma-126 = _func match x(Leaf)
lemma-126 = _func Leaf
lemma-126 = _func Node
lemma-126 = _func Node(mirror, anyType, mirror)
lemma-126 = _func Node(anyType, mirror)
lemma-126 = _func Node(mirror)
lemma-126 = _func Node(mirror, mirror)
lemma-126 = _func Node(mirror, anyType)
lemma-126 = _func Node(anyType)
lemma-126 = _func mirror
lemma-126 = _func mirror(Tree)
lemma-126 = _func Tree
lemma-126 = _func anyType
lemma-126 = _func _abstract match Var
lemma-126 = _func _abstract match Var(Func, Func)
lemma-126 = _func _abstract match Var(Func)
lemma-126 = _func _abstract Func
lemma-126 = _func _abstract Func(Func, Var, Func)
lemma-126 = _func _abstract Func(Var, Func)
lemma-126 = _func _abstract Func(Func)
lemma-126 = _func _abstract Func(Func, Func)
lemma-126 = _func _abstract Func(Func, Var)
lemma-126 = _func _abstract Func(Var)
lemma-126 = _func _abstract Var
lemma-126 = _func _length 16
lemma-126 = _func _lengthDistinct 16
lemma-126 = _func _distinctRatio 1.0
lemma-126 = _func _popular Leaf
lemma-126 = _func recursive True
lemma-126 = _func _abstractLength 22
lemma-126 = _func _abstractLengthDistinct 11
lemma-126 = _func _nArgs 1

lemma-127 = ==
lemma-127 = ==(plus, Nat)
lemma-127 = ==(Nat)
lemma-127 = ==(plus)
lemma-127 = plus
lemma-127 = plus(Nat, Z)
lemma-127 = plus(Z)
lemma-127 = plus(Nat)
lemma-127 = Nat
lemma-127 = Z
lemma-127 = _abstract Equals
lemma-127 = _abstract Equals(Func, Var)
lemma-127 = _abstract Equals(Var)
lemma-127 = _abstract Equals(Func)
lemma-127 = _abstract Func
lemma-127 = _abstract Func(Var, Func)
lemma-127 = _abstract Func(Func)
lemma-127 = _abstract Func(Var)
lemma-127 = _abstract Var
lemma-127 = _length 11
lemma-127 = _lengthDistinct 10
lemma-127 = _distinctRatio 0.9
lemma-127 = _popular Nat
lemma-127 = _commutative False
lemma-127 = _associative False
lemma-127 = _distributive False
lemma-127 = _abstractLength 11
lemma-127 = _abstractLengthDistinct 9
lemma-127 = _innerFunctionApplication True
lemma-127 = _innerFunctionDepth 2
lemma-127 = _func match x
lemma-127 = _func match x(Nat, S)
lemma-127 = _func match x(S)
lemma-127 = _func match x(Nat)
lemma-127 = _func Nat
lemma-127 = _func S
lemma-127 = _func S(plus)
lemma-127 = _func plus
lemma-127 = _func plus(Nat, Nat)
lemma-127 = _func plus(Nat)
lemma-127 = _func _abstract match Var
lemma-127 = _func _abstract match Var(Var, Func)
lemma-127 = _func _abstract match Var(Func)
lemma-127 = _func _abstract match Var(Var)
lemma-127 = _func _abstract Var
lemma-127 = _func _abstract Func
lemma-127 = _func _abstract Func(Func)
lemma-127 = _func _abstract Func(Var, Var)
lemma-127 = _func _abstract Func(Var)
lemma-127 = _func _length 10
lemma-127 = _func _lengthDistinct 10
lemma-127 = _func _distinctRatio 1.0
lemma-127 = _func _popular Nat
lemma-127 = _func recursive True
lemma-127 = _func _abstractLength 13
lemma-127 = _func _abstractLengthDistinct 9
lemma-127 = _func _nArgs 2

lemma-128 = ==
lemma-128 = ==(plus, Nat)
lemma-128 = ==(Nat)
lemma-128 = ==(plus)
lemma-128 = plus
lemma-128 = plus(Z, Nat)
lemma-128 = plus(Nat)
lemma-128 = plus(Z)
lemma-128 = Z
lemma-128 = Nat
lemma-128 = _abstract Equals
lemma-128 = _abstract Equals(Func, Var)
lemma-128 = _abstract Equals(Var)
lemma-128 = _abstract Equals(Func)
lemma-128 = _abstract Func
lemma-128 = _abstract Func(Func, Var)
lemma-128 = _abstract Func(Var)
lemma-128 = _abstract Func(Func)
lemma-128 = _abstract Var
lemma-128 = _length 11
lemma-128 = _lengthDistinct 10
lemma-128 = _distinctRatio 0.9
lemma-128 = _popular Nat
lemma-128 = _commutative False
lemma-128 = _associative False
lemma-128 = _distributive False
lemma-128 = _abstractLength 11
lemma-128 = _abstractLengthDistinct 9
lemma-128 = _innerFunctionApplication True
lemma-128 = _innerFunctionDepth 2
lemma-128 = _func match x
lemma-128 = _func match x(Nat, S)
lemma-128 = _func match x(S)
lemma-128 = _func match x(Nat)
lemma-128 = _func Nat
lemma-128 = _func S
lemma-128 = _func S(plus)
lemma-128 = _func plus
lemma-128 = _func plus(Nat, Nat)
lemma-128 = _func plus(Nat)
lemma-128 = _func _abstract match Var
lemma-128 = _func _abstract match Var(Var, Func)
lemma-128 = _func _abstract match Var(Func)
lemma-128 = _func _abstract match Var(Var)
lemma-128 = _func _abstract Var
lemma-128 = _func _abstract Func
lemma-128 = _func _abstract Func(Func)
lemma-128 = _func _abstract Func(Var, Var)
lemma-128 = _func _abstract Func(Var)
lemma-128 = _func _length 10
lemma-128 = _func _lengthDistinct 10
lemma-128 = _func _distinctRatio 1.0
lemma-128 = _func _popular Nat
lemma-128 = _func recursive True
lemma-128 = _func _abstractLength 13
lemma-128 = _func _abstractLengthDistinct 9
lemma-128 = _func _nArgs 2

lemma-129 = ==
lemma-129 = ==(drop, drop)
lemma-129 = ==(drop)
lemma-129 = drop
lemma-129 = drop(plus, cons)
lemma-129 = drop(cons)
lemma-129 = drop(plus)
lemma-129 = plus
lemma-129 = plus(Nat, Nat)
lemma-129 = plus(Nat)
lemma-129 = Nat
lemma-129 = cons
lemma-129 = cons(anyType, nil)
lemma-129 = cons(nil)
lemma-129 = cons(anyType)
lemma-129 = anyType
lemma-129 = nil
lemma-129 = drop(Nat, cons)
lemma-129 = drop(Nat)
lemma-129 = _abstract Equals
lemma-129 = _abstract Equals(Func, Func)
lemma-129 = _abstract Equals(Func)
lemma-129 = _abstract Func
lemma-129 = _abstract Func(Func, Func)
lemma-129 = _abstract Func(Func)
lemma-129 = _abstract Func(Var, Var)
lemma-129 = _abstract Func(Var)
lemma-129 = _abstract Var
lemma-129 = _abstract Func(Var, Func)
lemma-129 = _length 31
lemma-129 = _lengthDistinct 19
lemma-129 = _distinctRatio 0.6
lemma-129 = _popular Nat
lemma-129 = _commutative False
lemma-129 = _associative False
lemma-129 = _distributive False
lemma-129 = _abstractLength 31
lemma-129 = _abstractLengthDistinct 10
lemma-129 = _innerFunctionApplication True
lemma-129 = _innerFunctionDepth 3
lemma-129 = _func match x
lemma-129 = _func match x(list, match y)
lemma-129 = _func match x(match y)
lemma-129 = _func match x(list)
lemma-129 = _func list
lemma-129 = _func match y
lemma-129 = _func match y(nil, drop)
lemma-129 = _func match y(drop)
lemma-129 = _func match y(nil)
lemma-129 = _func nil
lemma-129 = _func drop
lemma-129 = _func drop(Nat, list)
lemma-129 = _func drop(list)
lemma-129 = _func drop(Nat)
lemma-129 = _func Nat
lemma-129 = _func _abstract match Var
lemma-129 = _func _abstract match Var(Var, match Var)
lemma-129 = _func _abstract match Var(match Var)
lemma-129 = _func _abstract match Var(Var)
lemma-129 = _func _abstract Var
lemma-129 = _func _abstract match Var(Func, Func)
lemma-129 = _func _abstract match Var(Func)
lemma-129 = _func _abstract Func
lemma-129 = _func _abstract Func(Var, Var)
lemma-129 = _func _abstract Func(Var)
lemma-129 = _func _length 15
lemma-129 = _func _lengthDistinct 15
lemma-129 = _func _distinctRatio 1.0
lemma-129 = _func _popular Nat
lemma-129 = _func recursive True
lemma-129 = _func _abstractLength 16
lemma-129 = _func _abstractLengthDistinct 10
lemma-129 = _func _nArgs 2
lemma-129 = _func match x
lemma-129 = _func match x(Nat, S)
lemma-129 = _func match x(S)
lemma-129 = _func match x(Nat)
lemma-129 = _func Nat
lemma-129 = _func S
lemma-129 = _func S(plus)
lemma-129 = _func plus
lemma-129 = _func plus(Nat, Nat)
lemma-129 = _func plus(Nat)
lemma-129 = _func _abstract match Var
lemma-129 = _func _abstract match Var(Var, Func)
lemma-129 = _func _abstract match Var(Func)
lemma-129 = _func _abstract match Var(Var)
lemma-129 = _func _abstract Var
lemma-129 = _func _abstract Func
lemma-129 = _func _abstract Func(Func)
lemma-129 = _func _abstract Func(Var, Var)
lemma-129 = _func _abstract Func(Var)
lemma-129 = _func _length 10
lemma-129 = _func _lengthDistinct 10
lemma-129 = _func _distinctRatio 1.0
lemma-129 = _func _popular Nat
lemma-129 = _func recursive True
lemma-129 = _func _abstractLength 13
lemma-129 = _func _abstractLengthDistinct 9
lemma-129 = _func _nArgs 2

lemma-130 = ==
lemma-130 = ==(drop, drop)
lemma-130 = ==(drop)
lemma-130 = drop
lemma-130 = drop(Nat, drop)
lemma-130 = drop(drop)
lemma-130 = drop(Nat)
lemma-130 = Nat
lemma-130 = drop(Nat, list)
lemma-130 = drop(list)
lemma-130 = list
lemma-130 = drop(plus, list)
lemma-130 = drop(plus)
lemma-130 = plus
lemma-130 = plus(Nat, Nat)
lemma-130 = plus(Nat)
lemma-130 = _abstract Equals
lemma-130 = _abstract Equals(Func, Func)
lemma-130 = _abstract Equals(Func)
lemma-130 = _abstract Func
lemma-130 = _abstract Func(Var, Func)
lemma-130 = _abstract Func(Func)
lemma-130 = _abstract Func(Var)
lemma-130 = _abstract Var
lemma-130 = _abstract Func(Var, Var)
lemma-130 = _abstract Func(Func, Var)
lemma-130 = _length 26
lemma-130 = _lengthDistinct 16
lemma-130 = _distinctRatio 0.6
lemma-130 = _popular Nat
lemma-130 = _commutative False
lemma-130 = _associative False
lemma-130 = _distributive False
lemma-130 = _abstractLength 26
lemma-130 = _abstractLengthDistinct 10
lemma-130 = _innerFunctionApplication True
lemma-130 = _innerFunctionDepth 2
lemma-130 = _func match x
lemma-130 = _func match x(list, match y)
lemma-130 = _func match x(match y)
lemma-130 = _func match x(list)
lemma-130 = _func list
lemma-130 = _func match y
lemma-130 = _func match y(nil, drop)
lemma-130 = _func match y(drop)
lemma-130 = _func match y(nil)
lemma-130 = _func nil
lemma-130 = _func drop
lemma-130 = _func drop(Nat, list)
lemma-130 = _func drop(list)
lemma-130 = _func drop(Nat)
lemma-130 = _func Nat
lemma-130 = _func _abstract match Var
lemma-130 = _func _abstract match Var(Var, match Var)
lemma-130 = _func _abstract match Var(match Var)
lemma-130 = _func _abstract match Var(Var)
lemma-130 = _func _abstract Var
lemma-130 = _func _abstract match Var(Func, Func)
lemma-130 = _func _abstract match Var(Func)
lemma-130 = _func _abstract Func
lemma-130 = _func _abstract Func(Var, Var)
lemma-130 = _func _abstract Func(Var)
lemma-130 = _func _length 15
lemma-130 = _func _lengthDistinct 15
lemma-130 = _func _distinctRatio 1.0
lemma-130 = _func _popular Nat
lemma-130 = _func recursive True
lemma-130 = _func _abstractLength 16
lemma-130 = _func _abstractLengthDistinct 10
lemma-130 = _func _nArgs 2
lemma-130 = _func match x
lemma-130 = _func match x(Nat, S)
lemma-130 = _func match x(S)
lemma-130 = _func match x(Nat)
lemma-130 = _func Nat
lemma-130 = _func S
lemma-130 = _func S(plus)
lemma-130 = _func plus
lemma-130 = _func plus(Nat, Nat)
lemma-130 = _func plus(Nat)
lemma-130 = _func _abstract match Var
lemma-130 = _func _abstract match Var(Var, Func)
lemma-130 = _func _abstract match Var(Func)
lemma-130 = _func _abstract match Var(Var)
lemma-130 = _func _abstract Var
lemma-130 = _func _abstract Func
lemma-130 = _func _abstract Func(Func)
lemma-130 = _func _abstract Func(Var, Var)
lemma-130 = _func _abstract Func(Var)
lemma-130 = _func _length 10
lemma-130 = _func _lengthDistinct 10
lemma-130 = _func _distinctRatio 1.0
lemma-130 = _func _popular Nat
lemma-130 = _func recursive True
lemma-130 = _func _abstractLength 13
lemma-130 = _func _abstractLengthDistinct 9
lemma-130 = _func _nArgs 2

lemma-131 = ==
lemma-131 = ==(plus, plus)
lemma-131 = ==(plus)
lemma-131 = plus
lemma-131 = plus(Nat, Nat)
lemma-131 = plus(Nat)
lemma-131 = Nat
lemma-131 = _abstract Equals
lemma-131 = _abstract Equals(Func, Func)
lemma-131 = _abstract Equals(Func)
lemma-131 = _abstract Func
lemma-131 = _abstract Func(Var, Var)
lemma-131 = _abstract Func(Var)
lemma-131 = _abstract Var
lemma-131 = _length 16
lemma-131 = _lengthDistinct 7
lemma-131 = _distinctRatio 0.4
lemma-131 = _popular Nat
lemma-131 = _commutative True
lemma-131 = _associative False
lemma-131 = _distributive False
lemma-131 = _abstractLength 16
lemma-131 = _abstractLengthDistinct 7
lemma-131 = _innerFunctionApplication False
lemma-131 = _innerFunctionDepth 1
lemma-131 = _func match x
lemma-131 = _func match x(Nat, S)
lemma-131 = _func match x(S)
lemma-131 = _func match x(Nat)
lemma-131 = _func Nat
lemma-131 = _func S
lemma-131 = _func S(plus)
lemma-131 = _func plus
lemma-131 = _func plus(Nat, Nat)
lemma-131 = _func plus(Nat)
lemma-131 = _func _abstract match Var
lemma-131 = _func _abstract match Var(Var, Func)
lemma-131 = _func _abstract match Var(Func)
lemma-131 = _func _abstract match Var(Var)
lemma-131 = _func _abstract Var
lemma-131 = _func _abstract Func
lemma-131 = _func _abstract Func(Func)
lemma-131 = _func _abstract Func(Var, Var)
lemma-131 = _func _abstract Func(Var)
lemma-131 = _func _length 10
lemma-131 = _func _lengthDistinct 10
lemma-131 = _func _distinctRatio 1.0
lemma-131 = _func _popular Nat
lemma-131 = _func recursive True
lemma-131 = _func _abstractLength 13
lemma-131 = _func _abstractLengthDistinct 9
lemma-131 = _func _nArgs 2

lemma-132 = ==
lemma-132 = ==(plus, plus)
lemma-132 = ==(plus)
lemma-132 = plus
lemma-132 = plus(S, Nat)
lemma-132 = plus(Nat)
lemma-132 = plus(S)
lemma-132 = S
lemma-132 = S(Nat)
lemma-132 = Nat
lemma-132 = plus(Nat, S)
lemma-132 = _abstract Equals
lemma-132 = _abstract Equals(Func, Func)
lemma-132 = _abstract Equals(Func)
lemma-132 = _abstract Func
lemma-132 = _abstract Func(Func, Var)
lemma-132 = _abstract Func(Var)
lemma-132 = _abstract Func(Func)
lemma-132 = _abstract Var
lemma-132 = _abstract Func(Var, Func)
lemma-132 = _length 20
lemma-132 = _lengthDistinct 11
lemma-132 = _distinctRatio 0.6
lemma-132 = _popular Nat
lemma-132 = _commutative False
lemma-132 = _associative False
lemma-132 = _distributive False
lemma-132 = _abstractLength 20
lemma-132 = _abstractLengthDistinct 9
lemma-132 = _innerFunctionApplication True
lemma-132 = _innerFunctionDepth 2
lemma-132 = _func match x
lemma-132 = _func match x(Nat, S)
lemma-132 = _func match x(S)
lemma-132 = _func match x(Nat)
lemma-132 = _func Nat
lemma-132 = _func S
lemma-132 = _func S(plus)
lemma-132 = _func plus
lemma-132 = _func plus(Nat, Nat)
lemma-132 = _func plus(Nat)
lemma-132 = _func _abstract match Var
lemma-132 = _func _abstract match Var(Var, Func)
lemma-132 = _func _abstract match Var(Func)
lemma-132 = _func _abstract match Var(Var)
lemma-132 = _func _abstract Var
lemma-132 = _func _abstract Func
lemma-132 = _func _abstract Func(Func)
lemma-132 = _func _abstract Func(Var, Var)
lemma-132 = _func _abstract Func(Var)
lemma-132 = _func _length 10
lemma-132 = _func _lengthDistinct 10
lemma-132 = _func _distinctRatio 1.0
lemma-132 = _func _popular Nat
lemma-132 = _func recursive True
lemma-132 = _func _abstractLength 13
lemma-132 = _func _abstractLengthDistinct 9
lemma-132 = _func _nArgs 2

lemma-133 = ==
lemma-133 = ==(S, plus)
lemma-133 = ==(plus)
lemma-133 = ==(S)
lemma-133 = S
lemma-133 = S(plus)
lemma-133 = plus
lemma-133 = plus(Nat, Nat)
lemma-133 = plus(Nat)
lemma-133 = Nat
lemma-133 = plus(Nat, S)
lemma-133 = plus(S)
lemma-133 = S(Nat)
lemma-133 = _abstract Equals
lemma-133 = _abstract Equals(Func, Func)
lemma-133 = _abstract Equals(Func)
lemma-133 = _abstract Func
lemma-133 = _abstract Func(Func)
lemma-133 = _abstract Func(Var, Var)
lemma-133 = _abstract Func(Var)
lemma-133 = _abstract Var
lemma-133 = _abstract Func(Var, Func)
lemma-133 = _length 20
lemma-133 = _lengthDistinct 13
lemma-133 = _distinctRatio 0.6
lemma-133 = _popular Nat
lemma-133 = _commutative False
lemma-133 = _associative False
lemma-133 = _distributive False
lemma-133 = _abstractLength 20
lemma-133 = _abstractLengthDistinct 9
lemma-133 = _innerFunctionApplication True
lemma-133 = _innerFunctionDepth 2
lemma-133 = _func match x
lemma-133 = _func match x(Nat, S)
lemma-133 = _func match x(S)
lemma-133 = _func match x(Nat)
lemma-133 = _func Nat
lemma-133 = _func S
lemma-133 = _func S(plus)
lemma-133 = _func plus
lemma-133 = _func plus(Nat, Nat)
lemma-133 = _func plus(Nat)
lemma-133 = _func _abstract match Var
lemma-133 = _func _abstract match Var(Var, Func)
lemma-133 = _func _abstract match Var(Func)
lemma-133 = _func _abstract match Var(Var)
lemma-133 = _func _abstract Var
lemma-133 = _func _abstract Func
lemma-133 = _func _abstract Func(Func)
lemma-133 = _func _abstract Func(Var, Var)
lemma-133 = _func _abstract Func(Var)
lemma-133 = _func _length 10
lemma-133 = _func _lengthDistinct 10
lemma-133 = _func _distinctRatio 1.0
lemma-133 = _func _popular Nat
lemma-133 = _func recursive True
lemma-133 = _func _abstractLength 13
lemma-133 = _func _abstractLengthDistinct 9
lemma-133 = _func _nArgs 2

lemma-134 = ==
lemma-134 = ==(plus, plus)
lemma-134 = ==(plus)
lemma-134 = plus
lemma-134 = plus(plus, Nat)
lemma-134 = plus(Nat)
lemma-134 = plus(plus)
lemma-134 = plus(Nat, Nat)
lemma-134 = Nat
lemma-134 = plus(Nat, plus)
lemma-134 = _abstract Equals
lemma-134 = _abstract Equals(Func, Func)
lemma-134 = _abstract Equals(Func)
lemma-134 = _abstract Func
lemma-134 = _abstract Func(Func, Var)
lemma-134 = _abstract Func(Var)
lemma-134 = _abstract Func(Func)
lemma-134 = _abstract Func(Var, Var)
lemma-134 = _abstract Var
lemma-134 = _abstract Func(Var, Func)
lemma-134 = _length 26
lemma-134 = _lengthDistinct 10
lemma-134 = _distinctRatio 0.4
lemma-134 = _popular Nat
lemma-134 = _commutative False
lemma-134 = _associative True
lemma-134 = _distributive False
lemma-134 = _abstractLength 26
lemma-134 = _abstractLengthDistinct 10
lemma-134 = _innerFunctionApplication True
lemma-134 = _innerFunctionDepth 2
lemma-134 = _func match x
lemma-134 = _func match x(Nat, S)
lemma-134 = _func match x(S)
lemma-134 = _func match x(Nat)
lemma-134 = _func Nat
lemma-134 = _func S
lemma-134 = _func S(plus)
lemma-134 = _func plus
lemma-134 = _func plus(Nat, Nat)
lemma-134 = _func plus(Nat)
lemma-134 = _func _abstract match Var
lemma-134 = _func _abstract match Var(Var, Func)
lemma-134 = _func _abstract match Var(Func)
lemma-134 = _func _abstract match Var(Var)
lemma-134 = _func _abstract Var
lemma-134 = _func _abstract Func
lemma-134 = _func _abstract Func(Func)
lemma-134 = _func _abstract Func(Var, Var)
lemma-134 = _func _abstract Func(Var)
lemma-134 = _func _length 10
lemma-134 = _func _lengthDistinct 10
lemma-134 = _func _distinctRatio 1.0
lemma-134 = _func _popular Nat
lemma-134 = _func recursive True
lemma-134 = _func _abstractLength 13
lemma-134 = _func _abstractLengthDistinct 9
lemma-134 = _func _nArgs 2

lemma-139 = ==
lemma-139 = ==(drop, drop)
lemma-139 = ==(drop)
lemma-139 = drop
lemma-139 = drop(plus, list)
lemma-139 = drop(list)
lemma-139 = drop(plus)
lemma-139 = plus
lemma-139 = plus(Nat, Nat)
lemma-139 = plus(Nat)
lemma-139 = Nat
lemma-139 = list
lemma-139 = drop(Nat, drop)
lemma-139 = drop(drop)
lemma-139 = drop(Nat)
lemma-139 = drop(Nat, list)
lemma-139 = _abstract Equals
lemma-139 = _abstract Equals(Func, Func)
lemma-139 = _abstract Equals(Func)
lemma-139 = _abstract Func
lemma-139 = _abstract Func(Func, Var)
lemma-139 = _abstract Func(Var)
lemma-139 = _abstract Func(Func)
lemma-139 = _abstract Func(Var, Var)
lemma-139 = _abstract Var
lemma-139 = _abstract Func(Var, Func)
lemma-139 = _length 26
lemma-139 = _lengthDistinct 16
lemma-139 = _distinctRatio 0.6
lemma-139 = _popular Nat
lemma-139 = _commutative False
lemma-139 = _associative False
lemma-139 = _distributive False
lemma-139 = _abstractLength 26
lemma-139 = _abstractLengthDistinct 10
lemma-139 = _innerFunctionApplication True
lemma-139 = _innerFunctionDepth 2
lemma-139 = _func match x
lemma-139 = _func match x(list, match y)
lemma-139 = _func match x(match y)
lemma-139 = _func match x(list)
lemma-139 = _func list
lemma-139 = _func match y
lemma-139 = _func match y(nil, drop)
lemma-139 = _func match y(drop)
lemma-139 = _func match y(nil)
lemma-139 = _func nil
lemma-139 = _func drop
lemma-139 = _func drop(Nat, list)
lemma-139 = _func drop(list)
lemma-139 = _func drop(Nat)
lemma-139 = _func Nat
lemma-139 = _func _abstract match Var
lemma-139 = _func _abstract match Var(Var, match Var)
lemma-139 = _func _abstract match Var(match Var)
lemma-139 = _func _abstract match Var(Var)
lemma-139 = _func _abstract Var
lemma-139 = _func _abstract match Var(Func, Func)
lemma-139 = _func _abstract match Var(Func)
lemma-139 = _func _abstract Func
lemma-139 = _func _abstract Func(Var, Var)
lemma-139 = _func _abstract Func(Var)
lemma-139 = _func _length 15
lemma-139 = _func _lengthDistinct 15
lemma-139 = _func _distinctRatio 1.0
lemma-139 = _func _popular Nat
lemma-139 = _func recursive True
lemma-139 = _func _abstractLength 16
lemma-139 = _func _abstractLengthDistinct 10
lemma-139 = _func _nArgs 2
lemma-139 = _func match x
lemma-139 = _func match x(Nat, S)
lemma-139 = _func match x(S)
lemma-139 = _func match x(Nat)
lemma-139 = _func Nat
lemma-139 = _func S
lemma-139 = _func S(plus)
lemma-139 = _func plus
lemma-139 = _func plus(Nat, Nat)
lemma-139 = _func plus(Nat)
lemma-139 = _func _abstract match Var
lemma-139 = _func _abstract match Var(Var, Func)
lemma-139 = _func _abstract match Var(Func)
lemma-139 = _func _abstract match Var(Var)
lemma-139 = _func _abstract Var
lemma-139 = _func _abstract Func
lemma-139 = _func _abstract Func(Func)
lemma-139 = _func _abstract Func(Var, Var)
lemma-139 = _func _abstract Func(Var)
lemma-139 = _func _length 10
lemma-139 = _func _lengthDistinct 10
lemma-139 = _func _distinctRatio 1.0
lemma-139 = _func _popular Nat
lemma-139 = _func recursive True
lemma-139 = _func _abstractLength 13
lemma-139 = _func _abstractLengthDistinct 9
lemma-139 = _func _nArgs 2

lemma-140 = =>
lemma-140 = =>(not, ==)
lemma-140 = =>(==)
lemma-140 = =>(not)
lemma-140 = not
lemma-140 = not(null)
lemma-140 = null
lemma-140 = null(list)
lemma-140 = list
lemma-140 = ==
lemma-140 = ==(last, last)
lemma-140 = ==(last)
lemma-140 = last
lemma-140 = last(cons)
lemma-140 = cons
lemma-140 = cons(Nat, list)
lemma-140 = cons(list)
lemma-140 = cons(Nat)
lemma-140 = Nat
lemma-140 = last(list)
lemma-140 = _abstract =>
lemma-140 = _abstract =>(Func, Equals)
lemma-140 = _abstract =>(Equals)
lemma-140 = _abstract =>(Func)
lemma-140 = _abstract Func
lemma-140 = _abstract Func(Var)
lemma-140 = _abstract Var
lemma-140 = _abstract Equals
lemma-140 = _abstract Equals(Func, Func)
lemma-140 = _abstract Equals(Func)
lemma-140 = _abstract Func(Func)
lemma-140 = _abstract Func(Var, Var)
lemma-140 = _length 24
lemma-140 = _lengthDistinct 20
lemma-140 = _distinctRatio 0.8
lemma-140 = _popular list
lemma-140 = _commutative False
lemma-140 = _associative False
lemma-140 = _distributive False
lemma-140 = _abstractLength 22
lemma-140 = _abstractLengthDistinct 12
lemma-140 = _innerFunctionApplication False
lemma-140 = _innerFunctionDepth 0
lemma-140 = _func match x
lemma-140 = _func match x(Z, match z)
lemma-140 = _func match x(match z)
lemma-140 = _func match x(Z)
lemma-140 = _func Z
lemma-140 = _func match z
lemma-140 = _func match z(Nat, last)
lemma-140 = _func match z(last)
lemma-140 = _func match z(Nat)
lemma-140 = _func Nat
lemma-140 = _func last
lemma-140 = _func last(cons)
lemma-140 = _func cons
lemma-140 = _func cons(Nat, list)
lemma-140 = _func cons(list)
lemma-140 = _func cons(Nat)
lemma-140 = _func list
lemma-140 = _func _abstract match Var
lemma-140 = _func _abstract match Var(Func, match Var)
lemma-140 = _func _abstract match Var(match Var)
lemma-140 = _func _abstract match Var(Func)
lemma-140 = _func _abstract Func
lemma-140 = _func _abstract match Var(Var, Func)
lemma-140 = _func _abstract match Var(Var)
lemma-140 = _func _abstract Var
lemma-140 = _func _abstract Func(Func)
lemma-140 = _func _abstract Func(Var, Var)
lemma-140 = _func _abstract Func(Var)
lemma-140 = _func _length 17
lemma-140 = _func _lengthDistinct 17
lemma-140 = _func _distinctRatio 1.0
lemma-140 = _func _popular Nat
lemma-140 = _func recursive True
lemma-140 = _func _abstractLength 18
lemma-140 = _func _abstractLengthDistinct 11
lemma-140 = _func _nArgs 1
lemma-140 = _func match x
lemma-140 = _func match x(True, False)
lemma-140 = _func match x(False)
lemma-140 = _func match x(True)
lemma-140 = _func True
lemma-140 = _func False
lemma-140 = _func _abstract match Var
lemma-140 = _func _abstract match Var(Const, Const)
lemma-140 = _func _abstract match Var(Const)
lemma-140 = _func _abstract Const
lemma-140 = _func _length 6
lemma-140 = _func _lengthDistinct 6
lemma-140 = _func _distinctRatio 1.0
lemma-140 = _func _popular False
lemma-140 = _func recursive False
lemma-140 = _func _abstractLength 6
lemma-140 = _func _abstractLengthDistinct 4
lemma-140 = _func _nArgs 1

lemma-141 = ==
lemma-141 = ==(null, True)
lemma-141 = ==(True)
lemma-141 = ==(null)
lemma-141 = null
lemma-141 = null(nil)
lemma-141 = nil
lemma-141 = True
lemma-141 = _abstract Equals
lemma-141 = _abstract Equals(Func, Const)
lemma-141 = _abstract Equals(Const)
lemma-141 = _abstract Equals(Func)
lemma-141 = _abstract Func
lemma-141 = _abstract Func(Func)
lemma-141 = _abstract Const
lemma-141 = _length 8
lemma-141 = _lengthDistinct 8
lemma-141 = _distinctRatio 1.0
lemma-141 = _popular ==
lemma-141 = _commutative False
lemma-141 = _associative False
lemma-141 = _distributive False
lemma-141 = _abstractLength 8
lemma-141 = _abstractLengthDistinct 7
lemma-141 = _innerFunctionApplication False
lemma-141 = _innerFunctionDepth 0
lemma-141 = _func match x
lemma-141 = _func match x(True, False)
lemma-141 = _func match x(False)
lemma-141 = _func match x(True)
lemma-141 = _func True
lemma-141 = _func False
lemma-141 = _func _abstract match Var
lemma-141 = _func _abstract match Var(Const, Const)
lemma-141 = _func _abstract match Var(Const)
lemma-141 = _func _abstract Const
lemma-141 = _func _length 6
lemma-141 = _func _lengthDistinct 6
lemma-141 = _func _distinctRatio 1.0
lemma-141 = _func _popular False
lemma-141 = _func recursive False
lemma-141 = _func _abstractLength 6
lemma-141 = _func _abstractLengthDistinct 4
lemma-141 = _func _nArgs 1

lemma-142 = ==
lemma-142 = ==(null, False)
lemma-142 = ==(False)
lemma-142 = ==(null)
lemma-142 = null
lemma-142 = null(cons)
lemma-142 = cons
lemma-142 = cons(anyType, list)
lemma-142 = cons(list)
lemma-142 = cons(anyType)
lemma-142 = anyType
lemma-142 = list
lemma-142 = False
lemma-142 = _abstract Equals
lemma-142 = _abstract Equals(Func, Const)
lemma-142 = _abstract Equals(Const)
lemma-142 = _abstract Equals(Func)
lemma-142 = _abstract Func
lemma-142 = _abstract Func(Func)
lemma-142 = _abstract Func(Var, Var)
lemma-142 = _abstract Func(Var)
lemma-142 = _abstract Var
lemma-142 = _abstract Const
lemma-142 = _length 13
lemma-142 = _lengthDistinct 13
lemma-142 = _distinctRatio 1.0
lemma-142 = _popular ==
lemma-142 = _commutative False
lemma-142 = _associative False
lemma-142 = _distributive False
lemma-142 = _abstractLength 13
lemma-142 = _abstractLengthDistinct 10
lemma-142 = _innerFunctionApplication True
lemma-142 = _innerFunctionDepth 2
lemma-142 = _func match x
lemma-142 = _func match x(True, False)
lemma-142 = _func match x(False)
lemma-142 = _func match x(True)
lemma-142 = _func True
lemma-142 = _func False
lemma-142 = _func _abstract match Var
lemma-142 = _func _abstract match Var(Const, Const)
lemma-142 = _func _abstract match Var(Const)
lemma-142 = _func _abstract Const
lemma-142 = _func _length 6
lemma-142 = _func _lengthDistinct 6
lemma-142 = _func _distinctRatio 1.0
lemma-142 = _func _popular False
lemma-142 = _func recursive False
lemma-142 = _func _abstractLength 6
lemma-142 = _func _abstractLengthDistinct 4
lemma-142 = _func _nArgs 1

lemma-143 = =>
lemma-143 = =>(le, le)
lemma-143 = =>(le)
lemma-143 = le
lemma-143 = le(Nat, Nat)
lemma-143 = le(Nat)
lemma-143 = Nat
lemma-143 = le(Nat, S)
lemma-143 = le(S)
lemma-143 = S
lemma-143 = S(Nat)
lemma-143 = _abstract =>
lemma-143 = _abstract =>(Func, Func)
lemma-143 = _abstract =>(Func)
lemma-143 = _abstract Func
lemma-143 = _abstract Func(Var, Var)
lemma-143 = _abstract Func(Var)
lemma-143 = _abstract Var
lemma-143 = _abstract Func(Var, Func)
lemma-143 = _abstract Func(Func)
lemma-143 = _length 18
lemma-143 = _lengthDistinct 11
lemma-143 = _distinctRatio 0.6
lemma-143 = _popular Nat
lemma-143 = _commutative False
lemma-143 = _associative False
lemma-143 = _distributive False
lemma-143 = _abstractLength 18
lemma-143 = _abstractLengthDistinct 9
lemma-143 = _innerFunctionApplication False
lemma-143 = _innerFunctionDepth 0
lemma-143 = _func match x
lemma-143 = _func match x(True, match y)
lemma-143 = _func match x(match y)
lemma-143 = _func match x(True)
lemma-143 = _func True
lemma-143 = _func match y
lemma-143 = _func match y(False, le)
lemma-143 = _func match y(le)
lemma-143 = _func match y(False)
lemma-143 = _func False
lemma-143 = _func le
lemma-143 = _func le(Nat, Nat)
lemma-143 = _func le(Nat)
lemma-143 = _func Nat
lemma-143 = _func _abstract match Var
lemma-143 = _func _abstract match Var(Const, match Var)
lemma-143 = _func _abstract match Var(match Var)
lemma-143 = _func _abstract match Var(Const)
lemma-143 = _func _abstract Const
lemma-143 = _func _abstract match Var(Const, Func)
lemma-143 = _func _abstract match Var(Func)
lemma-143 = _func _abstract Func
lemma-143 = _func _abstract Func(Var, Var)
lemma-143 = _func _abstract Func(Var)
lemma-143 = _func _abstract Var
lemma-143 = _func _length 14
lemma-143 = _func _lengthDistinct 14
lemma-143 = _func _distinctRatio 1.0
lemma-143 = _func _popular False
lemma-143 = _func recursive True
lemma-143 = _func _abstractLength 16
lemma-143 = _func _abstractLengthDistinct 11
lemma-143 = _func _nArgs 2

lemma-149 = ==
lemma-149 = ==(double, Z)
lemma-149 = ==(Z)
lemma-149 = ==(double)
lemma-149 = double
lemma-149 = double(Z)
lemma-149 = Z
lemma-149 = _abstract Equals
lemma-149 = _abstract Equals(Func, Func)
lemma-149 = _abstract Equals(Func)
lemma-149 = _abstract Func
lemma-149 = _abstract Func(Func)
lemma-149 = _length 8
lemma-149 = _lengthDistinct 7
lemma-149 = _distinctRatio 0.9
lemma-149 = _popular Z
lemma-149 = _commutative False
lemma-149 = _associative False
lemma-149 = _distributive False
lemma-149 = _abstractLength 8
lemma-149 = _abstractLengthDistinct 5
lemma-149 = _innerFunctionApplication False
lemma-149 = _innerFunctionDepth 0
lemma-149 = _func match x
lemma-149 = _func match x(Z, S)
lemma-149 = _func match x(S)
lemma-149 = _func match x(Z)
lemma-149 = _func Z
lemma-149 = _func S
lemma-149 = _func S(S)
lemma-149 = _func S(double)
lemma-149 = _func double
lemma-149 = _func double(Nat)
lemma-149 = _func Nat
lemma-149 = _func _abstract match Var
lemma-149 = _func _abstract match Var(Func, Func)
lemma-149 = _func _abstract match Var(Func)
lemma-149 = _func _abstract Func
lemma-149 = _func _abstract Func(Func)
lemma-149 = _func _abstract Func(Var)
lemma-149 = _func _abstract Var
lemma-149 = _func _length 11
lemma-149 = _func _lengthDistinct 11
lemma-149 = _func _distinctRatio 1.0
lemma-149 = _func _popular Nat
lemma-149 = _func recursive True
lemma-149 = _func _abstractLength 12
lemma-149 = _func _abstractLengthDistinct 7
lemma-149 = _func _nArgs 1

lemma-150 = ==
lemma-150 = ==(double, S)
lemma-150 = ==(S)
lemma-150 = ==(double)
lemma-150 = double
lemma-150 = double(S)
lemma-150 = S
lemma-150 = S(Z)
lemma-150 = Z
lemma-150 = S(S)
lemma-150 = _abstract Equals
lemma-150 = _abstract Equals(Func, Func)
lemma-150 = _abstract Equals(Func)
lemma-150 = _abstract Func
lemma-150 = _abstract Func(Func)
lemma-150 = _length 14
lemma-150 = _lengthDistinct 10
lemma-150 = _distinctRatio 0.7
lemma-150 = _popular S
lemma-150 = _commutative False
lemma-150 = _associative False
lemma-150 = _distributive False
lemma-150 = _abstractLength 14
lemma-150 = _abstractLengthDistinct 5
lemma-150 = _innerFunctionApplication False
lemma-150 = _innerFunctionDepth 0
lemma-150 = _func match x
lemma-150 = _func match x(Z, S)
lemma-150 = _func match x(S)
lemma-150 = _func match x(Z)
lemma-150 = _func Z
lemma-150 = _func S
lemma-150 = _func S(S)
lemma-150 = _func S(double)
lemma-150 = _func double
lemma-150 = _func double(Nat)
lemma-150 = _func Nat
lemma-150 = _func _abstract match Var
lemma-150 = _func _abstract match Var(Func, Func)
lemma-150 = _func _abstract match Var(Func)
lemma-150 = _func _abstract Func
lemma-150 = _func _abstract Func(Func)
lemma-150 = _func _abstract Func(Var)
lemma-150 = _func _abstract Var
lemma-150 = _func _length 11
lemma-150 = _func _lengthDistinct 11
lemma-150 = _func _distinctRatio 1.0
lemma-150 = _func _popular Nat
lemma-150 = _func recursive True
lemma-150 = _func _abstractLength 12
lemma-150 = _func _abstractLengthDistinct 7
lemma-150 = _func _nArgs 1

lemma-151 = ==
lemma-151 = ==(plus, double)
lemma-151 = ==(double)
lemma-151 = ==(plus)
lemma-151 = plus
lemma-151 = plus(Nat, Nat)
lemma-151 = plus(Nat)
lemma-151 = Nat
lemma-151 = double
lemma-151 = double(Nat)
lemma-151 = _abstract Equals
lemma-151 = _abstract Equals(Func, Func)
lemma-151 = _abstract Equals(Func)
lemma-151 = _abstract Func
lemma-151 = _abstract Func(Var, Var)
lemma-151 = _abstract Func(Var)
lemma-151 = _abstract Var
lemma-151 = _length 13
lemma-151 = _lengthDistinct 10
lemma-151 = _distinctRatio 0.8
lemma-151 = _popular Nat
lemma-151 = _commutative False
lemma-151 = _associative False
lemma-151 = _distributive False
lemma-151 = _abstractLength 13
lemma-151 = _abstractLengthDistinct 7
lemma-151 = _innerFunctionApplication False
lemma-151 = _innerFunctionDepth 1
lemma-151 = _func match x
lemma-151 = _func match x(Z, S)
lemma-151 = _func match x(S)
lemma-151 = _func match x(Z)
lemma-151 = _func Z
lemma-151 = _func S
lemma-151 = _func S(S)
lemma-151 = _func S(double)
lemma-151 = _func double
lemma-151 = _func double(Nat)
lemma-151 = _func Nat
lemma-151 = _func _abstract match Var
lemma-151 = _func _abstract match Var(Func, Func)
lemma-151 = _func _abstract match Var(Func)
lemma-151 = _func _abstract Func
lemma-151 = _func _abstract Func(Func)
lemma-151 = _func _abstract Func(Var)
lemma-151 = _func _abstract Var
lemma-151 = _func _length 11
lemma-151 = _func _lengthDistinct 11
lemma-151 = _func _distinctRatio 1.0
lemma-151 = _func _popular Nat
lemma-151 = _func recursive True
lemma-151 = _func _abstractLength 12
lemma-151 = _func _abstractLengthDistinct 7
lemma-151 = _func _nArgs 1
lemma-151 = _func match x
lemma-151 = _func match x(Nat, S)
lemma-151 = _func match x(S)
lemma-151 = _func match x(Nat)
lemma-151 = _func Nat
lemma-151 = _func S
lemma-151 = _func S(plus)
lemma-151 = _func plus
lemma-151 = _func plus(Nat, Nat)
lemma-151 = _func plus(Nat)
lemma-151 = _func _abstract match Var
lemma-151 = _func _abstract match Var(Var, Func)
lemma-151 = _func _abstract match Var(Func)
lemma-151 = _func _abstract match Var(Var)
lemma-151 = _func _abstract Var
lemma-151 = _func _abstract Func
lemma-151 = _func _abstract Func(Func)
lemma-151 = _func _abstract Func(Var, Var)
lemma-151 = _func _abstract Func(Var)
lemma-151 = _func _length 10
lemma-151 = _func _lengthDistinct 10
lemma-151 = _func _distinctRatio 1.0
lemma-151 = _func _popular Nat
lemma-151 = _func recursive True
lemma-151 = _func _abstractLength 13
lemma-151 = _func _abstractLengthDistinct 9
lemma-151 = _func _nArgs 2

lemma-152 = ==
lemma-152 = ==(double, plus)
lemma-152 = ==(plus)
lemma-152 = ==(double)
lemma-152 = double
lemma-152 = double(Nat)
lemma-152 = Nat
lemma-152 = plus
lemma-152 = plus(Nat, Nat)
lemma-152 = plus(Nat)
lemma-152 = _abstract Equals
lemma-152 = _abstract Equals(Func, Func)
lemma-152 = _abstract Equals(Func)
lemma-152 = _abstract Func
lemma-152 = _abstract Func(Var)
lemma-152 = _abstract Var
lemma-152 = _abstract Func(Var, Var)
lemma-152 = _length 13
lemma-152 = _lengthDistinct 10
lemma-152 = _distinctRatio 0.8
lemma-152 = _popular Nat
lemma-152 = _commutative False
lemma-152 = _associative False
lemma-152 = _distributive False
lemma-152 = _abstractLength 13
lemma-152 = _abstractLengthDistinct 7
lemma-152 = _innerFunctionApplication False
lemma-152 = _innerFunctionDepth 1
lemma-152 = _func match x
lemma-152 = _func match x(Z, S)
lemma-152 = _func match x(S)
lemma-152 = _func match x(Z)
lemma-152 = _func Z
lemma-152 = _func S
lemma-152 = _func S(S)
lemma-152 = _func S(double)
lemma-152 = _func double
lemma-152 = _func double(Nat)
lemma-152 = _func Nat
lemma-152 = _func _abstract match Var
lemma-152 = _func _abstract match Var(Func, Func)
lemma-152 = _func _abstract match Var(Func)
lemma-152 = _func _abstract Func
lemma-152 = _func _abstract Func(Func)
lemma-152 = _func _abstract Func(Var)
lemma-152 = _func _abstract Var
lemma-152 = _func _length 11
lemma-152 = _func _lengthDistinct 11
lemma-152 = _func _distinctRatio 1.0
lemma-152 = _func _popular Nat
lemma-152 = _func recursive True
lemma-152 = _func _abstractLength 12
lemma-152 = _func _abstractLengthDistinct 7
lemma-152 = _func _nArgs 1
lemma-152 = _func match x
lemma-152 = _func match x(Nat, S)
lemma-152 = _func match x(S)
lemma-152 = _func match x(Nat)
lemma-152 = _func Nat
lemma-152 = _func S
lemma-152 = _func S(plus)
lemma-152 = _func plus
lemma-152 = _func plus(Nat, Nat)
lemma-152 = _func plus(Nat)
lemma-152 = _func _abstract match Var
lemma-152 = _func _abstract match Var(Var, Func)
lemma-152 = _func _abstract match Var(Func)
lemma-152 = _func _abstract match Var(Var)
lemma-152 = _func _abstract Var
lemma-152 = _func _abstract Func
lemma-152 = _func _abstract Func(Func)
lemma-152 = _func _abstract Func(Var, Var)
lemma-152 = _func _abstract Func(Var)
lemma-152 = _func _length 10
lemma-152 = _func _lengthDistinct 10
lemma-152 = _func _distinctRatio 1.0
lemma-152 = _func _popular Nat
lemma-152 = _func recursive True
lemma-152 = _func _abstractLength 13
lemma-152 = _func _abstractLengthDistinct 9
lemma-152 = _func _nArgs 2

lemma-156 = ==
lemma-156 = ==(plus, length)
lemma-156 = ==(length)
lemma-156 = ==(plus)
lemma-156 = plus
lemma-156 = plus(length, length)
lemma-156 = plus(length)
lemma-156 = length
lemma-156 = length(list)
lemma-156 = list
lemma-156 = length(append)
lemma-156 = append
lemma-156 = append(list, list)
lemma-156 = append(list)
lemma-156 = _abstract Equals
lemma-156 = _abstract Equals(Func, Func)
lemma-156 = _abstract Equals(Func)
lemma-156 = _abstract Func
lemma-156 = _abstract Func(Func, Func)
lemma-156 = _abstract Func(Func)
lemma-156 = _abstract Func(Var)
lemma-156 = _abstract Var
lemma-156 = _abstract Func(Var, Var)
lemma-156 = _length 22
lemma-156 = _lengthDistinct 14
lemma-156 = _distinctRatio 0.6
lemma-156 = _popular list
lemma-156 = _commutative False
lemma-156 = _associative False
lemma-156 = _distributive False
lemma-156 = _abstractLength 22
lemma-156 = _abstractLengthDistinct 9
lemma-156 = _innerFunctionApplication True
lemma-156 = _innerFunctionDepth 2
lemma-156 = _func match x
lemma-156 = _func match x(list, cons)
lemma-156 = _func match x(cons)
lemma-156 = _func match x(list)
lemma-156 = _func list
lemma-156 = _func cons
lemma-156 = _func cons(anyType, append)
lemma-156 = _func cons(append)
lemma-156 = _func cons(anyType)
lemma-156 = _func anyType
lemma-156 = _func append
lemma-156 = _func append(list, list)
lemma-156 = _func append(list)
lemma-156 = _func _abstract match Var
lemma-156 = _func _abstract match Var(Var, Func)
lemma-156 = _func _abstract match Var(Func)
lemma-156 = _func _abstract match Var(Var)
lemma-156 = _func _abstract Var
lemma-156 = _func _abstract Func
lemma-156 = _func _abstract Func(Var, Func)
lemma-156 = _func _abstract Func(Func)
lemma-156 = _func _abstract Func(Var)
lemma-156 = _func _abstract Func(Var, Var)
lemma-156 = _func _length 13
lemma-156 = _func _lengthDistinct 13
lemma-156 = _func _distinctRatio 1.0
lemma-156 = _func _popular anyType
lemma-156 = _func recursive True
lemma-156 = _func _abstractLength 16
lemma-156 = _func _abstractLengthDistinct 10
lemma-156 = _func _nArgs 2
lemma-156 = _func match x
lemma-156 = _func match x(Z, S)
lemma-156 = _func match x(S)
lemma-156 = _func match x(Z)
lemma-156 = _func Z
lemma-156 = _func S
lemma-156 = _func S(length)
lemma-156 = _func length
lemma-156 = _func length(list)
lemma-156 = _func list
lemma-156 = _func _abstract match Var
lemma-156 = _func _abstract match Var(Func, Func)
lemma-156 = _func _abstract match Var(Func)
lemma-156 = _func _abstract Func
lemma-156 = _func _abstract Func(Func)
lemma-156 = _func _abstract Func(Var)
lemma-156 = _func _abstract Var
lemma-156 = _func _length 10
lemma-156 = _func _lengthDistinct 10
lemma-156 = _func _distinctRatio 1.0
lemma-156 = _func _popular S
lemma-156 = _func recursive True
lemma-156 = _func _abstractLength 10
lemma-156 = _func _abstractLengthDistinct 7
lemma-156 = _func _nArgs 1
lemma-156 = _func match x
lemma-156 = _func match x(Nat, S)
lemma-156 = _func match x(S)
lemma-156 = _func match x(Nat)
lemma-156 = _func Nat
lemma-156 = _func S
lemma-156 = _func S(plus)
lemma-156 = _func plus
lemma-156 = _func plus(Nat, Nat)
lemma-156 = _func plus(Nat)
lemma-156 = _func _abstract match Var
lemma-156 = _func _abstract match Var(Var, Func)
lemma-156 = _func _abstract match Var(Func)
lemma-156 = _func _abstract match Var(Var)
lemma-156 = _func _abstract Var
lemma-156 = _func _abstract Func
lemma-156 = _func _abstract Func(Func)
lemma-156 = _func _abstract Func(Var, Var)
lemma-156 = _func _abstract Func(Var)
lemma-156 = _func _length 10
lemma-156 = _func _lengthDistinct 10
lemma-156 = _func _distinctRatio 1.0
lemma-156 = _func _popular Nat
lemma-156 = _func recursive True
lemma-156 = _func _abstractLength 13
lemma-156 = _func _abstractLengthDistinct 9
lemma-156 = _func _nArgs 2

lemma-157 = ==
lemma-157 = ==(length, plus)
lemma-157 = ==(plus)
lemma-157 = ==(length)
lemma-157 = length
lemma-157 = length(append)
lemma-157 = append
lemma-157 = append(list, list)
lemma-157 = append(list)
lemma-157 = list
lemma-157 = plus
lemma-157 = plus(length, length)
lemma-157 = plus(length)
lemma-157 = length(list)
lemma-157 = _abstract Equals
lemma-157 = _abstract Equals(Func, Func)
lemma-157 = _abstract Equals(Func)
lemma-157 = _abstract Func
lemma-157 = _abstract Func(Func)
lemma-157 = _abstract Func(Var, Var)
lemma-157 = _abstract Func(Var)
lemma-157 = _abstract Var
lemma-157 = _abstract Func(Func, Func)
lemma-157 = _length 22
lemma-157 = _lengthDistinct 14
lemma-157 = _distinctRatio 0.6
lemma-157 = _popular list
lemma-157 = _commutative False
lemma-157 = _associative False
lemma-157 = _distributive False
lemma-157 = _abstractLength 22
lemma-157 = _abstractLengthDistinct 9
lemma-157 = _innerFunctionApplication True
lemma-157 = _innerFunctionDepth 2
lemma-157 = _func match x
lemma-157 = _func match x(list, cons)
lemma-157 = _func match x(cons)
lemma-157 = _func match x(list)
lemma-157 = _func list
lemma-157 = _func cons
lemma-157 = _func cons(anyType, append)
lemma-157 = _func cons(append)
lemma-157 = _func cons(anyType)
lemma-157 = _func anyType
lemma-157 = _func append
lemma-157 = _func append(list, list)
lemma-157 = _func append(list)
lemma-157 = _func _abstract match Var
lemma-157 = _func _abstract match Var(Var, Func)
lemma-157 = _func _abstract match Var(Func)
lemma-157 = _func _abstract match Var(Var)
lemma-157 = _func _abstract Var
lemma-157 = _func _abstract Func
lemma-157 = _func _abstract Func(Var, Func)
lemma-157 = _func _abstract Func(Func)
lemma-157 = _func _abstract Func(Var)
lemma-157 = _func _abstract Func(Var, Var)
lemma-157 = _func _length 13
lemma-157 = _func _lengthDistinct 13
lemma-157 = _func _distinctRatio 1.0
lemma-157 = _func _popular anyType
lemma-157 = _func recursive True
lemma-157 = _func _abstractLength 16
lemma-157 = _func _abstractLengthDistinct 10
lemma-157 = _func _nArgs 2
lemma-157 = _func match x
lemma-157 = _func match x(Z, S)
lemma-157 = _func match x(S)
lemma-157 = _func match x(Z)
lemma-157 = _func Z
lemma-157 = _func S
lemma-157 = _func S(length)
lemma-157 = _func length
lemma-157 = _func length(list)
lemma-157 = _func list
lemma-157 = _func _abstract match Var
lemma-157 = _func _abstract match Var(Func, Func)
lemma-157 = _func _abstract match Var(Func)
lemma-157 = _func _abstract Func
lemma-157 = _func _abstract Func(Func)
lemma-157 = _func _abstract Func(Var)
lemma-157 = _func _abstract Var
lemma-157 = _func _length 10
lemma-157 = _func _lengthDistinct 10
lemma-157 = _func _distinctRatio 1.0
lemma-157 = _func _popular S
lemma-157 = _func recursive True
lemma-157 = _func _abstractLength 10
lemma-157 = _func _abstractLengthDistinct 7
lemma-157 = _func _nArgs 1
lemma-157 = _func match x
lemma-157 = _func match x(Nat, S)
lemma-157 = _func match x(S)
lemma-157 = _func match x(Nat)
lemma-157 = _func Nat
lemma-157 = _func S
lemma-157 = _func S(plus)
lemma-157 = _func plus
lemma-157 = _func plus(Nat, Nat)
lemma-157 = _func plus(Nat)
lemma-157 = _func _abstract match Var
lemma-157 = _func _abstract match Var(Var, Func)
lemma-157 = _func _abstract match Var(Func)
lemma-157 = _func _abstract match Var(Var)
lemma-157 = _func _abstract Var
lemma-157 = _func _abstract Func
lemma-157 = _func _abstract Func(Func)
lemma-157 = _func _abstract Func(Var, Var)
lemma-157 = _func _abstract Func(Var)
lemma-157 = _func _length 10
lemma-157 = _func _lengthDistinct 10
lemma-157 = _func _distinctRatio 1.0
lemma-157 = _func _popular Nat
lemma-157 = _func recursive True
lemma-157 = _func _abstractLength 13
lemma-157 = _func _abstractLengthDistinct 9
lemma-157 = _func _nArgs 2

lemma-159 = ==
lemma-159 = ==(length, length)
lemma-159 = ==(length)
lemma-159 = length
lemma-159 = length(append)
lemma-159 = append
lemma-159 = append(list, list)
lemma-159 = append(list)
lemma-159 = list
lemma-159 = _abstract Equals
lemma-159 = _abstract Equals(Func, Func)
lemma-159 = _abstract Equals(Func)
lemma-159 = _abstract Func
lemma-159 = _abstract Func(Func)
lemma-159 = _abstract Func(Var, Var)
lemma-159 = _abstract Func(Var)
lemma-159 = _abstract Var
lemma-159 = _length 20
lemma-159 = _lengthDistinct 9
lemma-159 = _distinctRatio 0.4
lemma-159 = _popular append(list)
lemma-159 = _commutative True
lemma-159 = _associative False
lemma-159 = _distributive False
lemma-159 = _abstractLength 20
lemma-159 = _abstractLengthDistinct 8
lemma-159 = _innerFunctionApplication True
lemma-159 = _innerFunctionDepth 2
lemma-159 = _func match x
lemma-159 = _func match x(list, cons)
lemma-159 = _func match x(cons)
lemma-159 = _func match x(list)
lemma-159 = _func list
lemma-159 = _func cons
lemma-159 = _func cons(anyType, append)
lemma-159 = _func cons(append)
lemma-159 = _func cons(anyType)
lemma-159 = _func anyType
lemma-159 = _func append
lemma-159 = _func append(list, list)
lemma-159 = _func append(list)
lemma-159 = _func _abstract match Var
lemma-159 = _func _abstract match Var(Var, Func)
lemma-159 = _func _abstract match Var(Func)
lemma-159 = _func _abstract match Var(Var)
lemma-159 = _func _abstract Var
lemma-159 = _func _abstract Func
lemma-159 = _func _abstract Func(Var, Func)
lemma-159 = _func _abstract Func(Func)
lemma-159 = _func _abstract Func(Var)
lemma-159 = _func _abstract Func(Var, Var)
lemma-159 = _func _length 13
lemma-159 = _func _lengthDistinct 13
lemma-159 = _func _distinctRatio 1.0
lemma-159 = _func _popular anyType
lemma-159 = _func recursive True
lemma-159 = _func _abstractLength 16
lemma-159 = _func _abstractLengthDistinct 10
lemma-159 = _func _nArgs 2
lemma-159 = _func match x
lemma-159 = _func match x(Z, S)
lemma-159 = _func match x(S)
lemma-159 = _func match x(Z)
lemma-159 = _func Z
lemma-159 = _func S
lemma-159 = _func S(length)
lemma-159 = _func length
lemma-159 = _func length(list)
lemma-159 = _func list
lemma-159 = _func _abstract match Var
lemma-159 = _func _abstract match Var(Func, Func)
lemma-159 = _func _abstract match Var(Func)
lemma-159 = _func _abstract Func
lemma-159 = _func _abstract Func(Func)
lemma-159 = _func _abstract Func(Var)
lemma-159 = _func _abstract Var
lemma-159 = _func _length 10
lemma-159 = _func _lengthDistinct 10
lemma-159 = _func _distinctRatio 1.0
lemma-159 = _func _popular S
lemma-159 = _func recursive True
lemma-159 = _func _abstractLength 10
lemma-159 = _func _abstractLengthDistinct 7
lemma-159 = _func _nArgs 1

lemma-163 = ==
lemma-163 = ==(length, Z)
lemma-163 = ==(Z)
lemma-163 = ==(length)
lemma-163 = length
lemma-163 = length(nil)
lemma-163 = nil
lemma-163 = Z
lemma-163 = _abstract Equals
lemma-163 = _abstract Equals(Func, Func)
lemma-163 = _abstract Equals(Func)
lemma-163 = _abstract Func
lemma-163 = _abstract Func(Func)
lemma-163 = _length 8
lemma-163 = _lengthDistinct 8
lemma-163 = _distinctRatio 1.0
lemma-163 = _popular ==
lemma-163 = _commutative False
lemma-163 = _associative False
lemma-163 = _distributive False
lemma-163 = _abstractLength 8
lemma-163 = _abstractLengthDistinct 5
lemma-163 = _innerFunctionApplication False
lemma-163 = _innerFunctionDepth 0
lemma-163 = _func match x
lemma-163 = _func match x(Z, S)
lemma-163 = _func match x(S)
lemma-163 = _func match x(Z)
lemma-163 = _func Z
lemma-163 = _func S
lemma-163 = _func S(length)
lemma-163 = _func length
lemma-163 = _func length(list)
lemma-163 = _func list
lemma-163 = _func _abstract match Var
lemma-163 = _func _abstract match Var(Func, Func)
lemma-163 = _func _abstract match Var(Func)
lemma-163 = _func _abstract Func
lemma-163 = _func _abstract Func(Func)
lemma-163 = _func _abstract Func(Var)
lemma-163 = _func _abstract Var
lemma-163 = _func _length 10
lemma-163 = _func _lengthDistinct 10
lemma-163 = _func _distinctRatio 1.0
lemma-163 = _func _popular S
lemma-163 = _func recursive True
lemma-163 = _func _abstractLength 10
lemma-163 = _func _abstractLengthDistinct 7
lemma-163 = _func _nArgs 1

lemma-164 = ==
lemma-164 = ==(length, S)
lemma-164 = ==(S)
lemma-164 = ==(length)
lemma-164 = length
lemma-164 = length(cons)
lemma-164 = cons
lemma-164 = cons(anyType, list)
lemma-164 = cons(list)
lemma-164 = cons(anyType)
lemma-164 = anyType
lemma-164 = list
lemma-164 = S
lemma-164 = S(length)
lemma-164 = length(list)
lemma-164 = _abstract Equals
lemma-164 = _abstract Equals(Func, Func)
lemma-164 = _abstract Equals(Func)
lemma-164 = _abstract Func
lemma-164 = _abstract Func(Func)
lemma-164 = _abstract Func(Var, Var)
lemma-164 = _abstract Func(Var)
lemma-164 = _abstract Var
lemma-164 = _length 17
lemma-164 = _lengthDistinct 15
lemma-164 = _distinctRatio 0.9
lemma-164 = _popular length
lemma-164 = _commutative False
lemma-164 = _associative False
lemma-164 = _distributive False
lemma-164 = _abstractLength 17
lemma-164 = _abstractLengthDistinct 8
lemma-164 = _innerFunctionApplication True
lemma-164 = _innerFunctionDepth 2
lemma-164 = _func match x
lemma-164 = _func match x(Z, S)
lemma-164 = _func match x(S)
lemma-164 = _func match x(Z)
lemma-164 = _func Z
lemma-164 = _func S
lemma-164 = _func S(length)
lemma-164 = _func length
lemma-164 = _func length(list)
lemma-164 = _func list
lemma-164 = _func _abstract match Var
lemma-164 = _func _abstract match Var(Func, Func)
lemma-164 = _func _abstract match Var(Func)
lemma-164 = _func _abstract Func
lemma-164 = _func _abstract Func(Func)
lemma-164 = _func _abstract Func(Var)
lemma-164 = _func _abstract Var
lemma-164 = _func _length 10
lemma-164 = _func _lengthDistinct 10
lemma-164 = _func _distinctRatio 1.0
lemma-164 = _func _popular S
lemma-164 = _func recursive True
lemma-164 = _func _abstractLength 10
lemma-164 = _func _abstractLengthDistinct 7
lemma-164 = _func _nArgs 1

lemma-168 = ==
lemma-168 = ==(rev, nil)
lemma-168 = ==(nil)
lemma-168 = ==(rev)
lemma-168 = rev
lemma-168 = rev(nil)
lemma-168 = nil
lemma-168 = _abstract Equals
lemma-168 = _abstract Equals(Func, Func)
lemma-168 = _abstract Equals(Func)
lemma-168 = _abstract Func
lemma-168 = _abstract Func(Func)
lemma-168 = _length 8
lemma-168 = _lengthDistinct 7
lemma-168 = _distinctRatio 0.9
lemma-168 = _popular nil
lemma-168 = _commutative False
lemma-168 = _associative False
lemma-168 = _distributive False
lemma-168 = _abstractLength 8
lemma-168 = _abstractLengthDistinct 5
lemma-168 = _innerFunctionApplication False
lemma-168 = _innerFunctionDepth 0
lemma-168 = _func match x
lemma-168 = _func match x(nil, append)
lemma-168 = _func match x(append)
lemma-168 = _func match x(nil)
lemma-168 = _func nil
lemma-168 = _func append
lemma-168 = _func append(rev, cons)
lemma-168 = _func append(cons)
lemma-168 = _func append(rev)
lemma-168 = _func rev
lemma-168 = _func rev(list)
lemma-168 = _func list
lemma-168 = _func cons
lemma-168 = _func cons(anyType, nil)
lemma-168 = _func cons(nil)
lemma-168 = _func cons(anyType)
lemma-168 = _func anyType
lemma-168 = _func _abstract match Var
lemma-168 = _func _abstract match Var(Func, Func)
lemma-168 = _func _abstract match Var(Func)
lemma-168 = _func _abstract Func
lemma-168 = _func _abstract Func(Func, Func)
lemma-168 = _func _abstract Func(Func)
lemma-168 = _func _abstract Func(Var)
lemma-168 = _func _abstract Var
lemma-168 = _func _abstract Func(Var, Func)
lemma-168 = _func _length 17
lemma-168 = _func _lengthDistinct 17
lemma-168 = _func _distinctRatio 1.0
lemma-168 = _func _popular anyType
lemma-168 = _func recursive True
lemma-168 = _func _abstractLength 18
lemma-168 = _func _abstractLengthDistinct 9
lemma-168 = _func _nArgs 1

lemma-169 = ==
lemma-169 = ==(rev, cons)
lemma-169 = ==(cons)
lemma-169 = ==(rev)
lemma-169 = rev
lemma-169 = rev(cons)
lemma-169 = cons
lemma-169 = cons(anyType, nil)
lemma-169 = cons(nil)
lemma-169 = cons(anyType)
lemma-169 = anyType
lemma-169 = nil
lemma-169 = _abstract Equals
lemma-169 = _abstract Equals(Func, Func)
lemma-169 = _abstract Equals(Func)
lemma-169 = _abstract Func
lemma-169 = _abstract Func(Func)
lemma-169 = _abstract Func(Var, Func)
lemma-169 = _abstract Func(Var)
lemma-169 = _abstract Var
lemma-169 = _length 18
lemma-169 = _lengthDistinct 12
lemma-169 = _distinctRatio 0.7
lemma-169 = _popular anyType
lemma-169 = _commutative False
lemma-169 = _associative False
lemma-169 = _distributive False
lemma-169 = _abstractLength 18
lemma-169 = _abstractLengthDistinct 8
lemma-169 = _innerFunctionApplication True
lemma-169 = _innerFunctionDepth 3
lemma-169 = _func match x
lemma-169 = _func match x(nil, append)
lemma-169 = _func match x(append)
lemma-169 = _func match x(nil)
lemma-169 = _func nil
lemma-169 = _func append
lemma-169 = _func append(rev, cons)
lemma-169 = _func append(cons)
lemma-169 = _func append(rev)
lemma-169 = _func rev
lemma-169 = _func rev(list)
lemma-169 = _func list
lemma-169 = _func cons
lemma-169 = _func cons(anyType, nil)
lemma-169 = _func cons(nil)
lemma-169 = _func cons(anyType)
lemma-169 = _func anyType
lemma-169 = _func _abstract match Var
lemma-169 = _func _abstract match Var(Func, Func)
lemma-169 = _func _abstract match Var(Func)
lemma-169 = _func _abstract Func
lemma-169 = _func _abstract Func(Func, Func)
lemma-169 = _func _abstract Func(Func)
lemma-169 = _func _abstract Func(Var)
lemma-169 = _func _abstract Var
lemma-169 = _func _abstract Func(Var, Func)
lemma-169 = _func _length 17
lemma-169 = _func _lengthDistinct 17
lemma-169 = _func _distinctRatio 1.0
lemma-169 = _func _popular anyType
lemma-169 = _func recursive True
lemma-169 = _func _abstractLength 18
lemma-169 = _func _abstractLengthDistinct 9
lemma-169 = _func _nArgs 1

lemma-170 = ==
lemma-170 = ==(append, rev)
lemma-170 = ==(rev)
lemma-170 = ==(append)
lemma-170 = append
lemma-170 = append(rev, rev)
lemma-170 = append(rev)
lemma-170 = rev
lemma-170 = rev(list)
lemma-170 = list
lemma-170 = rev(append)
lemma-170 = append(list, list)
lemma-170 = append(list)
lemma-170 = _abstract Equals
lemma-170 = _abstract Equals(Func, Func)
lemma-170 = _abstract Equals(Func)
lemma-170 = _abstract Func
lemma-170 = _abstract Func(Func, Func)
lemma-170 = _abstract Func(Func)
lemma-170 = _abstract Func(Var)
lemma-170 = _abstract Var
lemma-170 = _abstract Func(Var, Var)
lemma-170 = _length 22
lemma-170 = _lengthDistinct 13
lemma-170 = _distinctRatio 0.6
lemma-170 = _popular list
lemma-170 = _commutative False
lemma-170 = _associative False
lemma-170 = _distributive False
lemma-170 = _abstractLength 22
lemma-170 = _abstractLengthDistinct 9
lemma-170 = _innerFunctionApplication True
lemma-170 = _innerFunctionDepth 2
lemma-170 = _func match x
lemma-170 = _func match x(list, cons)
lemma-170 = _func match x(cons)
lemma-170 = _func match x(list)
lemma-170 = _func list
lemma-170 = _func cons
lemma-170 = _func cons(anyType, append)
lemma-170 = _func cons(append)
lemma-170 = _func cons(anyType)
lemma-170 = _func anyType
lemma-170 = _func append
lemma-170 = _func append(list, list)
lemma-170 = _func append(list)
lemma-170 = _func _abstract match Var
lemma-170 = _func _abstract match Var(Var, Func)
lemma-170 = _func _abstract match Var(Func)
lemma-170 = _func _abstract match Var(Var)
lemma-170 = _func _abstract Var
lemma-170 = _func _abstract Func
lemma-170 = _func _abstract Func(Var, Func)
lemma-170 = _func _abstract Func(Func)
lemma-170 = _func _abstract Func(Var)
lemma-170 = _func _abstract Func(Var, Var)
lemma-170 = _func _length 13
lemma-170 = _func _lengthDistinct 13
lemma-170 = _func _distinctRatio 1.0
lemma-170 = _func _popular anyType
lemma-170 = _func recursive True
lemma-170 = _func _abstractLength 16
lemma-170 = _func _abstractLengthDistinct 10
lemma-170 = _func _nArgs 2
lemma-170 = _func match x
lemma-170 = _func match x(nil, append)
lemma-170 = _func match x(append)
lemma-170 = _func match x(nil)
lemma-170 = _func nil
lemma-170 = _func append
lemma-170 = _func append(rev, cons)
lemma-170 = _func append(cons)
lemma-170 = _func append(rev)
lemma-170 = _func rev
lemma-170 = _func rev(list)
lemma-170 = _func list
lemma-170 = _func cons
lemma-170 = _func cons(anyType, nil)
lemma-170 = _func cons(nil)
lemma-170 = _func cons(anyType)
lemma-170 = _func anyType
lemma-170 = _func _abstract match Var
lemma-170 = _func _abstract match Var(Func, Func)
lemma-170 = _func _abstract match Var(Func)
lemma-170 = _func _abstract Func
lemma-170 = _func _abstract Func(Func, Func)
lemma-170 = _func _abstract Func(Func)
lemma-170 = _func _abstract Func(Var)
lemma-170 = _func _abstract Var
lemma-170 = _func _abstract Func(Var, Func)
lemma-170 = _func _length 17
lemma-170 = _func _lengthDistinct 17
lemma-170 = _func _distinctRatio 1.0
lemma-170 = _func _popular anyType
lemma-170 = _func recursive True
lemma-170 = _func _abstractLength 18
lemma-170 = _func _abstractLengthDistinct 9
lemma-170 = _func _nArgs 1

lemma-173 = ==
lemma-173 = ==(rev, list)
lemma-173 = ==(list)
lemma-173 = ==(rev)
lemma-173 = rev
lemma-173 = rev(rev)
lemma-173 = rev(list)
lemma-173 = list
lemma-173 = _abstract Equals
lemma-173 = _abstract Equals(Func, Var)
lemma-173 = _abstract Equals(Var)
lemma-173 = _abstract Equals(Func)
lemma-173 = _abstract Func
lemma-173 = _abstract Func(Func)
lemma-173 = _abstract Func(Var)
lemma-173 = _abstract Var
lemma-173 = _length 10
lemma-173 = _lengthDistinct 8
lemma-173 = _distinctRatio 0.8
lemma-173 = _popular list
lemma-173 = _commutative False
lemma-173 = _associative False
lemma-173 = _distributive False
lemma-173 = _abstractLength 10
lemma-173 = _abstractLengthDistinct 8
lemma-173 = _innerFunctionApplication True
lemma-173 = _innerFunctionDepth 2
lemma-173 = _func match x
lemma-173 = _func match x(nil, append)
lemma-173 = _func match x(append)
lemma-173 = _func match x(nil)
lemma-173 = _func nil
lemma-173 = _func append
lemma-173 = _func append(rev, cons)
lemma-173 = _func append(cons)
lemma-173 = _func append(rev)
lemma-173 = _func rev
lemma-173 = _func rev(list)
lemma-173 = _func list
lemma-173 = _func cons
lemma-173 = _func cons(anyType, nil)
lemma-173 = _func cons(nil)
lemma-173 = _func cons(anyType)
lemma-173 = _func anyType
lemma-173 = _func _abstract match Var
lemma-173 = _func _abstract match Var(Func, Func)
lemma-173 = _func _abstract match Var(Func)
lemma-173 = _func _abstract Func
lemma-173 = _func _abstract Func(Func, Func)
lemma-173 = _func _abstract Func(Func)
lemma-173 = _func _abstract Func(Var)
lemma-173 = _func _abstract Var
lemma-173 = _func _abstract Func(Var, Func)
lemma-173 = _func _length 17
lemma-173 = _func _lengthDistinct 17
lemma-173 = _func _distinctRatio 1.0
lemma-173 = _func _popular anyType
lemma-173 = _func recursive True
lemma-173 = _func _abstractLength 18
lemma-173 = _func _abstractLengthDistinct 9
lemma-173 = _func _nArgs 1

lemma-174 = ==
lemma-174 = ==(length, length)
lemma-174 = ==(length)
lemma-174 = length
lemma-174 = length(rev)
lemma-174 = rev
lemma-174 = rev(list)
lemma-174 = list
lemma-174 = length(list)
lemma-174 = _abstract Equals
lemma-174 = _abstract Equals(Func, Func)
lemma-174 = _abstract Equals(Func)
lemma-174 = _abstract Func
lemma-174 = _abstract Func(Func)
lemma-174 = _abstract Func(Var)
lemma-174 = _abstract Var
lemma-174 = _length 12
lemma-174 = _lengthDistinct 9
lemma-174 = _distinctRatio 0.8
lemma-174 = _popular ==(length)
lemma-174 = _commutative False
lemma-174 = _associative False
lemma-174 = _distributive False
lemma-174 = _abstractLength 12
lemma-174 = _abstractLengthDistinct 7
lemma-174 = _innerFunctionApplication True
lemma-174 = _innerFunctionDepth 2
lemma-174 = _func match x
lemma-174 = _func match x(Z, S)
lemma-174 = _func match x(S)
lemma-174 = _func match x(Z)
lemma-174 = _func Z
lemma-174 = _func S
lemma-174 = _func S(length)
lemma-174 = _func length
lemma-174 = _func length(list)
lemma-174 = _func list
lemma-174 = _func _abstract match Var
lemma-174 = _func _abstract match Var(Func, Func)
lemma-174 = _func _abstract match Var(Func)
lemma-174 = _func _abstract Func
lemma-174 = _func _abstract Func(Func)
lemma-174 = _func _abstract Func(Var)
lemma-174 = _func _abstract Var
lemma-174 = _func _length 10
lemma-174 = _func _lengthDistinct 10
lemma-174 = _func _distinctRatio 1.0
lemma-174 = _func _popular S
lemma-174 = _func recursive True
lemma-174 = _func _abstractLength 10
lemma-174 = _func _abstractLengthDistinct 7
lemma-174 = _func _nArgs 1
lemma-174 = _func match x
lemma-174 = _func match x(nil, append)
lemma-174 = _func match x(append)
lemma-174 = _func match x(nil)
lemma-174 = _func nil
lemma-174 = _func append
lemma-174 = _func append(rev, cons)
lemma-174 = _func append(cons)
lemma-174 = _func append(rev)
lemma-174 = _func rev
lemma-174 = _func rev(list)
lemma-174 = _func list
lemma-174 = _func cons
lemma-174 = _func cons(anyType, nil)
lemma-174 = _func cons(nil)
lemma-174 = _func cons(anyType)
lemma-174 = _func anyType
lemma-174 = _func _abstract match Var
lemma-174 = _func _abstract match Var(Func, Func)
lemma-174 = _func _abstract match Var(Func)
lemma-174 = _func _abstract Func
lemma-174 = _func _abstract Func(Func, Func)
lemma-174 = _func _abstract Func(Func)
lemma-174 = _func _abstract Func(Var)
lemma-174 = _func _abstract Var
lemma-174 = _func _abstract Func(Var, Func)
lemma-174 = _func _length 17
lemma-174 = _func _lengthDistinct 17
lemma-174 = _func _distinctRatio 1.0
lemma-174 = _func _popular anyType
lemma-174 = _func recursive True
lemma-174 = _func _abstractLength 18
lemma-174 = _func _abstractLengthDistinct 9
lemma-174 = _func _nArgs 1

lemma-176 = ==
lemma-176 = ==(length, plus)
lemma-176 = ==(plus)
lemma-176 = ==(length)
lemma-176 = length
lemma-176 = length(rev)
lemma-176 = rev
lemma-176 = rev(append)
lemma-176 = append
lemma-176 = append(list, list)
lemma-176 = append(list)
lemma-176 = list
lemma-176 = plus
lemma-176 = plus(length, length)
lemma-176 = plus(length)
lemma-176 = length(list)
lemma-176 = _abstract Equals
lemma-176 = _abstract Equals(Func, Func)
lemma-176 = _abstract Equals(Func)
lemma-176 = _abstract Func
lemma-176 = _abstract Func(Func)
lemma-176 = _abstract Func(Var, Var)
lemma-176 = _abstract Func(Var)
lemma-176 = _abstract Var
lemma-176 = _abstract Func(Func, Func)
lemma-176 = _length 24
lemma-176 = _lengthDistinct 16
lemma-176 = _distinctRatio 0.7
lemma-176 = _popular list
lemma-176 = _commutative False
lemma-176 = _associative False
lemma-176 = _distributive False
lemma-176 = _abstractLength 24
lemma-176 = _abstractLengthDistinct 9
lemma-176 = _innerFunctionApplication True
lemma-176 = _innerFunctionDepth 3
lemma-176 = _func match x
lemma-176 = _func match x(list, cons)
lemma-176 = _func match x(cons)
lemma-176 = _func match x(list)
lemma-176 = _func list
lemma-176 = _func cons
lemma-176 = _func cons(anyType, append)
lemma-176 = _func cons(append)
lemma-176 = _func cons(anyType)
lemma-176 = _func anyType
lemma-176 = _func append
lemma-176 = _func append(list, list)
lemma-176 = _func append(list)
lemma-176 = _func _abstract match Var
lemma-176 = _func _abstract match Var(Var, Func)
lemma-176 = _func _abstract match Var(Func)
lemma-176 = _func _abstract match Var(Var)
lemma-176 = _func _abstract Var
lemma-176 = _func _abstract Func
lemma-176 = _func _abstract Func(Var, Func)
lemma-176 = _func _abstract Func(Func)
lemma-176 = _func _abstract Func(Var)
lemma-176 = _func _abstract Func(Var, Var)
lemma-176 = _func _length 13
lemma-176 = _func _lengthDistinct 13
lemma-176 = _func _distinctRatio 1.0
lemma-176 = _func _popular anyType
lemma-176 = _func recursive True
lemma-176 = _func _abstractLength 16
lemma-176 = _func _abstractLengthDistinct 10
lemma-176 = _func _nArgs 2
lemma-176 = _func match x
lemma-176 = _func match x(Z, S)
lemma-176 = _func match x(S)
lemma-176 = _func match x(Z)
lemma-176 = _func Z
lemma-176 = _func S
lemma-176 = _func S(length)
lemma-176 = _func length
lemma-176 = _func length(list)
lemma-176 = _func list
lemma-176 = _func _abstract match Var
lemma-176 = _func _abstract match Var(Func, Func)
lemma-176 = _func _abstract match Var(Func)
lemma-176 = _func _abstract Func
lemma-176 = _func _abstract Func(Func)
lemma-176 = _func _abstract Func(Var)
lemma-176 = _func _abstract Var
lemma-176 = _func _length 10
lemma-176 = _func _lengthDistinct 10
lemma-176 = _func _distinctRatio 1.0
lemma-176 = _func _popular S
lemma-176 = _func recursive True
lemma-176 = _func _abstractLength 10
lemma-176 = _func _abstractLengthDistinct 7
lemma-176 = _func _nArgs 1
lemma-176 = _func match x
lemma-176 = _func match x(Nat, S)
lemma-176 = _func match x(S)
lemma-176 = _func match x(Nat)
lemma-176 = _func Nat
lemma-176 = _func S
lemma-176 = _func S(plus)
lemma-176 = _func plus
lemma-176 = _func plus(Nat, Nat)
lemma-176 = _func plus(Nat)
lemma-176 = _func _abstract match Var
lemma-176 = _func _abstract match Var(Var, Func)
lemma-176 = _func _abstract match Var(Func)
lemma-176 = _func _abstract match Var(Var)
lemma-176 = _func _abstract Var
lemma-176 = _func _abstract Func
lemma-176 = _func _abstract Func(Func)
lemma-176 = _func _abstract Func(Var, Var)
lemma-176 = _func _abstract Func(Var)
lemma-176 = _func _length 10
lemma-176 = _func _lengthDistinct 10
lemma-176 = _func _distinctRatio 1.0
lemma-176 = _func _popular Nat
lemma-176 = _func recursive True
lemma-176 = _func _abstractLength 13
lemma-176 = _func _abstractLengthDistinct 9
lemma-176 = _func _nArgs 2
lemma-176 = _func match x
lemma-176 = _func match x(nil, append)
lemma-176 = _func match x(append)
lemma-176 = _func match x(nil)
lemma-176 = _func nil
lemma-176 = _func append
lemma-176 = _func append(rev, cons)
lemma-176 = _func append(cons)
lemma-176 = _func append(rev)
lemma-176 = _func rev
lemma-176 = _func rev(list)
lemma-176 = _func list
lemma-176 = _func cons
lemma-176 = _func cons(anyType, nil)
lemma-176 = _func cons(nil)
lemma-176 = _func cons(anyType)
lemma-176 = _func anyType
lemma-176 = _func _abstract match Var
lemma-176 = _func _abstract match Var(Func, Func)
lemma-176 = _func _abstract match Var(Func)
lemma-176 = _func _abstract Func
lemma-176 = _func _abstract Func(Func, Func)
lemma-176 = _func _abstract Func(Func)
lemma-176 = _func _abstract Func(Var)
lemma-176 = _func _abstract Var
lemma-176 = _func _abstract Func(Var, Func)
lemma-176 = _func _length 17
lemma-176 = _func _lengthDistinct 17
lemma-176 = _func _distinctRatio 1.0
lemma-176 = _func _popular anyType
lemma-176 = _func recursive True
lemma-176 = _func _abstractLength 18
lemma-176 = _func _abstractLengthDistinct 9
lemma-176 = _func _nArgs 1

lemma-177 = ==
lemma-177 = ==(qrev, list)
lemma-177 = ==(list)
lemma-177 = ==(qrev)
lemma-177 = qrev
lemma-177 = qrev(nil, list)
lemma-177 = qrev(list)
lemma-177 = qrev(nil)
lemma-177 = nil
lemma-177 = list
lemma-177 = _abstract Equals
lemma-177 = _abstract Equals(Func, Var)
lemma-177 = _abstract Equals(Var)
lemma-177 = _abstract Equals(Func)
lemma-177 = _abstract Func
lemma-177 = _abstract Func(Func, Var)
lemma-177 = _abstract Func(Var)
lemma-177 = _abstract Func(Func)
lemma-177 = _abstract Var
lemma-177 = _length 11
lemma-177 = _lengthDistinct 10
lemma-177 = _distinctRatio 0.9
lemma-177 = _popular list
lemma-177 = _commutative False
lemma-177 = _associative False
lemma-177 = _distributive False
lemma-177 = _abstractLength 11
lemma-177 = _abstractLengthDistinct 9
lemma-177 = _innerFunctionApplication True
lemma-177 = _innerFunctionDepth 2
lemma-177 = _func match x
lemma-177 = _func match x(list, qrev)
lemma-177 = _func match x(qrev)
lemma-177 = _func match x(list)
lemma-177 = _func list
lemma-177 = _func qrev
lemma-177 = _func qrev(list, cons)
lemma-177 = _func qrev(cons)
lemma-177 = _func qrev(list)
lemma-177 = _func cons
lemma-177 = _func cons(anyType, list)
lemma-177 = _func cons(list)
lemma-177 = _func cons(anyType)
lemma-177 = _func anyType
lemma-177 = _func _abstract match Var
lemma-177 = _func _abstract match Var(Var, Func)
lemma-177 = _func _abstract match Var(Func)
lemma-177 = _func _abstract match Var(Var)
lemma-177 = _func _abstract Var
lemma-177 = _func _abstract Func
lemma-177 = _func _abstract Func(Var, Func)
lemma-177 = _func _abstract Func(Func)
lemma-177 = _func _abstract Func(Var)
lemma-177 = _func _abstract Func(Var, Var)
lemma-177 = _func _length 14
lemma-177 = _func _lengthDistinct 14
lemma-177 = _func _distinctRatio 1.0
lemma-177 = _func _popular anyType
lemma-177 = _func recursive True
lemma-177 = _func _abstractLength 16
lemma-177 = _func _abstractLengthDistinct 10
lemma-177 = _func _nArgs 2

lemma-178 = ==
lemma-178 = ==(qrev, qrev)
lemma-178 = ==(qrev)
lemma-178 = qrev
lemma-178 = qrev(cons, list)
lemma-178 = qrev(list)
lemma-178 = qrev(cons)
lemma-178 = cons
lemma-178 = cons(anyType, list)
lemma-178 = cons(list)
lemma-178 = cons(anyType)
lemma-178 = anyType
lemma-178 = list
lemma-178 = qrev(list, cons)
lemma-178 = _abstract Equals
lemma-178 = _abstract Equals(Func, Func)
lemma-178 = _abstract Equals(Func)
lemma-178 = _abstract Func
lemma-178 = _abstract Func(Func, Var)
lemma-178 = _abstract Func(Var)
lemma-178 = _abstract Func(Func)
lemma-178 = _abstract Func(Var, Var)
lemma-178 = _abstract Var
lemma-178 = _abstract Func(Var, Func)
lemma-178 = _length 26
lemma-178 = _lengthDistinct 14
lemma-178 = _distinctRatio 0.5
lemma-178 = _popular list
lemma-178 = _commutative False
lemma-178 = _associative False
lemma-178 = _distributive False
lemma-178 = _abstractLength 26
lemma-178 = _abstractLengthDistinct 10
lemma-178 = _innerFunctionApplication True
lemma-178 = _innerFunctionDepth 2
lemma-178 = _func match x
lemma-178 = _func match x(list, qrev)
lemma-178 = _func match x(qrev)
lemma-178 = _func match x(list)
lemma-178 = _func list
lemma-178 = _func qrev
lemma-178 = _func qrev(list, cons)
lemma-178 = _func qrev(cons)
lemma-178 = _func qrev(list)
lemma-178 = _func cons
lemma-178 = _func cons(anyType, list)
lemma-178 = _func cons(list)
lemma-178 = _func cons(anyType)
lemma-178 = _func anyType
lemma-178 = _func _abstract match Var
lemma-178 = _func _abstract match Var(Var, Func)
lemma-178 = _func _abstract match Var(Func)
lemma-178 = _func _abstract match Var(Var)
lemma-178 = _func _abstract Var
lemma-178 = _func _abstract Func
lemma-178 = _func _abstract Func(Var, Func)
lemma-178 = _func _abstract Func(Func)
lemma-178 = _func _abstract Func(Var)
lemma-178 = _func _abstract Func(Var, Var)
lemma-178 = _func _length 14
lemma-178 = _func _lengthDistinct 14
lemma-178 = _func _distinctRatio 1.0
lemma-178 = _func _popular anyType
lemma-178 = _func recursive True
lemma-178 = _func _abstractLength 16
lemma-178 = _func _abstractLengthDistinct 10
lemma-178 = _func _nArgs 2

lemma-179 = ==
lemma-179 = ==(plus, length)
lemma-179 = ==(length)
lemma-179 = ==(plus)
lemma-179 = plus
lemma-179 = plus(length, length)
lemma-179 = plus(length)
lemma-179 = length
lemma-179 = length(list)
lemma-179 = list
lemma-179 = length(qrev)
lemma-179 = qrev
lemma-179 = qrev(list, list)
lemma-179 = qrev(list)
lemma-179 = _abstract Equals
lemma-179 = _abstract Equals(Func, Func)
lemma-179 = _abstract Equals(Func)
lemma-179 = _abstract Func
lemma-179 = _abstract Func(Func, Func)
lemma-179 = _abstract Func(Func)
lemma-179 = _abstract Func(Var)
lemma-179 = _abstract Var
lemma-179 = _abstract Func(Var, Var)
lemma-179 = _length 22
lemma-179 = _lengthDistinct 14
lemma-179 = _distinctRatio 0.6
lemma-179 = _popular list
lemma-179 = _commutative False
lemma-179 = _associative False
lemma-179 = _distributive False
lemma-179 = _abstractLength 22
lemma-179 = _abstractLengthDistinct 9
lemma-179 = _innerFunctionApplication True
lemma-179 = _innerFunctionDepth 2
lemma-179 = _func match x
lemma-179 = _func match x(Z, S)
lemma-179 = _func match x(S)
lemma-179 = _func match x(Z)
lemma-179 = _func Z
lemma-179 = _func S
lemma-179 = _func S(length)
lemma-179 = _func length
lemma-179 = _func length(list)
lemma-179 = _func list
lemma-179 = _func _abstract match Var
lemma-179 = _func _abstract match Var(Func, Func)
lemma-179 = _func _abstract match Var(Func)
lemma-179 = _func _abstract Func
lemma-179 = _func _abstract Func(Func)
lemma-179 = _func _abstract Func(Var)
lemma-179 = _func _abstract Var
lemma-179 = _func _length 10
lemma-179 = _func _lengthDistinct 10
lemma-179 = _func _distinctRatio 1.0
lemma-179 = _func _popular S
lemma-179 = _func recursive True
lemma-179 = _func _abstractLength 10
lemma-179 = _func _abstractLengthDistinct 7
lemma-179 = _func _nArgs 1
lemma-179 = _func match x
lemma-179 = _func match x(Nat, S)
lemma-179 = _func match x(S)
lemma-179 = _func match x(Nat)
lemma-179 = _func Nat
lemma-179 = _func S
lemma-179 = _func S(plus)
lemma-179 = _func plus
lemma-179 = _func plus(Nat, Nat)
lemma-179 = _func plus(Nat)
lemma-179 = _func _abstract match Var
lemma-179 = _func _abstract match Var(Var, Func)
lemma-179 = _func _abstract match Var(Func)
lemma-179 = _func _abstract match Var(Var)
lemma-179 = _func _abstract Var
lemma-179 = _func _abstract Func
lemma-179 = _func _abstract Func(Func)
lemma-179 = _func _abstract Func(Var, Var)
lemma-179 = _func _abstract Func(Var)
lemma-179 = _func _length 10
lemma-179 = _func _lengthDistinct 10
lemma-179 = _func _distinctRatio 1.0
lemma-179 = _func _popular Nat
lemma-179 = _func recursive True
lemma-179 = _func _abstractLength 13
lemma-179 = _func _abstractLengthDistinct 9
lemma-179 = _func _nArgs 2
lemma-179 = _func match x
lemma-179 = _func match x(list, qrev)
lemma-179 = _func match x(qrev)
lemma-179 = _func match x(list)
lemma-179 = _func list
lemma-179 = _func qrev
lemma-179 = _func qrev(list, cons)
lemma-179 = _func qrev(cons)
lemma-179 = _func qrev(list)
lemma-179 = _func cons
lemma-179 = _func cons(anyType, list)
lemma-179 = _func cons(list)
lemma-179 = _func cons(anyType)
lemma-179 = _func anyType
lemma-179 = _func _abstract match Var
lemma-179 = _func _abstract match Var(Var, Func)
lemma-179 = _func _abstract match Var(Func)
lemma-179 = _func _abstract match Var(Var)
lemma-179 = _func _abstract Var
lemma-179 = _func _abstract Func
lemma-179 = _func _abstract Func(Var, Func)
lemma-179 = _func _abstract Func(Func)
lemma-179 = _func _abstract Func(Var)
lemma-179 = _func _abstract Func(Var, Var)
lemma-179 = _func _length 14
lemma-179 = _func _lengthDistinct 14
lemma-179 = _func _distinctRatio 1.0
lemma-179 = _func _popular anyType
lemma-179 = _func recursive True
lemma-179 = _func _abstractLength 16
lemma-179 = _func _abstractLengthDistinct 10
lemma-179 = _func _nArgs 2

lemma-18 = ==
lemma-18 = ==(append, list)
lemma-18 = ==(list)
lemma-18 = ==(append)
lemma-18 = append
lemma-18 = append(take, drop)
lemma-18 = append(drop)
lemma-18 = append(take)
lemma-18 = take
lemma-18 = take(Nat, list)
lemma-18 = take(list)
lemma-18 = take(Nat)
lemma-18 = Nat
lemma-18 = list
lemma-18 = drop
lemma-18 = drop(Nat, list)
lemma-18 = drop(list)
lemma-18 = drop(Nat)
lemma-18 = _abstract Equals
lemma-18 = _abstract Equals(Func, Var)
lemma-18 = _abstract Equals(Var)
lemma-18 = _abstract Equals(Func)
lemma-18 = _abstract Func
lemma-18 = _abstract Func(Func, Func)
lemma-18 = _abstract Func(Func)
lemma-18 = _abstract Func(Var, Var)
lemma-18 = _abstract Func(Var)
lemma-18 = _abstract Var
lemma-18 = _length 21
lemma-18 = _lengthDistinct 18
lemma-18 = _distinctRatio 0.9
lemma-18 = _popular list
lemma-18 = _commutative False
lemma-18 = _associative False
lemma-18 = _distributive False
lemma-18 = _abstractLength 21
lemma-18 = _abstractLengthDistinct 10
lemma-18 = _innerFunctionApplication True
lemma-18 = _innerFunctionDepth 2
lemma-18 = _func match x
lemma-18 = _func match x(list, cons)
lemma-18 = _func match x(cons)
lemma-18 = _func match x(list)
lemma-18 = _func list
lemma-18 = _func cons
lemma-18 = _func cons(anyType, append)
lemma-18 = _func cons(append)
lemma-18 = _func cons(anyType)
lemma-18 = _func anyType
lemma-18 = _func append
lemma-18 = _func append(list, list)
lemma-18 = _func append(list)
lemma-18 = _func _abstract match Var
lemma-18 = _func _abstract match Var(Var, Func)
lemma-18 = _func _abstract match Var(Func)
lemma-18 = _func _abstract match Var(Var)
lemma-18 = _func _abstract Var
lemma-18 = _func _abstract Func
lemma-18 = _func _abstract Func(Var, Func)
lemma-18 = _func _abstract Func(Func)
lemma-18 = _func _abstract Func(Var)
lemma-18 = _func _abstract Func(Var, Var)
lemma-18 = _func _length 13
lemma-18 = _func _lengthDistinct 13
lemma-18 = _func _distinctRatio 1.0
lemma-18 = _func _popular anyType
lemma-18 = _func recursive True
lemma-18 = _func _abstractLength 16
lemma-18 = _func _abstractLengthDistinct 10
lemma-18 = _func _nArgs 2
lemma-18 = _func match x
lemma-18 = _func match x(list, match y)
lemma-18 = _func match x(match y)
lemma-18 = _func match x(list)
lemma-18 = _func list
lemma-18 = _func match y
lemma-18 = _func match y(nil, drop)
lemma-18 = _func match y(drop)
lemma-18 = _func match y(nil)
lemma-18 = _func nil
lemma-18 = _func drop
lemma-18 = _func drop(Nat, list)
lemma-18 = _func drop(list)
lemma-18 = _func drop(Nat)
lemma-18 = _func Nat
lemma-18 = _func _abstract match Var
lemma-18 = _func _abstract match Var(Var, match Var)
lemma-18 = _func _abstract match Var(match Var)
lemma-18 = _func _abstract match Var(Var)
lemma-18 = _func _abstract Var
lemma-18 = _func _abstract match Var(Func, Func)
lemma-18 = _func _abstract match Var(Func)
lemma-18 = _func _abstract Func
lemma-18 = _func _abstract Func(Var, Var)
lemma-18 = _func _abstract Func(Var)
lemma-18 = _func _length 15
lemma-18 = _func _lengthDistinct 15
lemma-18 = _func _distinctRatio 1.0
lemma-18 = _func _popular Nat
lemma-18 = _func recursive True
lemma-18 = _func _abstractLength 16
lemma-18 = _func _abstractLengthDistinct 10
lemma-18 = _func _nArgs 2
lemma-18 = _func match x
lemma-18 = _func match x(nil, match y)
lemma-18 = _func match x(match y)
lemma-18 = _func match x(nil)
lemma-18 = _func nil
lemma-18 = _func match y
lemma-18 = _func match y(nil, cons)
lemma-18 = _func match y(cons)
lemma-18 = _func match y(nil)
lemma-18 = _func cons
lemma-18 = _func cons(anyType, take)
lemma-18 = _func cons(take)
lemma-18 = _func cons(anyType)
lemma-18 = _func anyType
lemma-18 = _func take
lemma-18 = _func take(Nat, list)
lemma-18 = _func take(list)
lemma-18 = _func take(Nat)
lemma-18 = _func Nat
lemma-18 = _func list
lemma-18 = _func _abstract match Var
lemma-18 = _func _abstract match Var(Func, match Var)
lemma-18 = _func _abstract match Var(match Var)
lemma-18 = _func _abstract match Var(Func)
lemma-18 = _func _abstract Func
lemma-18 = _func _abstract match Var(Func, Func)
lemma-18 = _func _abstract Func(Var, Func)
lemma-18 = _func _abstract Func(Func)
lemma-18 = _func _abstract Func(Var)
lemma-18 = _func _abstract Var
lemma-18 = _func _abstract Func(Var, Var)
lemma-18 = _func _length 20
lemma-18 = _func _lengthDistinct 20
lemma-18 = _func _distinctRatio 1.0
lemma-18 = _func _popular Nat
lemma-18 = _func recursive True
lemma-18 = _func _abstractLength 21
lemma-18 = _func _abstractLengthDistinct 11
lemma-18 = _func _nArgs 2

lemma-180 = ==
lemma-180 = ==(length, plus)
lemma-180 = ==(plus)
lemma-180 = ==(length)
lemma-180 = length
lemma-180 = length(qrev)
lemma-180 = qrev
lemma-180 = qrev(list, list)
lemma-180 = qrev(list)
lemma-180 = list
lemma-180 = plus
lemma-180 = plus(length, length)
lemma-180 = plus(length)
lemma-180 = length(list)
lemma-180 = _abstract Equals
lemma-180 = _abstract Equals(Func, Func)
lemma-180 = _abstract Equals(Func)
lemma-180 = _abstract Func
lemma-180 = _abstract Func(Func)
lemma-180 = _abstract Func(Var, Var)
lemma-180 = _abstract Func(Var)
lemma-180 = _abstract Var
lemma-180 = _abstract Func(Func, Func)
lemma-180 = _length 22
lemma-180 = _lengthDistinct 14
lemma-180 = _distinctRatio 0.6
lemma-180 = _popular list
lemma-180 = _commutative False
lemma-180 = _associative False
lemma-180 = _distributive False
lemma-180 = _abstractLength 22
lemma-180 = _abstractLengthDistinct 9
lemma-180 = _innerFunctionApplication True
lemma-180 = _innerFunctionDepth 2
lemma-180 = _func match x
lemma-180 = _func match x(Z, S)
lemma-180 = _func match x(S)
lemma-180 = _func match x(Z)
lemma-180 = _func Z
lemma-180 = _func S
lemma-180 = _func S(length)
lemma-180 = _func length
lemma-180 = _func length(list)
lemma-180 = _func list
lemma-180 = _func _abstract match Var
lemma-180 = _func _abstract match Var(Func, Func)
lemma-180 = _func _abstract match Var(Func)
lemma-180 = _func _abstract Func
lemma-180 = _func _abstract Func(Func)
lemma-180 = _func _abstract Func(Var)
lemma-180 = _func _abstract Var
lemma-180 = _func _length 10
lemma-180 = _func _lengthDistinct 10
lemma-180 = _func _distinctRatio 1.0
lemma-180 = _func _popular S
lemma-180 = _func recursive True
lemma-180 = _func _abstractLength 10
lemma-180 = _func _abstractLengthDistinct 7
lemma-180 = _func _nArgs 1
lemma-180 = _func match x
lemma-180 = _func match x(Nat, S)
lemma-180 = _func match x(S)
lemma-180 = _func match x(Nat)
lemma-180 = _func Nat
lemma-180 = _func S
lemma-180 = _func S(plus)
lemma-180 = _func plus
lemma-180 = _func plus(Nat, Nat)
lemma-180 = _func plus(Nat)
lemma-180 = _func _abstract match Var
lemma-180 = _func _abstract match Var(Var, Func)
lemma-180 = _func _abstract match Var(Func)
lemma-180 = _func _abstract match Var(Var)
lemma-180 = _func _abstract Var
lemma-180 = _func _abstract Func
lemma-180 = _func _abstract Func(Func)
lemma-180 = _func _abstract Func(Var, Var)
lemma-180 = _func _abstract Func(Var)
lemma-180 = _func _length 10
lemma-180 = _func _lengthDistinct 10
lemma-180 = _func _distinctRatio 1.0
lemma-180 = _func _popular Nat
lemma-180 = _func recursive True
lemma-180 = _func _abstractLength 13
lemma-180 = _func _abstractLengthDistinct 9
lemma-180 = _func _nArgs 2
lemma-180 = _func match x
lemma-180 = _func match x(list, qrev)
lemma-180 = _func match x(qrev)
lemma-180 = _func match x(list)
lemma-180 = _func list
lemma-180 = _func qrev
lemma-180 = _func qrev(list, cons)
lemma-180 = _func qrev(cons)
lemma-180 = _func qrev(list)
lemma-180 = _func cons
lemma-180 = _func cons(anyType, list)
lemma-180 = _func cons(list)
lemma-180 = _func cons(anyType)
lemma-180 = _func anyType
lemma-180 = _func _abstract match Var
lemma-180 = _func _abstract match Var(Var, Func)
lemma-180 = _func _abstract match Var(Func)
lemma-180 = _func _abstract match Var(Var)
lemma-180 = _func _abstract Var
lemma-180 = _func _abstract Func
lemma-180 = _func _abstract Func(Var, Func)
lemma-180 = _func _abstract Func(Func)
lemma-180 = _func _abstract Func(Var)
lemma-180 = _func _abstract Func(Var, Var)
lemma-180 = _func _length 14
lemma-180 = _func _lengthDistinct 14
lemma-180 = _func _distinctRatio 1.0
lemma-180 = _func _popular anyType
lemma-180 = _func recursive True
lemma-180 = _func _abstractLength 16
lemma-180 = _func _abstractLengthDistinct 10
lemma-180 = _func _nArgs 2

lemma-182 = ==
lemma-182 = ==(length, length)
lemma-182 = ==(length)
lemma-182 = length
lemma-182 = length(qrev)
lemma-182 = qrev
lemma-182 = qrev(list, nil)
lemma-182 = qrev(nil)
lemma-182 = qrev(list)
lemma-182 = list
lemma-182 = nil
lemma-182 = length(list)
lemma-182 = _abstract Equals
lemma-182 = _abstract Equals(Func, Func)
lemma-182 = _abstract Equals(Func)
lemma-182 = _abstract Func
lemma-182 = _abstract Func(Func)
lemma-182 = _abstract Func(Var, Func)
lemma-182 = _abstract Func(Var)
lemma-182 = _abstract Var
lemma-182 = _length 15
lemma-182 = _lengthDistinct 12
lemma-182 = _distinctRatio 0.8
lemma-182 = _popular ==(length)
lemma-182 = _commutative False
lemma-182 = _associative False
lemma-182 = _distributive False
lemma-182 = _abstractLength 15
lemma-182 = _abstractLengthDistinct 8
lemma-182 = _innerFunctionApplication True
lemma-182 = _innerFunctionDepth 3
lemma-182 = _func match x
lemma-182 = _func match x(Z, S)
lemma-182 = _func match x(S)
lemma-182 = _func match x(Z)
lemma-182 = _func Z
lemma-182 = _func S
lemma-182 = _func S(length)
lemma-182 = _func length
lemma-182 = _func length(list)
lemma-182 = _func list
lemma-182 = _func _abstract match Var
lemma-182 = _func _abstract match Var(Func, Func)
lemma-182 = _func _abstract match Var(Func)
lemma-182 = _func _abstract Func
lemma-182 = _func _abstract Func(Func)
lemma-182 = _func _abstract Func(Var)
lemma-182 = _func _abstract Var
lemma-182 = _func _length 10
lemma-182 = _func _lengthDistinct 10
lemma-182 = _func _distinctRatio 1.0
lemma-182 = _func _popular S
lemma-182 = _func recursive True
lemma-182 = _func _abstractLength 10
lemma-182 = _func _abstractLengthDistinct 7
lemma-182 = _func _nArgs 1
lemma-182 = _func match x
lemma-182 = _func match x(list, qrev)
lemma-182 = _func match x(qrev)
lemma-182 = _func match x(list)
lemma-182 = _func list
lemma-182 = _func qrev
lemma-182 = _func qrev(list, cons)
lemma-182 = _func qrev(cons)
lemma-182 = _func qrev(list)
lemma-182 = _func cons
lemma-182 = _func cons(anyType, list)
lemma-182 = _func cons(list)
lemma-182 = _func cons(anyType)
lemma-182 = _func anyType
lemma-182 = _func _abstract match Var
lemma-182 = _func _abstract match Var(Var, Func)
lemma-182 = _func _abstract match Var(Func)
lemma-182 = _func _abstract match Var(Var)
lemma-182 = _func _abstract Var
lemma-182 = _func _abstract Func
lemma-182 = _func _abstract Func(Var, Func)
lemma-182 = _func _abstract Func(Func)
lemma-182 = _func _abstract Func(Var)
lemma-182 = _func _abstract Func(Var, Var)
lemma-182 = _func _length 14
lemma-182 = _func _lengthDistinct 14
lemma-182 = _func _distinctRatio 1.0
lemma-182 = _func _popular anyType
lemma-182 = _func recursive True
lemma-182 = _func _abstractLength 16
lemma-182 = _func _abstractLengthDistinct 10
lemma-182 = _func _nArgs 2

lemma-183 = ==
lemma-183 = ==(qrev, qrev)
lemma-183 = ==(qrev)
lemma-183 = qrev
lemma-183 = qrev(qrev, nil)
lemma-183 = qrev(nil)
lemma-183 = qrev(qrev)
lemma-183 = qrev(list, list)
lemma-183 = qrev(list)
lemma-183 = list
lemma-183 = nil
lemma-183 = _abstract Equals
lemma-183 = _abstract Equals(Func, Func)
lemma-183 = _abstract Equals(Func)
lemma-183 = _abstract Func
lemma-183 = _abstract Func(Func, Func)
lemma-183 = _abstract Func(Func)
lemma-183 = _abstract Func(Var, Var)
lemma-183 = _abstract Func(Var)
lemma-183 = _abstract Var
lemma-183 = _length 21
lemma-183 = _lengthDistinct 11
lemma-183 = _distinctRatio 0.5
lemma-183 = _popular list
lemma-183 = _commutative False
lemma-183 = _associative False
lemma-183 = _distributive False
lemma-183 = _abstractLength 21
lemma-183 = _abstractLengthDistinct 9
lemma-183 = _innerFunctionApplication True
lemma-183 = _innerFunctionDepth 2
lemma-183 = _func match x
lemma-183 = _func match x(list, qrev)
lemma-183 = _func match x(qrev)
lemma-183 = _func match x(list)
lemma-183 = _func list
lemma-183 = _func qrev
lemma-183 = _func qrev(list, cons)
lemma-183 = _func qrev(cons)
lemma-183 = _func qrev(list)
lemma-183 = _func cons
lemma-183 = _func cons(anyType, list)
lemma-183 = _func cons(list)
lemma-183 = _func cons(anyType)
lemma-183 = _func anyType
lemma-183 = _func _abstract match Var
lemma-183 = _func _abstract match Var(Var, Func)
lemma-183 = _func _abstract match Var(Func)
lemma-183 = _func _abstract match Var(Var)
lemma-183 = _func _abstract Var
lemma-183 = _func _abstract Func
lemma-183 = _func _abstract Func(Var, Func)
lemma-183 = _func _abstract Func(Func)
lemma-183 = _func _abstract Func(Var)
lemma-183 = _func _abstract Func(Var, Var)
lemma-183 = _func _length 14
lemma-183 = _func _lengthDistinct 14
lemma-183 = _func _distinctRatio 1.0
lemma-183 = _func _popular anyType
lemma-183 = _func recursive True
lemma-183 = _func _abstractLength 16
lemma-183 = _func _abstractLengthDistinct 10
lemma-183 = _func _nArgs 2

lemma-184 = ==
lemma-184 = ==(drop, drop)
lemma-184 = ==(drop)
lemma-184 = drop
lemma-184 = drop(Nat, drop)
lemma-184 = drop(drop)
lemma-184 = drop(Nat)
lemma-184 = Nat
lemma-184 = drop(Nat, list)
lemma-184 = drop(list)
lemma-184 = list
lemma-184 = _abstract Equals
lemma-184 = _abstract Equals(Func, Func)
lemma-184 = _abstract Equals(Func)
lemma-184 = _abstract Func
lemma-184 = _abstract Func(Var, Func)
lemma-184 = _abstract Func(Func)
lemma-184 = _abstract Func(Var)
lemma-184 = _abstract Var
lemma-184 = _abstract Func(Var, Var)
lemma-184 = _length 26
lemma-184 = _lengthDistinct 11
lemma-184 = _distinctRatio 0.4
lemma-184 = _popular Nat
lemma-184 = _commutative False
lemma-184 = _associative False
lemma-184 = _distributive False
lemma-184 = _abstractLength 26
lemma-184 = _abstractLengthDistinct 9
lemma-184 = _innerFunctionApplication True
lemma-184 = _innerFunctionDepth 2
lemma-184 = _func match x
lemma-184 = _func match x(list, match y)
lemma-184 = _func match x(match y)
lemma-184 = _func match x(list)
lemma-184 = _func list
lemma-184 = _func match y
lemma-184 = _func match y(nil, drop)
lemma-184 = _func match y(drop)
lemma-184 = _func match y(nil)
lemma-184 = _func nil
lemma-184 = _func drop
lemma-184 = _func drop(Nat, list)
lemma-184 = _func drop(list)
lemma-184 = _func drop(Nat)
lemma-184 = _func Nat
lemma-184 = _func _abstract match Var
lemma-184 = _func _abstract match Var(Var, match Var)
lemma-184 = _func _abstract match Var(match Var)
lemma-184 = _func _abstract match Var(Var)
lemma-184 = _func _abstract Var
lemma-184 = _func _abstract match Var(Func, Func)
lemma-184 = _func _abstract match Var(Func)
lemma-184 = _func _abstract Func
lemma-184 = _func _abstract Func(Var, Var)
lemma-184 = _func _abstract Func(Var)
lemma-184 = _func _length 15
lemma-184 = _func _lengthDistinct 15
lemma-184 = _func _distinctRatio 1.0
lemma-184 = _func _popular Nat
lemma-184 = _func recursive True
lemma-184 = _func _abstractLength 16
lemma-184 = _func _abstractLengthDistinct 10
lemma-184 = _func _nArgs 2

lemma-19 = ==
lemma-19 = ==(take, nil)
lemma-19 = ==(nil)
lemma-19 = ==(take)
lemma-19 = take
lemma-19 = take(Nat, nil)
lemma-19 = take(nil)
lemma-19 = take(Nat)
lemma-19 = Nat
lemma-19 = nil
lemma-19 = _abstract Equals
lemma-19 = _abstract Equals(Func, Func)
lemma-19 = _abstract Equals(Func)
lemma-19 = _abstract Func
lemma-19 = _abstract Func(Var, Func)
lemma-19 = _abstract Func(Func)
lemma-19 = _abstract Func(Var)
lemma-19 = _abstract Var
lemma-19 = _length 11
lemma-19 = _lengthDistinct 10
lemma-19 = _distinctRatio 0.9
lemma-19 = _popular nil
lemma-19 = _commutative False
lemma-19 = _associative False
lemma-19 = _distributive False
lemma-19 = _abstractLength 11
lemma-19 = _abstractLengthDistinct 8
lemma-19 = _innerFunctionApplication True
lemma-19 = _innerFunctionDepth 2
lemma-19 = _func match x
lemma-19 = _func match x(nil, match y)
lemma-19 = _func match x(match y)
lemma-19 = _func match x(nil)
lemma-19 = _func nil
lemma-19 = _func match y
lemma-19 = _func match y(nil, cons)
lemma-19 = _func match y(cons)
lemma-19 = _func match y(nil)
lemma-19 = _func cons
lemma-19 = _func cons(anyType, take)
lemma-19 = _func cons(take)
lemma-19 = _func cons(anyType)
lemma-19 = _func anyType
lemma-19 = _func take
lemma-19 = _func take(Nat, list)
lemma-19 = _func take(list)
lemma-19 = _func take(Nat)
lemma-19 = _func Nat
lemma-19 = _func list
lemma-19 = _func _abstract match Var
lemma-19 = _func _abstract match Var(Func, match Var)
lemma-19 = _func _abstract match Var(match Var)
lemma-19 = _func _abstract match Var(Func)
lemma-19 = _func _abstract Func
lemma-19 = _func _abstract match Var(Func, Func)
lemma-19 = _func _abstract Func(Var, Func)
lemma-19 = _func _abstract Func(Func)
lemma-19 = _func _abstract Func(Var)
lemma-19 = _func _abstract Var
lemma-19 = _func _abstract Func(Var, Var)
lemma-19 = _func _length 20
lemma-19 = _func _lengthDistinct 20
lemma-19 = _func _distinctRatio 1.0
lemma-19 = _func _popular Nat
lemma-19 = _func recursive True
lemma-19 = _func _abstractLength 21
lemma-19 = _func _abstractLengthDistinct 11
lemma-19 = _func _nArgs 2

lemma-20 = ==
lemma-20 = ==(drop, drop)
lemma-20 = ==(drop)
lemma-20 = drop
lemma-20 = drop(S, cons)
lemma-20 = drop(cons)
lemma-20 = drop(S)
lemma-20 = S
lemma-20 = S(Nat)
lemma-20 = Nat
lemma-20 = cons
lemma-20 = cons(anyType, list)
lemma-20 = cons(list)
lemma-20 = cons(anyType)
lemma-20 = anyType
lemma-20 = list
lemma-20 = drop(Nat, list)
lemma-20 = drop(list)
lemma-20 = drop(Nat)
lemma-20 = _abstract Equals
lemma-20 = _abstract Equals(Func, Func)
lemma-20 = _abstract Equals(Func)
lemma-20 = _abstract Func
lemma-20 = _abstract Func(Func, Func)
lemma-20 = _abstract Func(Func)
lemma-20 = _abstract Func(Var)
lemma-20 = _abstract Var
lemma-20 = _abstract Func(Var, Var)
lemma-20 = _length 23
lemma-20 = _lengthDistinct 19
lemma-20 = _distinctRatio 0.8
lemma-20 = _popular ==(drop)
lemma-20 = _commutative False
lemma-20 = _associative False
lemma-20 = _distributive False
lemma-20 = _abstractLength 23
lemma-20 = _abstractLengthDistinct 9
lemma-20 = _innerFunctionApplication True
lemma-20 = _innerFunctionDepth 2
lemma-20 = _func match x
lemma-20 = _func match x(list, match y)
lemma-20 = _func match x(match y)
lemma-20 = _func match x(list)
lemma-20 = _func list
lemma-20 = _func match y
lemma-20 = _func match y(nil, drop)
lemma-20 = _func match y(drop)
lemma-20 = _func match y(nil)
lemma-20 = _func nil
lemma-20 = _func drop
lemma-20 = _func drop(Nat, list)
lemma-20 = _func drop(list)
lemma-20 = _func drop(Nat)
lemma-20 = _func Nat
lemma-20 = _func _abstract match Var
lemma-20 = _func _abstract match Var(Var, match Var)
lemma-20 = _func _abstract match Var(match Var)
lemma-20 = _func _abstract match Var(Var)
lemma-20 = _func _abstract Var
lemma-20 = _func _abstract match Var(Func, Func)
lemma-20 = _func _abstract match Var(Func)
lemma-20 = _func _abstract Func
lemma-20 = _func _abstract Func(Var, Var)
lemma-20 = _func _abstract Func(Var)
lemma-20 = _func _length 15
lemma-20 = _func _lengthDistinct 15
lemma-20 = _func _distinctRatio 1.0
lemma-20 = _func _popular Nat
lemma-20 = _func recursive True
lemma-20 = _func _abstractLength 16
lemma-20 = _func _abstractLengthDistinct 10
lemma-20 = _func _nArgs 2

lemma-21 = ==
lemma-21 = ==(append, list)
lemma-21 = ==(list)
lemma-21 = ==(append)
lemma-21 = append
lemma-21 = append(list, nil)
lemma-21 = append(nil)
lemma-21 = append(list)
lemma-21 = list
lemma-21 = nil
lemma-21 = _abstract Equals
lemma-21 = _abstract Equals(Func, Var)
lemma-21 = _abstract Equals(Var)
lemma-21 = _abstract Equals(Func)
lemma-21 = _abstract Func
lemma-21 = _abstract Func(Var, Func)
lemma-21 = _abstract Func(Func)
lemma-21 = _abstract Func(Var)
lemma-21 = _abstract Var
lemma-21 = _length 11
lemma-21 = _lengthDistinct 10
lemma-21 = _distinctRatio 0.9
lemma-21 = _popular list
lemma-21 = _commutative False
lemma-21 = _associative False
lemma-21 = _distributive False
lemma-21 = _abstractLength 11
lemma-21 = _abstractLengthDistinct 9
lemma-21 = _innerFunctionApplication True
lemma-21 = _innerFunctionDepth 2
lemma-21 = _func match x
lemma-21 = _func match x(list, cons)
lemma-21 = _func match x(cons)
lemma-21 = _func match x(list)
lemma-21 = _func list
lemma-21 = _func cons
lemma-21 = _func cons(anyType, append)
lemma-21 = _func cons(append)
lemma-21 = _func cons(anyType)
lemma-21 = _func anyType
lemma-21 = _func append
lemma-21 = _func append(list, list)
lemma-21 = _func append(list)
lemma-21 = _func _abstract match Var
lemma-21 = _func _abstract match Var(Var, Func)
lemma-21 = _func _abstract match Var(Func)
lemma-21 = _func _abstract match Var(Var)
lemma-21 = _func _abstract Var
lemma-21 = _func _abstract Func
lemma-21 = _func _abstract Func(Var, Func)
lemma-21 = _func _abstract Func(Func)
lemma-21 = _func _abstract Func(Var)
lemma-21 = _func _abstract Func(Var, Var)
lemma-21 = _func _length 13
lemma-21 = _func _lengthDistinct 13
lemma-21 = _func _distinctRatio 1.0
lemma-21 = _func _popular anyType
lemma-21 = _func recursive True
lemma-21 = _func _abstractLength 16
lemma-21 = _func _abstractLengthDistinct 10
lemma-21 = _func _nArgs 2

lemma-22 = ==
lemma-22 = ==(append, list)
lemma-22 = ==(list)
lemma-22 = ==(append)
lemma-22 = append
lemma-22 = append(nil, list)
lemma-22 = append(list)
lemma-22 = append(nil)
lemma-22 = nil
lemma-22 = list
lemma-22 = _abstract Equals
lemma-22 = _abstract Equals(Func, Var)
lemma-22 = _abstract Equals(Var)
lemma-22 = _abstract Equals(Func)
lemma-22 = _abstract Func
lemma-22 = _abstract Func(Func, Var)
lemma-22 = _abstract Func(Var)
lemma-22 = _abstract Func(Func)
lemma-22 = _abstract Var
lemma-22 = _length 11
lemma-22 = _lengthDistinct 10
lemma-22 = _distinctRatio 0.9
lemma-22 = _popular list
lemma-22 = _commutative False
lemma-22 = _associative False
lemma-22 = _distributive False
lemma-22 = _abstractLength 11
lemma-22 = _abstractLengthDistinct 9
lemma-22 = _innerFunctionApplication True
lemma-22 = _innerFunctionDepth 2
lemma-22 = _func match x
lemma-22 = _func match x(list, cons)
lemma-22 = _func match x(cons)
lemma-22 = _func match x(list)
lemma-22 = _func list
lemma-22 = _func cons
lemma-22 = _func cons(anyType, append)
lemma-22 = _func cons(append)
lemma-22 = _func cons(anyType)
lemma-22 = _func anyType
lemma-22 = _func append
lemma-22 = _func append(list, list)
lemma-22 = _func append(list)
lemma-22 = _func _abstract match Var
lemma-22 = _func _abstract match Var(Var, Func)
lemma-22 = _func _abstract match Var(Func)
lemma-22 = _func _abstract match Var(Var)
lemma-22 = _func _abstract Var
lemma-22 = _func _abstract Func
lemma-22 = _func _abstract Func(Var, Func)
lemma-22 = _func _abstract Func(Func)
lemma-22 = _func _abstract Func(Var)
lemma-22 = _func _abstract Func(Var, Var)
lemma-22 = _func _length 13
lemma-22 = _func _lengthDistinct 13
lemma-22 = _func _distinctRatio 1.0
lemma-22 = _func _popular anyType
lemma-22 = _func recursive True
lemma-22 = _func _abstractLength 16
lemma-22 = _func _abstractLengthDistinct 10
lemma-22 = _func _nArgs 2

lemma-23 = ==
lemma-23 = ==(append, cons)
lemma-23 = ==(cons)
lemma-23 = ==(append)
lemma-23 = append
lemma-23 = append(cons, list)
lemma-23 = append(list)
lemma-23 = append(cons)
lemma-23 = cons
lemma-23 = cons(anyType, list)
lemma-23 = cons(list)
lemma-23 = cons(anyType)
lemma-23 = anyType
lemma-23 = list
lemma-23 = cons(anyType, append)
lemma-23 = cons(append)
lemma-23 = append(list, list)
lemma-23 = _abstract Equals
lemma-23 = _abstract Equals(Func, Func)
lemma-23 = _abstract Equals(Func)
lemma-23 = _abstract Func
lemma-23 = _abstract Func(Func, Var)
lemma-23 = _abstract Func(Var)
lemma-23 = _abstract Func(Func)
lemma-23 = _abstract Func(Var, Var)
lemma-23 = _abstract Var
lemma-23 = _abstract Func(Var, Func)
lemma-23 = _length 26
lemma-23 = _lengthDistinct 17
lemma-23 = _distinctRatio 0.7
lemma-23 = _popular list
lemma-23 = _commutative False
lemma-23 = _associative False
lemma-23 = _distributive False
lemma-23 = _abstractLength 26
lemma-23 = _abstractLengthDistinct 10
lemma-23 = _innerFunctionApplication True
lemma-23 = _innerFunctionDepth 2
lemma-23 = _func match x
lemma-23 = _func match x(list, cons)
lemma-23 = _func match x(cons)
lemma-23 = _func match x(list)
lemma-23 = _func list
lemma-23 = _func cons
lemma-23 = _func cons(anyType, append)
lemma-23 = _func cons(append)
lemma-23 = _func cons(anyType)
lemma-23 = _func anyType
lemma-23 = _func append
lemma-23 = _func append(list, list)
lemma-23 = _func append(list)
lemma-23 = _func _abstract match Var
lemma-23 = _func _abstract match Var(Var, Func)
lemma-23 = _func _abstract match Var(Func)
lemma-23 = _func _abstract match Var(Var)
lemma-23 = _func _abstract Var
lemma-23 = _func _abstract Func
lemma-23 = _func _abstract Func(Var, Func)
lemma-23 = _func _abstract Func(Func)
lemma-23 = _func _abstract Func(Var)
lemma-23 = _func _abstract Func(Var, Var)
lemma-23 = _func _length 13
lemma-23 = _func _lengthDistinct 13
lemma-23 = _func _distinctRatio 1.0
lemma-23 = _func _popular anyType
lemma-23 = _func recursive True
lemma-23 = _func _abstractLength 16
lemma-23 = _func _abstractLengthDistinct 10
lemma-23 = _func _nArgs 2

lemma-24 = ==
lemma-24 = ==(append, append)
lemma-24 = ==(append)
lemma-24 = append
lemma-24 = append(append, list)
lemma-24 = append(list)
lemma-24 = append(append)
lemma-24 = append(list, list)
lemma-24 = list
lemma-24 = append(list, append)
lemma-24 = _abstract Equals
lemma-24 = _abstract Equals(Func, Func)
lemma-24 = _abstract Equals(Func)
lemma-24 = _abstract Func
lemma-24 = _abstract Func(Func, Var)
lemma-24 = _abstract Func(Var)
lemma-24 = _abstract Func(Func)
lemma-24 = _abstract Func(Var, Var)
lemma-24 = _abstract Var
lemma-24 = _abstract Func(Var, Func)
lemma-24 = _length 26
lemma-24 = _lengthDistinct 10
lemma-24 = _distinctRatio 0.4
lemma-24 = _popular append(list)
lemma-24 = _commutative False
lemma-24 = _associative True
lemma-24 = _distributive False
lemma-24 = _abstractLength 26
lemma-24 = _abstractLengthDistinct 10
lemma-24 = _innerFunctionApplication True
lemma-24 = _innerFunctionDepth 2
lemma-24 = _func match x
lemma-24 = _func match x(list, cons)
lemma-24 = _func match x(cons)
lemma-24 = _func match x(list)
lemma-24 = _func list
lemma-24 = _func cons
lemma-24 = _func cons(anyType, append)
lemma-24 = _func cons(append)
lemma-24 = _func cons(anyType)
lemma-24 = _func anyType
lemma-24 = _func append
lemma-24 = _func append(list, list)
lemma-24 = _func append(list)
lemma-24 = _func _abstract match Var
lemma-24 = _func _abstract match Var(Var, Func)
lemma-24 = _func _abstract match Var(Func)
lemma-24 = _func _abstract match Var(Var)
lemma-24 = _func _abstract Var
lemma-24 = _func _abstract Func
lemma-24 = _func _abstract Func(Var, Func)
lemma-24 = _func _abstract Func(Func)
lemma-24 = _func _abstract Func(Var)
lemma-24 = _func _abstract Func(Var, Var)
lemma-24 = _func _length 13
lemma-24 = _func _lengthDistinct 13
lemma-24 = _func _distinctRatio 1.0
lemma-24 = _func _popular anyType
lemma-24 = _func recursive True
lemma-24 = _func _abstractLength 16
lemma-24 = _func _abstractLengthDistinct 10
lemma-24 = _func _nArgs 2

lemma-25 = ==
lemma-25 = ==(drop, nil)
lemma-25 = ==(nil)
lemma-25 = ==(drop)
lemma-25 = drop
lemma-25 = drop(Nat, take)
lemma-25 = drop(take)
lemma-25 = drop(Nat)
lemma-25 = Nat
lemma-25 = take
lemma-25 = take(Nat, list)
lemma-25 = take(list)
lemma-25 = take(Nat)
lemma-25 = list
lemma-25 = nil
lemma-25 = _abstract Equals
lemma-25 = _abstract Equals(Func, Func)
lemma-25 = _abstract Equals(Func)
lemma-25 = _abstract Func
lemma-25 = _abstract Func(Var, Func)
lemma-25 = _abstract Func(Func)
lemma-25 = _abstract Func(Var)
lemma-25 = _abstract Var
lemma-25 = _abstract Func(Var, Var)
lemma-25 = _length 16
lemma-25 = _lengthDistinct 15
lemma-25 = _distinctRatio 0.9
lemma-25 = _popular Nat
lemma-25 = _commutative False
lemma-25 = _associative False
lemma-25 = _distributive False
lemma-25 = _abstractLength 16
lemma-25 = _abstractLengthDistinct 9
lemma-25 = _innerFunctionApplication True
lemma-25 = _innerFunctionDepth 2
lemma-25 = _func match x
lemma-25 = _func match x(list, match y)
lemma-25 = _func match x(match y)
lemma-25 = _func match x(list)
lemma-25 = _func list
lemma-25 = _func match y
lemma-25 = _func match y(nil, drop)
lemma-25 = _func match y(drop)
lemma-25 = _func match y(nil)
lemma-25 = _func nil
lemma-25 = _func drop
lemma-25 = _func drop(Nat, list)
lemma-25 = _func drop(list)
lemma-25 = _func drop(Nat)
lemma-25 = _func Nat
lemma-25 = _func _abstract match Var
lemma-25 = _func _abstract match Var(Var, match Var)
lemma-25 = _func _abstract match Var(match Var)
lemma-25 = _func _abstract match Var(Var)
lemma-25 = _func _abstract Var
lemma-25 = _func _abstract match Var(Func, Func)
lemma-25 = _func _abstract match Var(Func)
lemma-25 = _func _abstract Func
lemma-25 = _func _abstract Func(Var, Var)
lemma-25 = _func _abstract Func(Var)
lemma-25 = _func _length 15
lemma-25 = _func _lengthDistinct 15
lemma-25 = _func _distinctRatio 1.0
lemma-25 = _func _popular Nat
lemma-25 = _func recursive True
lemma-25 = _func _abstractLength 16
lemma-25 = _func _abstractLengthDistinct 10
lemma-25 = _func _nArgs 2
lemma-25 = _func match x
lemma-25 = _func match x(nil, match y)
lemma-25 = _func match x(match y)
lemma-25 = _func match x(nil)
lemma-25 = _func nil
lemma-25 = _func match y
lemma-25 = _func match y(nil, cons)
lemma-25 = _func match y(cons)
lemma-25 = _func match y(nil)
lemma-25 = _func cons
lemma-25 = _func cons(anyType, take)
lemma-25 = _func cons(take)
lemma-25 = _func cons(anyType)
lemma-25 = _func anyType
lemma-25 = _func take
lemma-25 = _func take(Nat, list)
lemma-25 = _func take(list)
lemma-25 = _func take(Nat)
lemma-25 = _func Nat
lemma-25 = _func list
lemma-25 = _func _abstract match Var
lemma-25 = _func _abstract match Var(Func, match Var)
lemma-25 = _func _abstract match Var(match Var)
lemma-25 = _func _abstract match Var(Func)
lemma-25 = _func _abstract Func
lemma-25 = _func _abstract match Var(Func, Func)
lemma-25 = _func _abstract Func(Var, Func)
lemma-25 = _func _abstract Func(Func)
lemma-25 = _func _abstract Func(Var)
lemma-25 = _func _abstract Var
lemma-25 = _func _abstract Func(Var, Var)
lemma-25 = _func _length 20
lemma-25 = _func _lengthDistinct 20
lemma-25 = _func _distinctRatio 1.0
lemma-25 = _func _popular Nat
lemma-25 = _func recursive True
lemma-25 = _func _abstractLength 21
lemma-25 = _func _abstractLengthDistinct 11
lemma-25 = _func _nArgs 2

lemma-26 = ==
lemma-26 = ==(take, take)
lemma-26 = ==(take)
lemma-26 = take
lemma-26 = take(S, append)
lemma-26 = take(append)
lemma-26 = take(S)
lemma-26 = S
lemma-26 = S(Z)
lemma-26 = Z
lemma-26 = append
lemma-26 = append(list, list)
lemma-26 = append(list)
lemma-26 = list
lemma-26 = take(S, list)
lemma-26 = take(list)
lemma-26 = _abstract Equals
lemma-26 = _abstract Equals(Func, Func)
lemma-26 = _abstract Equals(Func)
lemma-26 = _abstract Func
lemma-26 = _abstract Func(Func, Func)
lemma-26 = _abstract Func(Func)
lemma-26 = _abstract Func(Var, Var)
lemma-26 = _abstract Func(Var)
lemma-26 = _abstract Var
lemma-26 = _abstract Func(Func, Var)
lemma-26 = _length 25
lemma-26 = _lengthDistinct 16
lemma-26 = _distinctRatio 0.6
lemma-26 = _popular list
lemma-26 = _commutative False
lemma-26 = _associative False
lemma-26 = _distributive False
lemma-26 = _abstractLength 25
lemma-26 = _abstractLengthDistinct 10
lemma-26 = _innerFunctionApplication True
lemma-26 = _innerFunctionDepth 3
lemma-26 = _func match x
lemma-26 = _func match x(list, cons)
lemma-26 = _func match x(cons)
lemma-26 = _func match x(list)
lemma-26 = _func list
lemma-26 = _func cons
lemma-26 = _func cons(anyType, append)
lemma-26 = _func cons(append)
lemma-26 = _func cons(anyType)
lemma-26 = _func anyType
lemma-26 = _func append
lemma-26 = _func append(list, list)
lemma-26 = _func append(list)
lemma-26 = _func _abstract match Var
lemma-26 = _func _abstract match Var(Var, Func)
lemma-26 = _func _abstract match Var(Func)
lemma-26 = _func _abstract match Var(Var)
lemma-26 = _func _abstract Var
lemma-26 = _func _abstract Func
lemma-26 = _func _abstract Func(Var, Func)
lemma-26 = _func _abstract Func(Func)
lemma-26 = _func _abstract Func(Var)
lemma-26 = _func _abstract Func(Var, Var)
lemma-26 = _func _length 13
lemma-26 = _func _lengthDistinct 13
lemma-26 = _func _distinctRatio 1.0
lemma-26 = _func _popular anyType
lemma-26 = _func recursive True
lemma-26 = _func _abstractLength 16
lemma-26 = _func _abstractLengthDistinct 10
lemma-26 = _func _nArgs 2
lemma-26 = _func match x
lemma-26 = _func match x(nil, match y)
lemma-26 = _func match x(match y)
lemma-26 = _func match x(nil)
lemma-26 = _func nil
lemma-26 = _func match y
lemma-26 = _func match y(nil, cons)
lemma-26 = _func match y(cons)
lemma-26 = _func match y(nil)
lemma-26 = _func cons
lemma-26 = _func cons(anyType, take)
lemma-26 = _func cons(take)
lemma-26 = _func cons(anyType)
lemma-26 = _func anyType
lemma-26 = _func take
lemma-26 = _func take(Nat, list)
lemma-26 = _func take(list)
lemma-26 = _func take(Nat)
lemma-26 = _func Nat
lemma-26 = _func list
lemma-26 = _func _abstract match Var
lemma-26 = _func _abstract match Var(Func, match Var)
lemma-26 = _func _abstract match Var(match Var)
lemma-26 = _func _abstract match Var(Func)
lemma-26 = _func _abstract Func
lemma-26 = _func _abstract match Var(Func, Func)
lemma-26 = _func _abstract Func(Var, Func)
lemma-26 = _func _abstract Func(Func)
lemma-26 = _func _abstract Func(Var)
lemma-26 = _func _abstract Var
lemma-26 = _func _abstract Func(Var, Var)
lemma-26 = _func _length 20
lemma-26 = _func _lengthDistinct 20
lemma-26 = _func _distinctRatio 1.0
lemma-26 = _func _popular Nat
lemma-26 = _func recursive True
lemma-26 = _func _abstractLength 21
lemma-26 = _func _abstractLengthDistinct 11
lemma-26 = _func _nArgs 2

lemma-27 = ==
lemma-27 = ==(append, list)
lemma-27 = ==(list)
lemma-27 = ==(append)
lemma-27 = append
lemma-27 = append(take, drop)
lemma-27 = append(drop)
lemma-27 = append(take)
lemma-27 = take
lemma-27 = take(Nat, list)
lemma-27 = take(list)
lemma-27 = take(Nat)
lemma-27 = Nat
lemma-27 = list
lemma-27 = drop
lemma-27 = drop(Nat, list)
lemma-27 = drop(list)
lemma-27 = drop(Nat)
lemma-27 = _abstract Equals
lemma-27 = _abstract Equals(Func, Var)
lemma-27 = _abstract Equals(Var)
lemma-27 = _abstract Equals(Func)
lemma-27 = _abstract Func
lemma-27 = _abstract Func(Func, Func)
lemma-27 = _abstract Func(Func)
lemma-27 = _abstract Func(Var, Var)
lemma-27 = _abstract Func(Var)
lemma-27 = _abstract Var
lemma-27 = _length 21
lemma-27 = _lengthDistinct 18
lemma-27 = _distinctRatio 0.9
lemma-27 = _popular list
lemma-27 = _commutative False
lemma-27 = _associative False
lemma-27 = _distributive False
lemma-27 = _abstractLength 21
lemma-27 = _abstractLengthDistinct 10
lemma-27 = _innerFunctionApplication True
lemma-27 = _innerFunctionDepth 2
lemma-27 = _func match x
lemma-27 = _func match x(list, cons)
lemma-27 = _func match x(cons)
lemma-27 = _func match x(list)
lemma-27 = _func list
lemma-27 = _func cons
lemma-27 = _func cons(anyType, append)
lemma-27 = _func cons(append)
lemma-27 = _func cons(anyType)
lemma-27 = _func anyType
lemma-27 = _func append
lemma-27 = _func append(list, list)
lemma-27 = _func append(list)
lemma-27 = _func _abstract match Var
lemma-27 = _func _abstract match Var(Var, Func)
lemma-27 = _func _abstract match Var(Func)
lemma-27 = _func _abstract match Var(Var)
lemma-27 = _func _abstract Var
lemma-27 = _func _abstract Func
lemma-27 = _func _abstract Func(Var, Func)
lemma-27 = _func _abstract Func(Func)
lemma-27 = _func _abstract Func(Var)
lemma-27 = _func _abstract Func(Var, Var)
lemma-27 = _func _length 13
lemma-27 = _func _lengthDistinct 13
lemma-27 = _func _distinctRatio 1.0
lemma-27 = _func _popular anyType
lemma-27 = _func recursive True
lemma-27 = _func _abstractLength 16
lemma-27 = _func _abstractLengthDistinct 10
lemma-27 = _func _nArgs 2
lemma-27 = _func match x
lemma-27 = _func match x(list, match y)
lemma-27 = _func match x(match y)
lemma-27 = _func match x(list)
lemma-27 = _func list
lemma-27 = _func match y
lemma-27 = _func match y(nil, drop)
lemma-27 = _func match y(drop)
lemma-27 = _func match y(nil)
lemma-27 = _func nil
lemma-27 = _func drop
lemma-27 = _func drop(Nat, list)
lemma-27 = _func drop(list)
lemma-27 = _func drop(Nat)
lemma-27 = _func Nat
lemma-27 = _func _abstract match Var
lemma-27 = _func _abstract match Var(Var, match Var)
lemma-27 = _func _abstract match Var(match Var)
lemma-27 = _func _abstract match Var(Var)
lemma-27 = _func _abstract Var
lemma-27 = _func _abstract match Var(Func, Func)
lemma-27 = _func _abstract match Var(Func)
lemma-27 = _func _abstract Func
lemma-27 = _func _abstract Func(Var, Var)
lemma-27 = _func _abstract Func(Var)
lemma-27 = _func _length 15
lemma-27 = _func _lengthDistinct 15
lemma-27 = _func _distinctRatio 1.0
lemma-27 = _func _popular Nat
lemma-27 = _func recursive True
lemma-27 = _func _abstractLength 16
lemma-27 = _func _abstractLengthDistinct 10
lemma-27 = _func _nArgs 2
lemma-27 = _func match x
lemma-27 = _func match x(nil, match y)
lemma-27 = _func match x(match y)
lemma-27 = _func match x(nil)
lemma-27 = _func nil
lemma-27 = _func match y
lemma-27 = _func match y(nil, cons)
lemma-27 = _func match y(cons)
lemma-27 = _func match y(nil)
lemma-27 = _func cons
lemma-27 = _func cons(anyType, take)
lemma-27 = _func cons(take)
lemma-27 = _func cons(anyType)
lemma-27 = _func anyType
lemma-27 = _func take
lemma-27 = _func take(Nat, list)
lemma-27 = _func take(list)
lemma-27 = _func take(Nat)
lemma-27 = _func Nat
lemma-27 = _func list
lemma-27 = _func _abstract match Var
lemma-27 = _func _abstract match Var(Func, match Var)
lemma-27 = _func _abstract match Var(match Var)
lemma-27 = _func _abstract match Var(Func)
lemma-27 = _func _abstract Func
lemma-27 = _func _abstract match Var(Func, Func)
lemma-27 = _func _abstract Func(Var, Func)
lemma-27 = _func _abstract Func(Func)
lemma-27 = _func _abstract Func(Var)
lemma-27 = _func _abstract Var
lemma-27 = _func _abstract Func(Var, Var)
lemma-27 = _func _length 20
lemma-27 = _func _lengthDistinct 20
lemma-27 = _func _distinctRatio 1.0
lemma-27 = _func _popular Nat
lemma-27 = _func recursive True
lemma-27 = _func _abstractLength 21
lemma-27 = _func _abstractLengthDistinct 11
lemma-27 = _func _nArgs 2

lemma-28 = ==
lemma-28 = ==(take, nil)
lemma-28 = ==(nil)
lemma-28 = ==(take)
lemma-28 = take
lemma-28 = take(Z, list)
lemma-28 = take(list)
lemma-28 = take(Z)
lemma-28 = Z
lemma-28 = list
lemma-28 = nil
lemma-28 = _abstract Equals
lemma-28 = _abstract Equals(Func, Func)
lemma-28 = _abstract Equals(Func)
lemma-28 = _abstract Func
lemma-28 = _abstract Func(Func, Var)
lemma-28 = _abstract Func(Var)
lemma-28 = _abstract Func(Func)
lemma-28 = _abstract Var
lemma-28 = _length 11
lemma-28 = _lengthDistinct 11
lemma-28 = _distinctRatio 1.0
lemma-28 = _popular ==
lemma-28 = _commutative False
lemma-28 = _associative False
lemma-28 = _distributive False
lemma-28 = _abstractLength 11
lemma-28 = _abstractLengthDistinct 8
lemma-28 = _innerFunctionApplication True
lemma-28 = _innerFunctionDepth 2
lemma-28 = _func match x
lemma-28 = _func match x(nil, match y)
lemma-28 = _func match x(match y)
lemma-28 = _func match x(nil)
lemma-28 = _func nil
lemma-28 = _func match y
lemma-28 = _func match y(nil, cons)
lemma-28 = _func match y(cons)
lemma-28 = _func match y(nil)
lemma-28 = _func cons
lemma-28 = _func cons(anyType, take)
lemma-28 = _func cons(take)
lemma-28 = _func cons(anyType)
lemma-28 = _func anyType
lemma-28 = _func take
lemma-28 = _func take(Nat, list)
lemma-28 = _func take(list)
lemma-28 = _func take(Nat)
lemma-28 = _func Nat
lemma-28 = _func list
lemma-28 = _func _abstract match Var
lemma-28 = _func _abstract match Var(Func, match Var)
lemma-28 = _func _abstract match Var(match Var)
lemma-28 = _func _abstract match Var(Func)
lemma-28 = _func _abstract Func
lemma-28 = _func _abstract match Var(Func, Func)
lemma-28 = _func _abstract Func(Var, Func)
lemma-28 = _func _abstract Func(Func)
lemma-28 = _func _abstract Func(Var)
lemma-28 = _func _abstract Var
lemma-28 = _func _abstract Func(Var, Var)
lemma-28 = _func _length 20
lemma-28 = _func _lengthDistinct 20
lemma-28 = _func _distinctRatio 1.0
lemma-28 = _func _popular Nat
lemma-28 = _func recursive True
lemma-28 = _func _abstractLength 21
lemma-28 = _func _abstractLengthDistinct 11
lemma-28 = _func _nArgs 2

lemma-29 = ==
lemma-29 = ==(take, take)
lemma-29 = ==(take)
lemma-29 = take
lemma-29 = take(Nat, take)
lemma-29 = take(take)
lemma-29 = take(Nat)
lemma-29 = Nat
lemma-29 = take(Nat, list)
lemma-29 = take(list)
lemma-29 = list
lemma-29 = _abstract Equals
lemma-29 = _abstract Equals(Func, Func)
lemma-29 = _abstract Equals(Func)
lemma-29 = _abstract Func
lemma-29 = _abstract Func(Var, Func)
lemma-29 = _abstract Func(Func)
lemma-29 = _abstract Func(Var)
lemma-29 = _abstract Var
lemma-29 = _abstract Func(Var, Var)
lemma-29 = _length 21
lemma-29 = _lengthDistinct 11
lemma-29 = _distinctRatio 0.5
lemma-29 = _popular Nat
lemma-29 = _commutative False
lemma-29 = _associative False
lemma-29 = _distributive False
lemma-29 = _abstractLength 21
lemma-29 = _abstractLengthDistinct 9
lemma-29 = _innerFunctionApplication True
lemma-29 = _innerFunctionDepth 2
lemma-29 = _func match x
lemma-29 = _func match x(nil, match y)
lemma-29 = _func match x(match y)
lemma-29 = _func match x(nil)
lemma-29 = _func nil
lemma-29 = _func match y
lemma-29 = _func match y(nil, cons)
lemma-29 = _func match y(cons)
lemma-29 = _func match y(nil)
lemma-29 = _func cons
lemma-29 = _func cons(anyType, take)
lemma-29 = _func cons(take)
lemma-29 = _func cons(anyType)
lemma-29 = _func anyType
lemma-29 = _func take
lemma-29 = _func take(Nat, list)
lemma-29 = _func take(list)
lemma-29 = _func take(Nat)
lemma-29 = _func Nat
lemma-29 = _func list
lemma-29 = _func _abstract match Var
lemma-29 = _func _abstract match Var(Func, match Var)
lemma-29 = _func _abstract match Var(match Var)
lemma-29 = _func _abstract match Var(Func)
lemma-29 = _func _abstract Func
lemma-29 = _func _abstract match Var(Func, Func)
lemma-29 = _func _abstract Func(Var, Func)
lemma-29 = _func _abstract Func(Func)
lemma-29 = _func _abstract Func(Var)
lemma-29 = _func _abstract Var
lemma-29 = _func _abstract Func(Var, Var)
lemma-29 = _func _length 20
lemma-29 = _func _lengthDistinct 20
lemma-29 = _func _distinctRatio 1.0
lemma-29 = _func _popular Nat
lemma-29 = _func recursive True
lemma-29 = _func _abstractLength 21
lemma-29 = _func _abstractLengthDistinct 11
lemma-29 = _func _nArgs 2

lemma-30 = ==
lemma-30 = ==(take, take)
lemma-30 = ==(take)
lemma-30 = take
lemma-30 = take(Nat, take)
lemma-30 = take(take)
lemma-30 = take(Nat)
lemma-30 = Nat
lemma-30 = take(Nat, list)
lemma-30 = take(list)
lemma-30 = list
lemma-30 = _abstract Equals
lemma-30 = _abstract Equals(Func, Func)
lemma-30 = _abstract Equals(Func)
lemma-30 = _abstract Func
lemma-30 = _abstract Func(Var, Func)
lemma-30 = _abstract Func(Func)
lemma-30 = _abstract Func(Var)
lemma-30 = _abstract Var
lemma-30 = _abstract Func(Var, Var)
lemma-30 = _length 26
lemma-30 = _lengthDistinct 11
lemma-30 = _distinctRatio 0.4
lemma-30 = _popular Nat
lemma-30 = _commutative False
lemma-30 = _associative False
lemma-30 = _distributive False
lemma-30 = _abstractLength 26
lemma-30 = _abstractLengthDistinct 9
lemma-30 = _innerFunctionApplication True
lemma-30 = _innerFunctionDepth 2
lemma-30 = _func match x
lemma-30 = _func match x(nil, match y)
lemma-30 = _func match x(match y)
lemma-30 = _func match x(nil)
lemma-30 = _func nil
lemma-30 = _func match y
lemma-30 = _func match y(nil, cons)
lemma-30 = _func match y(cons)
lemma-30 = _func match y(nil)
lemma-30 = _func cons
lemma-30 = _func cons(anyType, take)
lemma-30 = _func cons(take)
lemma-30 = _func cons(anyType)
lemma-30 = _func anyType
lemma-30 = _func take
lemma-30 = _func take(Nat, list)
lemma-30 = _func take(list)
lemma-30 = _func take(Nat)
lemma-30 = _func Nat
lemma-30 = _func list
lemma-30 = _func _abstract match Var
lemma-30 = _func _abstract match Var(Func, match Var)
lemma-30 = _func _abstract match Var(match Var)
lemma-30 = _func _abstract match Var(Func)
lemma-30 = _func _abstract Func
lemma-30 = _func _abstract match Var(Func, Func)
lemma-30 = _func _abstract Func(Var, Func)
lemma-30 = _func _abstract Func(Func)
lemma-30 = _func _abstract Func(Var)
lemma-30 = _func _abstract Var
lemma-30 = _func _abstract Func(Var, Var)
lemma-30 = _func _length 20
lemma-30 = _func _lengthDistinct 20
lemma-30 = _func _distinctRatio 1.0
lemma-30 = _func _popular Nat
lemma-30 = _func recursive True
lemma-30 = _func _abstractLength 21
lemma-30 = _func _abstractLengthDistinct 11
lemma-30 = _func _nArgs 2

lemma-31 = ==
lemma-31 = ==(take, cons)
lemma-31 = ==(cons)
lemma-31 = ==(take)
lemma-31 = take
lemma-31 = take(S, cons)
lemma-31 = take(cons)
lemma-31 = take(S)
lemma-31 = S
lemma-31 = S(Nat)
lemma-31 = Nat
lemma-31 = cons
lemma-31 = cons(anyType, list)
lemma-31 = cons(list)
lemma-31 = cons(anyType)
lemma-31 = anyType
lemma-31 = list
lemma-31 = cons(anyType, take)
lemma-31 = cons(take)
lemma-31 = take(Nat, list)
lemma-31 = take(list)
lemma-31 = take(Nat)
lemma-31 = _abstract Equals
lemma-31 = _abstract Equals(Func, Func)
lemma-31 = _abstract Equals(Func)
lemma-31 = _abstract Func
lemma-31 = _abstract Func(Func, Func)
lemma-31 = _abstract Func(Func)
lemma-31 = _abstract Func(Var)
lemma-31 = _abstract Var
lemma-31 = _abstract Func(Var, Var)
lemma-31 = _abstract Func(Var, Func)
lemma-31 = _length 28
lemma-31 = _lengthDistinct 22
lemma-31 = _distinctRatio 0.8
lemma-31 = _popular Nat
lemma-31 = _commutative False
lemma-31 = _associative False
lemma-31 = _distributive False
lemma-31 = _abstractLength 28
lemma-31 = _abstractLengthDistinct 10
lemma-31 = _innerFunctionApplication True
lemma-31 = _innerFunctionDepth 2
lemma-31 = _func match x
lemma-31 = _func match x(nil, match y)
lemma-31 = _func match x(match y)
lemma-31 = _func match x(nil)
lemma-31 = _func nil
lemma-31 = _func match y
lemma-31 = _func match y(nil, cons)
lemma-31 = _func match y(cons)
lemma-31 = _func match y(nil)
lemma-31 = _func cons
lemma-31 = _func cons(anyType, take)
lemma-31 = _func cons(take)
lemma-31 = _func cons(anyType)
lemma-31 = _func anyType
lemma-31 = _func take
lemma-31 = _func take(Nat, list)
lemma-31 = _func take(list)
lemma-31 = _func take(Nat)
lemma-31 = _func Nat
lemma-31 = _func list
lemma-31 = _func _abstract match Var
lemma-31 = _func _abstract match Var(Func, match Var)
lemma-31 = _func _abstract match Var(match Var)
lemma-31 = _func _abstract match Var(Func)
lemma-31 = _func _abstract Func
lemma-31 = _func _abstract match Var(Func, Func)
lemma-31 = _func _abstract Func(Var, Func)
lemma-31 = _func _abstract Func(Func)
lemma-31 = _func _abstract Func(Var)
lemma-31 = _func _abstract Var
lemma-31 = _func _abstract Func(Var, Var)
lemma-31 = _func _length 20
lemma-31 = _func _lengthDistinct 20
lemma-31 = _func _distinctRatio 1.0
lemma-31 = _func _popular Nat
lemma-31 = _func recursive True
lemma-31 = _func _abstractLength 21
lemma-31 = _func _abstractLengthDistinct 11
lemma-31 = _func _nArgs 2

lemma-32 = ==
lemma-32 = ==(take, take)
lemma-32 = ==(take)
lemma-32 = take
lemma-32 = take(S, take)
lemma-32 = take(take)
lemma-32 = take(S)
lemma-32 = S
lemma-32 = S(Nat)
lemma-32 = Nat
lemma-32 = take(Nat, list)
lemma-32 = take(list)
lemma-32 = take(Nat)
lemma-32 = list
lemma-32 = _abstract Equals
lemma-32 = _abstract Equals(Func, Func)
lemma-32 = _abstract Equals(Func)
lemma-32 = _abstract Func
lemma-32 = _abstract Func(Func, Func)
lemma-32 = _abstract Func(Func)
lemma-32 = _abstract Func(Var)
lemma-32 = _abstract Var
lemma-32 = _abstract Func(Var, Var)
lemma-32 = _length 23
lemma-32 = _lengthDistinct 14
lemma-32 = _distinctRatio 0.6
lemma-32 = _popular Nat
lemma-32 = _commutative False
lemma-32 = _associative False
lemma-32 = _distributive False
lemma-32 = _abstractLength 23
lemma-32 = _abstractLengthDistinct 9
lemma-32 = _innerFunctionApplication True
lemma-32 = _innerFunctionDepth 2
lemma-32 = _func match x
lemma-32 = _func match x(nil, match y)
lemma-32 = _func match x(match y)
lemma-32 = _func match x(nil)
lemma-32 = _func nil
lemma-32 = _func match y
lemma-32 = _func match y(nil, cons)
lemma-32 = _func match y(cons)
lemma-32 = _func match y(nil)
lemma-32 = _func cons
lemma-32 = _func cons(anyType, take)
lemma-32 = _func cons(take)
lemma-32 = _func cons(anyType)
lemma-32 = _func anyType
lemma-32 = _func take
lemma-32 = _func take(Nat, list)
lemma-32 = _func take(list)
lemma-32 = _func take(Nat)
lemma-32 = _func Nat
lemma-32 = _func list
lemma-32 = _func _abstract match Var
lemma-32 = _func _abstract match Var(Func, match Var)
lemma-32 = _func _abstract match Var(match Var)
lemma-32 = _func _abstract match Var(Func)
lemma-32 = _func _abstract Func
lemma-32 = _func _abstract match Var(Func, Func)
lemma-32 = _func _abstract Func(Var, Func)
lemma-32 = _func _abstract Func(Func)
lemma-32 = _func _abstract Func(Var)
lemma-32 = _func _abstract Var
lemma-32 = _func _abstract Func(Var, Var)
lemma-32 = _func _length 20
lemma-32 = _func _lengthDistinct 20
lemma-32 = _func _distinctRatio 1.0
lemma-32 = _func _popular Nat
lemma-32 = _func recursive True
lemma-32 = _func _abstractLength 21
lemma-32 = _func _abstractLengthDistinct 11
lemma-32 = _func _nArgs 2

lemma-33 = ==
lemma-33 = ==(drop, nil)
lemma-33 = ==(nil)
lemma-33 = ==(drop)
lemma-33 = drop
lemma-33 = drop(Nat, nil)
lemma-33 = drop(nil)
lemma-33 = drop(Nat)
lemma-33 = Nat
lemma-33 = nil
lemma-33 = _abstract Equals
lemma-33 = _abstract Equals(Func, Func)
lemma-33 = _abstract Equals(Func)
lemma-33 = _abstract Func
lemma-33 = _abstract Func(Var, Func)
lemma-33 = _abstract Func(Func)
lemma-33 = _abstract Func(Var)
lemma-33 = _abstract Var
lemma-33 = _length 11
lemma-33 = _lengthDistinct 10
lemma-33 = _distinctRatio 0.9
lemma-33 = _popular nil
lemma-33 = _commutative False
lemma-33 = _associative False
lemma-33 = _distributive False
lemma-33 = _abstractLength 11
lemma-33 = _abstractLengthDistinct 8
lemma-33 = _innerFunctionApplication True
lemma-33 = _innerFunctionDepth 2
lemma-33 = _func match x
lemma-33 = _func match x(list, match y)
lemma-33 = _func match x(match y)
lemma-33 = _func match x(list)
lemma-33 = _func list
lemma-33 = _func match y
lemma-33 = _func match y(nil, drop)
lemma-33 = _func match y(drop)
lemma-33 = _func match y(nil)
lemma-33 = _func nil
lemma-33 = _func drop
lemma-33 = _func drop(Nat, list)
lemma-33 = _func drop(list)
lemma-33 = _func drop(Nat)
lemma-33 = _func Nat
lemma-33 = _func _abstract match Var
lemma-33 = _func _abstract match Var(Var, match Var)
lemma-33 = _func _abstract match Var(match Var)
lemma-33 = _func _abstract match Var(Var)
lemma-33 = _func _abstract Var
lemma-33 = _func _abstract match Var(Func, Func)
lemma-33 = _func _abstract match Var(Func)
lemma-33 = _func _abstract Func
lemma-33 = _func _abstract Func(Var, Var)
lemma-33 = _func _abstract Func(Var)
lemma-33 = _func _length 15
lemma-33 = _func _lengthDistinct 15
lemma-33 = _func _distinctRatio 1.0
lemma-33 = _func _popular Nat
lemma-33 = _func recursive True
lemma-33 = _func _abstractLength 16
lemma-33 = _func _abstractLengthDistinct 10
lemma-33 = _func _nArgs 2

lemma-34 = ==
lemma-34 = ==(drop, list)
lemma-34 = ==(list)
lemma-34 = ==(drop)
lemma-34 = drop
lemma-34 = drop(Z, list)
lemma-34 = drop(list)
lemma-34 = drop(Z)
lemma-34 = Z
lemma-34 = list
lemma-34 = _abstract Equals
lemma-34 = _abstract Equals(Func, Var)
lemma-34 = _abstract Equals(Var)
lemma-34 = _abstract Equals(Func)
lemma-34 = _abstract Func
lemma-34 = _abstract Func(Func, Var)
lemma-34 = _abstract Func(Var)
lemma-34 = _abstract Func(Func)
lemma-34 = _abstract Var
lemma-34 = _length 11
lemma-34 = _lengthDistinct 10
lemma-34 = _distinctRatio 0.9
lemma-34 = _popular list
lemma-34 = _commutative False
lemma-34 = _associative False
lemma-34 = _distributive False
lemma-34 = _abstractLength 11
lemma-34 = _abstractLengthDistinct 9
lemma-34 = _innerFunctionApplication True
lemma-34 = _innerFunctionDepth 2
lemma-34 = _func match x
lemma-34 = _func match x(list, match y)
lemma-34 = _func match x(match y)
lemma-34 = _func match x(list)
lemma-34 = _func list
lemma-34 = _func match y
lemma-34 = _func match y(nil, drop)
lemma-34 = _func match y(drop)
lemma-34 = _func match y(nil)
lemma-34 = _func nil
lemma-34 = _func drop
lemma-34 = _func drop(Nat, list)
lemma-34 = _func drop(list)
lemma-34 = _func drop(Nat)
lemma-34 = _func Nat
lemma-34 = _func _abstract match Var
lemma-34 = _func _abstract match Var(Var, match Var)
lemma-34 = _func _abstract match Var(match Var)
lemma-34 = _func _abstract match Var(Var)
lemma-34 = _func _abstract Var
lemma-34 = _func _abstract match Var(Func, Func)
lemma-34 = _func _abstract match Var(Func)
lemma-34 = _func _abstract Func
lemma-34 = _func _abstract Func(Var, Var)
lemma-34 = _func _abstract Func(Var)
lemma-34 = _func _length 15
lemma-34 = _func _lengthDistinct 15
lemma-34 = _func _distinctRatio 1.0
lemma-34 = _func _popular Nat
lemma-34 = _func recursive True
lemma-34 = _func _abstractLength 16
lemma-34 = _func _abstractLengthDistinct 10
lemma-34 = _func _nArgs 2

lemma-35 = ==
lemma-35 = ==(drop, drop)
lemma-35 = ==(drop)
lemma-35 = drop
lemma-35 = drop(Nat, drop)
lemma-35 = drop(drop)
lemma-35 = drop(Nat)
lemma-35 = Nat
lemma-35 = drop(Nat, list)
lemma-35 = drop(list)
lemma-35 = list
lemma-35 = _abstract Equals
lemma-35 = _abstract Equals(Func, Func)
lemma-35 = _abstract Equals(Func)
lemma-35 = _abstract Func
lemma-35 = _abstract Func(Var, Func)
lemma-35 = _abstract Func(Func)
lemma-35 = _abstract Func(Var)
lemma-35 = _abstract Var
lemma-35 = _abstract Func(Var, Var)
lemma-35 = _length 26
lemma-35 = _lengthDistinct 11
lemma-35 = _distinctRatio 0.4
lemma-35 = _popular Nat
lemma-35 = _commutative False
lemma-35 = _associative False
lemma-35 = _distributive False
lemma-35 = _abstractLength 26
lemma-35 = _abstractLengthDistinct 9
lemma-35 = _innerFunctionApplication True
lemma-35 = _innerFunctionDepth 2
lemma-35 = _func match x
lemma-35 = _func match x(list, match y)
lemma-35 = _func match x(match y)
lemma-35 = _func match x(list)
lemma-35 = _func list
lemma-35 = _func match y
lemma-35 = _func match y(nil, drop)
lemma-35 = _func match y(drop)
lemma-35 = _func match y(nil)
lemma-35 = _func nil
lemma-35 = _func drop
lemma-35 = _func drop(Nat, list)
lemma-35 = _func drop(list)
lemma-35 = _func drop(Nat)
lemma-35 = _func Nat
lemma-35 = _func _abstract match Var
lemma-35 = _func _abstract match Var(Var, match Var)
lemma-35 = _func _abstract match Var(match Var)
lemma-35 = _func _abstract match Var(Var)
lemma-35 = _func _abstract Var
lemma-35 = _func _abstract match Var(Func, Func)
lemma-35 = _func _abstract match Var(Func)
lemma-35 = _func _abstract Func
lemma-35 = _func _abstract Func(Var, Var)
lemma-35 = _func _abstract Func(Var)
lemma-35 = _func _length 15
lemma-35 = _func _lengthDistinct 15
lemma-35 = _func _distinctRatio 1.0
lemma-35 = _func _popular Nat
lemma-35 = _func recursive True
lemma-35 = _func _abstractLength 16
lemma-35 = _func _abstractLengthDistinct 10
lemma-35 = _func _nArgs 2

lemma-36 = ==
lemma-36 = ==(S, count)
lemma-36 = ==(count)
lemma-36 = ==(S)
lemma-36 = S
lemma-36 = S(count)
lemma-36 = count
lemma-36 = count(Nat, list)
lemma-36 = count(list)
lemma-36 = count(Nat)
lemma-36 = Nat
lemma-36 = list
lemma-36 = count(Nat, cons)
lemma-36 = count(cons)
lemma-36 = cons
lemma-36 = cons(Nat, list)
lemma-36 = cons(list)
lemma-36 = cons(Nat)
lemma-36 = _abstract Equals
lemma-36 = _abstract Equals(Func, Func)
lemma-36 = _abstract Equals(Func)
lemma-36 = _abstract Func
lemma-36 = _abstract Func(Func)
lemma-36 = _abstract Func(Var, Var)
lemma-36 = _abstract Func(Var)
lemma-36 = _abstract Var
lemma-36 = _abstract Func(Var, Func)
lemma-36 = _length 23
lemma-36 = _lengthDistinct 18
lemma-36 = _distinctRatio 0.8
lemma-36 = _popular Nat
lemma-36 = _commutative False
lemma-36 = _associative False
lemma-36 = _distributive False
lemma-36 = _abstractLength 23
lemma-36 = _abstractLengthDistinct 9
lemma-36 = _innerFunctionApplication True
lemma-36 = _innerFunctionDepth 2
lemma-36 = _func match y
lemma-36 = _func match y(Z, match equal)
lemma-36 = _func match y(match equal)
lemma-36 = _func match y(Z)
lemma-36 = _func Z
lemma-36 = _func match equal
lemma-36 = _func match equal(S, count)
lemma-36 = _func match equal(count)
lemma-36 = _func match equal(S)
lemma-36 = _func S
lemma-36 = _func S(count)
lemma-36 = _func count
lemma-36 = _func count(Nat, list)
lemma-36 = _func count(list)
lemma-36 = _func count(Nat)
lemma-36 = _func Nat
lemma-36 = _func list
lemma-36 = _func _abstract match Var
lemma-36 = _func _abstract match Var(Func, match Func)
lemma-36 = _func _abstract match Var(match Func)
lemma-36 = _func _abstract match Var(Func)
lemma-36 = _func _abstract Func
lemma-36 = _func _abstract match Func
lemma-36 = _func _abstract match Func(Func, Func)
lemma-36 = _func _abstract match Func(Func)
lemma-36 = _func _abstract Func(Func)
lemma-36 = _func _abstract Func(Var, Var)
lemma-36 = _func _abstract Func(Var)
lemma-36 = _func _abstract Var
lemma-36 = _func _length 17
lemma-36 = _func _lengthDistinct 17
lemma-36 = _func _distinctRatio 1.0
lemma-36 = _func _popular Nat
lemma-36 = _func recursive True
lemma-36 = _func _abstractLength 23
lemma-36 = _func _abstractLengthDistinct 12
lemma-36 = _func _nArgs 2

lemma-37 = ==
lemma-37 = ==(equal, True)
lemma-37 = ==(True)
lemma-37 = ==(equal)
lemma-37 = equal
lemma-37 = equal(Nat, Nat)
lemma-37 = equal(Nat)
lemma-37 = Nat
lemma-37 = True
lemma-37 = _abstract Equals
lemma-37 = _abstract Equals(Func, Const)
lemma-37 = _abstract Equals(Const)
lemma-37 = _abstract Equals(Func)
lemma-37 = _abstract Func
lemma-37 = _abstract Func(Var, Var)
lemma-37 = _abstract Func(Var)
lemma-37 = _abstract Var
lemma-37 = _abstract Const
lemma-37 = _length 11
lemma-37 = _lengthDistinct 9
lemma-37 = _distinctRatio 0.8
lemma-37 = _popular Nat
lemma-37 = _commutative False
lemma-37 = _associative False
lemma-37 = _distributive False
lemma-37 = _abstractLength 11
lemma-37 = _abstractLengthDistinct 9
lemma-37 = _innerFunctionApplication False
lemma-37 = _innerFunctionDepth 1
lemma-37 = _func match x
lemma-37 = _func match x(match y, match y)
lemma-37 = _func match x(match y)
lemma-37 = _func match y
lemma-37 = _func match y(True, False)
lemma-37 = _func match y(False)
lemma-37 = _func match y(True)
lemma-37 = _func True
lemma-37 = _func False
lemma-37 = _func match y(False, equal)
lemma-37 = _func match y(equal)
lemma-37 = _func equal
lemma-37 = _func equal(Nat, Nat)
lemma-37 = _func equal(Nat)
lemma-37 = _func Nat
lemma-37 = _func _abstract match Var
lemma-37 = _func _abstract match Var(match Var, match Var)
lemma-37 = _func _abstract match Var(match Var)
lemma-37 = _func _abstract match Var(Const, Const)
lemma-37 = _func _abstract match Var(Const)
lemma-37 = _func _abstract Const
lemma-37 = _func _abstract match Var(Const, Func)
lemma-37 = _func _abstract match Var(Func)
lemma-37 = _func _abstract Func
lemma-37 = _func _abstract Func(Var, Var)
lemma-37 = _func _abstract Func(Var)
lemma-37 = _func _abstract Var
lemma-37 = _func _length 15
lemma-37 = _func _lengthDistinct 15
lemma-37 = _func _distinctRatio 1.0
lemma-37 = _func _popular False
lemma-37 = _func recursive True
lemma-37 = _func _abstractLength 21
lemma-37 = _func _abstractLengthDistinct 12
lemma-37 = _func _nArgs 2

lemma-38 = ==
lemma-38 = ==(count, count)
lemma-38 = ==(count)
lemma-38 = count
lemma-38 = count(S, cons)
lemma-38 = count(cons)
lemma-38 = count(S)
lemma-38 = S
lemma-38 = S(Nat)
lemma-38 = Nat
lemma-38 = cons
lemma-38 = cons(Z, list)
lemma-38 = cons(list)
lemma-38 = cons(Z)
lemma-38 = Z
lemma-38 = list
lemma-38 = count(S, list)
lemma-38 = count(list)
lemma-38 = _abstract Equals
lemma-38 = _abstract Equals(Func, Func)
lemma-38 = _abstract Equals(Func)
lemma-38 = _abstract Func
lemma-38 = _abstract Func(Func, Func)
lemma-38 = _abstract Func(Func)
lemma-38 = _abstract Func(Var)
lemma-38 = _abstract Var
lemma-38 = _abstract Func(Func, Var)
lemma-38 = _length 25
lemma-38 = _lengthDistinct 18
lemma-38 = _distinctRatio 0.7
lemma-38 = _popular ==(count)
lemma-38 = _commutative False
lemma-38 = _associative False
lemma-38 = _distributive False
lemma-38 = _abstractLength 25
lemma-38 = _abstractLengthDistinct 9
lemma-38 = _innerFunctionApplication True
lemma-38 = _innerFunctionDepth 3
lemma-38 = _func match y
lemma-38 = _func match y(Z, match equal)
lemma-38 = _func match y(match equal)
lemma-38 = _func match y(Z)
lemma-38 = _func Z
lemma-38 = _func match equal
lemma-38 = _func match equal(S, count)
lemma-38 = _func match equal(count)
lemma-38 = _func match equal(S)
lemma-38 = _func S
lemma-38 = _func S(count)
lemma-38 = _func count
lemma-38 = _func count(Nat, list)
lemma-38 = _func count(list)
lemma-38 = _func count(Nat)
lemma-38 = _func Nat
lemma-38 = _func list
lemma-38 = _func _abstract match Var
lemma-38 = _func _abstract match Var(Func, match Func)
lemma-38 = _func _abstract match Var(match Func)
lemma-38 = _func _abstract match Var(Func)
lemma-38 = _func _abstract Func
lemma-38 = _func _abstract match Func
lemma-38 = _func _abstract match Func(Func, Func)
lemma-38 = _func _abstract match Func(Func)
lemma-38 = _func _abstract Func(Func)
lemma-38 = _func _abstract Func(Var, Var)
lemma-38 = _func _abstract Func(Var)
lemma-38 = _func _abstract Var
lemma-38 = _func _length 17
lemma-38 = _func _lengthDistinct 17
lemma-38 = _func _distinctRatio 1.0
lemma-38 = _func _popular Nat
lemma-38 = _func recursive True
lemma-38 = _func _abstractLength 23
lemma-38 = _func _abstractLengthDistinct 12
lemma-38 = _func _nArgs 2

lemma-39 = ==
lemma-39 = ==(equal, equal)
lemma-39 = ==(equal)
lemma-39 = equal
lemma-39 = equal(Nat, Nat)
lemma-39 = equal(Nat)
lemma-39 = Nat
lemma-39 = _abstract Equals
lemma-39 = _abstract Equals(Func, Func)
lemma-39 = _abstract Equals(Func)
lemma-39 = _abstract Func
lemma-39 = _abstract Func(Var, Var)
lemma-39 = _abstract Func(Var)
lemma-39 = _abstract Var
lemma-39 = _length 16
lemma-39 = _lengthDistinct 7
lemma-39 = _distinctRatio 0.4
lemma-39 = _popular Nat
lemma-39 = _commutative True
lemma-39 = _associative False
lemma-39 = _distributive False
lemma-39 = _abstractLength 16
lemma-39 = _abstractLengthDistinct 7
lemma-39 = _innerFunctionApplication False
lemma-39 = _innerFunctionDepth 1
lemma-39 = _func match x
lemma-39 = _func match x(match y, match y)
lemma-39 = _func match x(match y)
lemma-39 = _func match y
lemma-39 = _func match y(True, False)
lemma-39 = _func match y(False)
lemma-39 = _func match y(True)
lemma-39 = _func True
lemma-39 = _func False
lemma-39 = _func match y(False, equal)
lemma-39 = _func match y(equal)
lemma-39 = _func equal
lemma-39 = _func equal(Nat, Nat)
lemma-39 = _func equal(Nat)
lemma-39 = _func Nat
lemma-39 = _func _abstract match Var
lemma-39 = _func _abstract match Var(match Var, match Var)
lemma-39 = _func _abstract match Var(match Var)
lemma-39 = _func _abstract match Var(Const, Const)
lemma-39 = _func _abstract match Var(Const)
lemma-39 = _func _abstract Const
lemma-39 = _func _abstract match Var(Const, Func)
lemma-39 = _func _abstract match Var(Func)
lemma-39 = _func _abstract Func
lemma-39 = _func _abstract Func(Var, Var)
lemma-39 = _func _abstract Func(Var)
lemma-39 = _func _abstract Var
lemma-39 = _func _length 15
lemma-39 = _func _lengthDistinct 15
lemma-39 = _func _distinctRatio 1.0
lemma-39 = _func _popular False
lemma-39 = _func recursive True
lemma-39 = _func _abstractLength 21
lemma-39 = _func _abstractLengthDistinct 12
lemma-39 = _func _nArgs 2

lemma-40 = ==
lemma-40 = ==(equal, False)
lemma-40 = ==(False)
lemma-40 = ==(equal)
lemma-40 = equal
lemma-40 = equal(Nat, S)
lemma-40 = equal(S)
lemma-40 = equal(Nat)
lemma-40 = Nat
lemma-40 = S
lemma-40 = S(Nat)
lemma-40 = False
lemma-40 = _abstract Equals
lemma-40 = _abstract Equals(Func, Const)
lemma-40 = _abstract Equals(Const)
lemma-40 = _abstract Equals(Func)
lemma-40 = _abstract Func
lemma-40 = _abstract Func(Var, Func)
lemma-40 = _abstract Func(Func)
lemma-40 = _abstract Func(Var)
lemma-40 = _abstract Var
lemma-40 = _abstract Const
lemma-40 = _length 13
lemma-40 = _lengthDistinct 12
lemma-40 = _distinctRatio 0.9
lemma-40 = _popular Nat
lemma-40 = _commutative False
lemma-40 = _associative False
lemma-40 = _distributive False
lemma-40 = _abstractLength 13
lemma-40 = _abstractLengthDistinct 10
lemma-40 = _innerFunctionApplication True
lemma-40 = _innerFunctionDepth 2
lemma-40 = _func match x
lemma-40 = _func match x(match y, match y)
lemma-40 = _func match x(match y)
lemma-40 = _func match y
lemma-40 = _func match y(True, False)
lemma-40 = _func match y(False)
lemma-40 = _func match y(True)
lemma-40 = _func True
lemma-40 = _func False
lemma-40 = _func match y(False, equal)
lemma-40 = _func match y(equal)
lemma-40 = _func equal
lemma-40 = _func equal(Nat, Nat)
lemma-40 = _func equal(Nat)
lemma-40 = _func Nat
lemma-40 = _func _abstract match Var
lemma-40 = _func _abstract match Var(match Var, match Var)
lemma-40 = _func _abstract match Var(match Var)
lemma-40 = _func _abstract match Var(Const, Const)
lemma-40 = _func _abstract match Var(Const)
lemma-40 = _func _abstract Const
lemma-40 = _func _abstract match Var(Const, Func)
lemma-40 = _func _abstract match Var(Func)
lemma-40 = _func _abstract Func
lemma-40 = _func _abstract Func(Var, Var)
lemma-40 = _func _abstract Func(Var)
lemma-40 = _func _abstract Var
lemma-40 = _func _length 15
lemma-40 = _func _lengthDistinct 15
lemma-40 = _func _distinctRatio 1.0
lemma-40 = _func _popular False
lemma-40 = _func recursive True
lemma-40 = _func _abstractLength 21
lemma-40 = _func _abstractLengthDistinct 12
lemma-40 = _func _nArgs 2

lemma-41 = ==
lemma-41 = ==(equal, False)
lemma-41 = ==(False)
lemma-41 = ==(equal)
lemma-41 = equal
lemma-41 = equal(Z, S)
lemma-41 = equal(S)
lemma-41 = equal(Z)
lemma-41 = Z
lemma-41 = S
lemma-41 = S(Nat)
lemma-41 = Nat
lemma-41 = False
lemma-41 = _abstract Equals
lemma-41 = _abstract Equals(Func, Const)
lemma-41 = _abstract Equals(Const)
lemma-41 = _abstract Equals(Func)
lemma-41 = _abstract Func
lemma-41 = _abstract Func(Func, Func)
lemma-41 = _abstract Func(Func)
lemma-41 = _abstract Func(Var)
lemma-41 = _abstract Var
lemma-41 = _abstract Const
lemma-41 = _length 13
lemma-41 = _lengthDistinct 13
lemma-41 = _distinctRatio 1.0
lemma-41 = _popular ==
lemma-41 = _commutative False
lemma-41 = _associative False
lemma-41 = _distributive False
lemma-41 = _abstractLength 13
lemma-41 = _abstractLengthDistinct 10
lemma-41 = _innerFunctionApplication True
lemma-41 = _innerFunctionDepth 2
lemma-41 = _func match x
lemma-41 = _func match x(match y, match y)
lemma-41 = _func match x(match y)
lemma-41 = _func match y
lemma-41 = _func match y(True, False)
lemma-41 = _func match y(False)
lemma-41 = _func match y(True)
lemma-41 = _func True
lemma-41 = _func False
lemma-41 = _func match y(False, equal)
lemma-41 = _func match y(equal)
lemma-41 = _func equal
lemma-41 = _func equal(Nat, Nat)
lemma-41 = _func equal(Nat)
lemma-41 = _func Nat
lemma-41 = _func _abstract match Var
lemma-41 = _func _abstract match Var(match Var, match Var)
lemma-41 = _func _abstract match Var(match Var)
lemma-41 = _func _abstract match Var(Const, Const)
lemma-41 = _func _abstract match Var(Const)
lemma-41 = _func _abstract Const
lemma-41 = _func _abstract match Var(Const, Func)
lemma-41 = _func _abstract match Var(Func)
lemma-41 = _func _abstract Func
lemma-41 = _func _abstract Func(Var, Var)
lemma-41 = _func _abstract Func(Var)
lemma-41 = _func _abstract Var
lemma-41 = _func _length 15
lemma-41 = _func _lengthDistinct 15
lemma-41 = _func _distinctRatio 1.0
lemma-41 = _func _popular False
lemma-41 = _func recursive True
lemma-41 = _func _abstractLength 21
lemma-41 = _func _abstractLengthDistinct 12
lemma-41 = _func _nArgs 2

lemma-42 = ==
lemma-42 = ==(equal, equal)
lemma-42 = ==(equal)
lemma-42 = equal
lemma-42 = equal(S, S)
lemma-42 = equal(S)
lemma-42 = S
lemma-42 = S(Nat)
lemma-42 = Nat
lemma-42 = equal(Nat, Nat)
lemma-42 = equal(Nat)
lemma-42 = _abstract Equals
lemma-42 = _abstract Equals(Func, Func)
lemma-42 = _abstract Equals(Func)
lemma-42 = _abstract Func
lemma-42 = _abstract Func(Func, Func)
lemma-42 = _abstract Func(Func)
lemma-42 = _abstract Func(Var)
lemma-42 = _abstract Var
lemma-42 = _abstract Func(Var, Var)
lemma-42 = _length 20
lemma-42 = _lengthDistinct 11
lemma-42 = _distinctRatio 0.6
lemma-42 = _popular Nat
lemma-42 = _commutative False
lemma-42 = _associative False
lemma-42 = _distributive False
lemma-42 = _abstractLength 20
lemma-42 = _abstractLengthDistinct 9
lemma-42 = _innerFunctionApplication True
lemma-42 = _innerFunctionDepth 2
lemma-42 = _func match x
lemma-42 = _func match x(match y, match y)
lemma-42 = _func match x(match y)
lemma-42 = _func match y
lemma-42 = _func match y(True, False)
lemma-42 = _func match y(False)
lemma-42 = _func match y(True)
lemma-42 = _func True
lemma-42 = _func False
lemma-42 = _func match y(False, equal)
lemma-42 = _func match y(equal)
lemma-42 = _func equal
lemma-42 = _func equal(Nat, Nat)
lemma-42 = _func equal(Nat)
lemma-42 = _func Nat
lemma-42 = _func _abstract match Var
lemma-42 = _func _abstract match Var(match Var, match Var)
lemma-42 = _func _abstract match Var(match Var)
lemma-42 = _func _abstract match Var(Const, Const)
lemma-42 = _func _abstract match Var(Const)
lemma-42 = _func _abstract Const
lemma-42 = _func _abstract match Var(Const, Func)
lemma-42 = _func _abstract match Var(Func)
lemma-42 = _func _abstract Func
lemma-42 = _func _abstract Func(Var, Var)
lemma-42 = _func _abstract Func(Var)
lemma-42 = _func _abstract Var
lemma-42 = _func _length 15
lemma-42 = _func _lengthDistinct 15
lemma-42 = _func _distinctRatio 1.0
lemma-42 = _func _popular False
lemma-42 = _func recursive True
lemma-42 = _func _abstractLength 21
lemma-42 = _func _abstractLengthDistinct 12
lemma-42 = _func _nArgs 2

lemma-43 = ==
lemma-43 = ==(count, Z)
lemma-43 = ==(Z)
lemma-43 = ==(count)
lemma-43 = count
lemma-43 = count(Nat, nil)
lemma-43 = count(nil)
lemma-43 = count(Nat)
lemma-43 = Nat
lemma-43 = nil
lemma-43 = Z
lemma-43 = _abstract Equals
lemma-43 = _abstract Equals(Func, Func)
lemma-43 = _abstract Equals(Func)
lemma-43 = _abstract Func
lemma-43 = _abstract Func(Var, Func)
lemma-43 = _abstract Func(Func)
lemma-43 = _abstract Func(Var)
lemma-43 = _abstract Var
lemma-43 = _length 11
lemma-43 = _lengthDistinct 11
lemma-43 = _distinctRatio 1.0
lemma-43 = _popular ==
lemma-43 = _commutative False
lemma-43 = _associative False
lemma-43 = _distributive False
lemma-43 = _abstractLength 11
lemma-43 = _abstractLengthDistinct 8
lemma-43 = _innerFunctionApplication True
lemma-43 = _innerFunctionDepth 2
lemma-43 = _func match y
lemma-43 = _func match y(Z, match equal)
lemma-43 = _func match y(match equal)
lemma-43 = _func match y(Z)
lemma-43 = _func Z
lemma-43 = _func match equal
lemma-43 = _func match equal(S, count)
lemma-43 = _func match equal(count)
lemma-43 = _func match equal(S)
lemma-43 = _func S
lemma-43 = _func S(count)
lemma-43 = _func count
lemma-43 = _func count(Nat, list)
lemma-43 = _func count(list)
lemma-43 = _func count(Nat)
lemma-43 = _func Nat
lemma-43 = _func list
lemma-43 = _func _abstract match Var
lemma-43 = _func _abstract match Var(Func, match Func)
lemma-43 = _func _abstract match Var(match Func)
lemma-43 = _func _abstract match Var(Func)
lemma-43 = _func _abstract Func
lemma-43 = _func _abstract match Func
lemma-43 = _func _abstract match Func(Func, Func)
lemma-43 = _func _abstract match Func(Func)
lemma-43 = _func _abstract Func(Func)
lemma-43 = _func _abstract Func(Var, Var)
lemma-43 = _func _abstract Func(Var)
lemma-43 = _func _abstract Var
lemma-43 = _func _length 17
lemma-43 = _func _lengthDistinct 17
lemma-43 = _func _distinctRatio 1.0
lemma-43 = _func _popular Nat
lemma-43 = _func recursive True
lemma-43 = _func _abstractLength 23
lemma-43 = _func _abstractLengthDistinct 12
lemma-43 = _func _nArgs 2

lemma-44 = ==
lemma-44 = ==(count, S)
lemma-44 = ==(S)
lemma-44 = ==(count)
lemma-44 = count
lemma-44 = count(Nat, cons)
lemma-44 = count(cons)
lemma-44 = count(Nat)
lemma-44 = Nat
lemma-44 = cons
lemma-44 = cons(Nat, list)
lemma-44 = cons(list)
lemma-44 = cons(Nat)
lemma-44 = list
lemma-44 = S
lemma-44 = S(count)
lemma-44 = count(Nat, list)
lemma-44 = count(list)
lemma-44 = _abstract Equals
lemma-44 = _abstract Equals(Func, Func)
lemma-44 = _abstract Equals(Func)
lemma-44 = _abstract Func
lemma-44 = _abstract Func(Var, Func)
lemma-44 = _abstract Func(Func)
lemma-44 = _abstract Func(Var)
lemma-44 = _abstract Var
lemma-44 = _abstract Func(Var, Var)
lemma-44 = _length 23
lemma-44 = _lengthDistinct 18
lemma-44 = _distinctRatio 0.8
lemma-44 = _popular Nat
lemma-44 = _commutative False
lemma-44 = _associative False
lemma-44 = _distributive False
lemma-44 = _abstractLength 23
lemma-44 = _abstractLengthDistinct 9
lemma-44 = _innerFunctionApplication True
lemma-44 = _innerFunctionDepth 2
lemma-44 = _func match y
lemma-44 = _func match y(Z, match equal)
lemma-44 = _func match y(match equal)
lemma-44 = _func match y(Z)
lemma-44 = _func Z
lemma-44 = _func match equal
lemma-44 = _func match equal(S, count)
lemma-44 = _func match equal(count)
lemma-44 = _func match equal(S)
lemma-44 = _func S
lemma-44 = _func S(count)
lemma-44 = _func count
lemma-44 = _func count(Nat, list)
lemma-44 = _func count(list)
lemma-44 = _func count(Nat)
lemma-44 = _func Nat
lemma-44 = _func list
lemma-44 = _func _abstract match Var
lemma-44 = _func _abstract match Var(Func, match Func)
lemma-44 = _func _abstract match Var(match Func)
lemma-44 = _func _abstract match Var(Func)
lemma-44 = _func _abstract Func
lemma-44 = _func _abstract match Func
lemma-44 = _func _abstract match Func(Func, Func)
lemma-44 = _func _abstract match Func(Func)
lemma-44 = _func _abstract Func(Func)
lemma-44 = _func _abstract Func(Var, Var)
lemma-44 = _func _abstract Func(Var)
lemma-44 = _func _abstract Var
lemma-44 = _func _length 17
lemma-44 = _func _lengthDistinct 17
lemma-44 = _func _distinctRatio 1.0
lemma-44 = _func _popular Nat
lemma-44 = _func recursive True
lemma-44 = _func _abstractLength 23
lemma-44 = _func _abstractLengthDistinct 12
lemma-44 = _func _nArgs 2

lemma-45 = ==
lemma-45 = ==(count, count)
lemma-45 = ==(count)
lemma-45 = count
lemma-45 = count(Nat, cons)
lemma-45 = count(cons)
lemma-45 = count(Nat)
lemma-45 = Nat
lemma-45 = cons
lemma-45 = cons(Nat, nil)
lemma-45 = cons(nil)
lemma-45 = cons(Nat)
lemma-45 = nil
lemma-45 = _abstract Equals
lemma-45 = _abstract Equals(Func, Func)
lemma-45 = _abstract Equals(Func)
lemma-45 = _abstract Func
lemma-45 = _abstract Func(Var, Func)
lemma-45 = _abstract Func(Func)
lemma-45 = _abstract Func(Var)
lemma-45 = _abstract Var
lemma-45 = _length 26
lemma-45 = _lengthDistinct 13
lemma-45 = _distinctRatio 0.5
lemma-45 = _popular Nat
lemma-45 = _commutative False
lemma-45 = _associative False
lemma-45 = _distributive False
lemma-45 = _abstractLength 26
lemma-45 = _abstractLengthDistinct 8
lemma-45 = _innerFunctionApplication True
lemma-45 = _innerFunctionDepth 3
lemma-45 = _func match y
lemma-45 = _func match y(Z, match equal)
lemma-45 = _func match y(match equal)
lemma-45 = _func match y(Z)
lemma-45 = _func Z
lemma-45 = _func match equal
lemma-45 = _func match equal(S, count)
lemma-45 = _func match equal(count)
lemma-45 = _func match equal(S)
lemma-45 = _func S
lemma-45 = _func S(count)
lemma-45 = _func count
lemma-45 = _func count(Nat, list)
lemma-45 = _func count(list)
lemma-45 = _func count(Nat)
lemma-45 = _func Nat
lemma-45 = _func list
lemma-45 = _func _abstract match Var
lemma-45 = _func _abstract match Var(Func, match Func)
lemma-45 = _func _abstract match Var(match Func)
lemma-45 = _func _abstract match Var(Func)
lemma-45 = _func _abstract Func
lemma-45 = _func _abstract match Func
lemma-45 = _func _abstract match Func(Func, Func)
lemma-45 = _func _abstract match Func(Func)
lemma-45 = _func _abstract Func(Func)
lemma-45 = _func _abstract Func(Var, Var)
lemma-45 = _func _abstract Func(Var)
lemma-45 = _func _abstract Var
lemma-45 = _func _length 17
lemma-45 = _func _lengthDistinct 17
lemma-45 = _func _distinctRatio 1.0
lemma-45 = _func _popular Nat
lemma-45 = _func recursive True
lemma-45 = _func _abstractLength 23
lemma-45 = _func _abstractLengthDistinct 12
lemma-45 = _func _nArgs 2

lemma-46 = ==
lemma-46 = ==(count, count)
lemma-46 = ==(count)
lemma-46 = count
lemma-46 = count(S, cons)
lemma-46 = count(cons)
lemma-46 = count(S)
lemma-46 = S
lemma-46 = S(Nat)
lemma-46 = Nat
lemma-46 = cons
lemma-46 = cons(Nat, list)
lemma-46 = cons(list)
lemma-46 = cons(Nat)
lemma-46 = list
lemma-46 = count(S, list)
lemma-46 = count(list)
lemma-46 = _abstract Equals
lemma-46 = _abstract Equals(Func, Func)
lemma-46 = _abstract Equals(Func)
lemma-46 = _abstract Func
lemma-46 = _abstract Func(Func, Func)
lemma-46 = _abstract Func(Func)
lemma-46 = _abstract Func(Var)
lemma-46 = _abstract Var
lemma-46 = _abstract Func(Var, Var)
lemma-46 = _abstract Func(Func, Var)
lemma-46 = _length 25
lemma-46 = _lengthDistinct 17
lemma-46 = _distinctRatio 0.7
lemma-46 = _popular Nat
lemma-46 = _commutative False
lemma-46 = _associative False
lemma-46 = _distributive False
lemma-46 = _abstractLength 25
lemma-46 = _abstractLengthDistinct 10
lemma-46 = _innerFunctionApplication True
lemma-46 = _innerFunctionDepth 2
lemma-46 = _func match y
lemma-46 = _func match y(Z, match equal)
lemma-46 = _func match y(match equal)
lemma-46 = _func match y(Z)
lemma-46 = _func Z
lemma-46 = _func match equal
lemma-46 = _func match equal(S, count)
lemma-46 = _func match equal(count)
lemma-46 = _func match equal(S)
lemma-46 = _func S
lemma-46 = _func S(count)
lemma-46 = _func count
lemma-46 = _func count(Nat, list)
lemma-46 = _func count(list)
lemma-46 = _func count(Nat)
lemma-46 = _func Nat
lemma-46 = _func list
lemma-46 = _func _abstract match Var
lemma-46 = _func _abstract match Var(Func, match Func)
lemma-46 = _func _abstract match Var(match Func)
lemma-46 = _func _abstract match Var(Func)
lemma-46 = _func _abstract Func
lemma-46 = _func _abstract match Func
lemma-46 = _func _abstract match Func(Func, Func)
lemma-46 = _func _abstract match Func(Func)
lemma-46 = _func _abstract Func(Func)
lemma-46 = _func _abstract Func(Var, Var)
lemma-46 = _func _abstract Func(Var)
lemma-46 = _func _abstract Var
lemma-46 = _func _length 17
lemma-46 = _func _lengthDistinct 17
lemma-46 = _func _distinctRatio 1.0
lemma-46 = _func _popular Nat
lemma-46 = _func recursive True
lemma-46 = _func _abstractLength 23
lemma-46 = _func _abstractLengthDistinct 12
lemma-46 = _func _nArgs 2

lemma-47 = =>
lemma-47 = =>(==, ==)
lemma-47 = =>(==)
lemma-47 = ==
lemma-47 = ==(Nat, Nat)
lemma-47 = ==(Nat)
lemma-47 = Nat
lemma-47 = ==(S, count)
lemma-47 = ==(count)
lemma-47 = ==(S)
lemma-47 = S
lemma-47 = S(count)
lemma-47 = count
lemma-47 = count(Nat, list)
lemma-47 = count(list)
lemma-47 = count(Nat)
lemma-47 = list
lemma-47 = count(Nat, cons)
lemma-47 = count(cons)
lemma-47 = cons
lemma-47 = cons(Nat, list)
lemma-47 = cons(list)
lemma-47 = cons(Nat)
lemma-47 = _abstract =>
lemma-47 = _abstract =>(Equals, Equals)
lemma-47 = _abstract =>(Equals)
lemma-47 = _abstract Equals
lemma-47 = _abstract Equals(Var, Var)
lemma-47 = _abstract Equals(Var)
lemma-47 = _abstract Var
lemma-47 = _abstract Equals(Func, Func)
lemma-47 = _abstract Equals(Func)
lemma-47 = _abstract Func
lemma-47 = _abstract Func(Func)
lemma-47 = _abstract Func(Var, Var)
lemma-47 = _abstract Func(Var)
lemma-47 = _abstract Func(Var, Func)
lemma-47 = _length 33
lemma-47 = _lengthDistinct 23
lemma-47 = _distinctRatio 0.7
lemma-47 = _popular Nat
lemma-47 = _commutative False
lemma-47 = _associative False
lemma-47 = _distributive False
lemma-47 = _abstractLength 33
lemma-47 = _abstractLengthDistinct 14
lemma-47 = _innerFunctionApplication False
lemma-47 = _innerFunctionDepth 0
lemma-47 = _func match y
lemma-47 = _func match y(Z, match equal)
lemma-47 = _func match y(match equal)
lemma-47 = _func match y(Z)
lemma-47 = _func Z
lemma-47 = _func match equal
lemma-47 = _func match equal(S, count)
lemma-47 = _func match equal(count)
lemma-47 = _func match equal(S)
lemma-47 = _func S
lemma-47 = _func S(count)
lemma-47 = _func count
lemma-47 = _func count(Nat, list)
lemma-47 = _func count(list)
lemma-47 = _func count(Nat)
lemma-47 = _func Nat
lemma-47 = _func list
lemma-47 = _func _abstract match Var
lemma-47 = _func _abstract match Var(Func, match Func)
lemma-47 = _func _abstract match Var(match Func)
lemma-47 = _func _abstract match Var(Func)
lemma-47 = _func _abstract Func
lemma-47 = _func _abstract match Func
lemma-47 = _func _abstract match Func(Func, Func)
lemma-47 = _func _abstract match Func(Func)
lemma-47 = _func _abstract Func(Func)
lemma-47 = _func _abstract Func(Var, Var)
lemma-47 = _func _abstract Func(Var)
lemma-47 = _func _abstract Var
lemma-47 = _func _length 17
lemma-47 = _func _lengthDistinct 17
lemma-47 = _func _distinctRatio 1.0
lemma-47 = _func _popular Nat
lemma-47 = _func recursive True
lemma-47 = _func _abstractLength 23
lemma-47 = _func _abstractLengthDistinct 12
lemma-47 = _func _nArgs 2

lemma-48 = ==
lemma-48 = ==(drop, list)
lemma-48 = ==(list)
lemma-48 = ==(drop)
lemma-48 = drop
lemma-48 = drop(Z, list)
lemma-48 = drop(list)
lemma-48 = drop(Z)
lemma-48 = Z
lemma-48 = list
lemma-48 = _abstract Equals
lemma-48 = _abstract Equals(Func, Var)
lemma-48 = _abstract Equals(Var)
lemma-48 = _abstract Equals(Func)
lemma-48 = _abstract Func
lemma-48 = _abstract Func(Func, Var)
lemma-48 = _abstract Func(Var)
lemma-48 = _abstract Func(Func)
lemma-48 = _abstract Var
lemma-48 = _length 11
lemma-48 = _lengthDistinct 10
lemma-48 = _distinctRatio 0.9
lemma-48 = _popular list
lemma-48 = _commutative False
lemma-48 = _associative False
lemma-48 = _distributive False
lemma-48 = _abstractLength 11
lemma-48 = _abstractLengthDistinct 9
lemma-48 = _innerFunctionApplication True
lemma-48 = _innerFunctionDepth 2
lemma-48 = _func match x
lemma-48 = _func match x(list, match y)
lemma-48 = _func match x(match y)
lemma-48 = _func match x(list)
lemma-48 = _func list
lemma-48 = _func match y
lemma-48 = _func match y(nil, drop)
lemma-48 = _func match y(drop)
lemma-48 = _func match y(nil)
lemma-48 = _func nil
lemma-48 = _func drop
lemma-48 = _func drop(Nat, list)
lemma-48 = _func drop(list)
lemma-48 = _func drop(Nat)
lemma-48 = _func Nat
lemma-48 = _func _abstract match Var
lemma-48 = _func _abstract match Var(Var, match Var)
lemma-48 = _func _abstract match Var(match Var)
lemma-48 = _func _abstract match Var(Var)
lemma-48 = _func _abstract Var
lemma-48 = _func _abstract match Var(Func, Func)
lemma-48 = _func _abstract match Var(Func)
lemma-48 = _func _abstract Func
lemma-48 = _func _abstract Func(Var, Var)
lemma-48 = _func _abstract Func(Var)
lemma-48 = _func _length 15
lemma-48 = _func _lengthDistinct 15
lemma-48 = _func _distinctRatio 1.0
lemma-48 = _func _popular Nat
lemma-48 = _func recursive True
lemma-48 = _func _abstractLength 16
lemma-48 = _func _abstractLengthDistinct 10
lemma-48 = _func _nArgs 2

lemma-49 = ==
lemma-49 = ==(drop, drop)
lemma-49 = ==(drop)
lemma-49 = drop
lemma-49 = drop(S, cons)
lemma-49 = drop(cons)
lemma-49 = drop(S)
lemma-49 = S
lemma-49 = S(Nat)
lemma-49 = Nat
lemma-49 = cons
lemma-49 = cons(anyType, list)
lemma-49 = cons(list)
lemma-49 = cons(anyType)
lemma-49 = anyType
lemma-49 = list
lemma-49 = drop(Nat, list)
lemma-49 = drop(list)
lemma-49 = drop(Nat)
lemma-49 = _abstract Equals
lemma-49 = _abstract Equals(Func, Func)
lemma-49 = _abstract Equals(Func)
lemma-49 = _abstract Func
lemma-49 = _abstract Func(Func, Func)
lemma-49 = _abstract Func(Func)
lemma-49 = _abstract Func(Var)
lemma-49 = _abstract Var
lemma-49 = _abstract Func(Var, Var)
lemma-49 = _length 23
lemma-49 = _lengthDistinct 19
lemma-49 = _distinctRatio 0.8
lemma-49 = _popular ==(drop)
lemma-49 = _commutative False
lemma-49 = _associative False
lemma-49 = _distributive False
lemma-49 = _abstractLength 23
lemma-49 = _abstractLengthDistinct 9
lemma-49 = _innerFunctionApplication True
lemma-49 = _innerFunctionDepth 2
lemma-49 = _func match x
lemma-49 = _func match x(list, match y)
lemma-49 = _func match x(match y)
lemma-49 = _func match x(list)
lemma-49 = _func list
lemma-49 = _func match y
lemma-49 = _func match y(nil, drop)
lemma-49 = _func match y(drop)
lemma-49 = _func match y(nil)
lemma-49 = _func nil
lemma-49 = _func drop
lemma-49 = _func drop(Nat, list)
lemma-49 = _func drop(list)
lemma-49 = _func drop(Nat)
lemma-49 = _func Nat
lemma-49 = _func _abstract match Var
lemma-49 = _func _abstract match Var(Var, match Var)
lemma-49 = _func _abstract match Var(match Var)
lemma-49 = _func _abstract match Var(Var)
lemma-49 = _func _abstract Var
lemma-49 = _func _abstract match Var(Func, Func)
lemma-49 = _func _abstract match Var(Func)
lemma-49 = _func _abstract Func
lemma-49 = _func _abstract Func(Var, Var)
lemma-49 = _func _abstract Func(Var)
lemma-49 = _func _length 15
lemma-49 = _func _lengthDistinct 15
lemma-49 = _func _distinctRatio 1.0
lemma-49 = _func _popular Nat
lemma-49 = _func recursive True
lemma-49 = _func _abstractLength 16
lemma-49 = _func _abstractLengthDistinct 10
lemma-49 = _func _nArgs 2

lemma-50 = =>
lemma-50 = =>(==, ==)
lemma-50 = =>(==)
lemma-50 = ==
lemma-50 = ==(list, nil)
lemma-50 = ==(nil)
lemma-50 = ==(list)
lemma-50 = list
lemma-50 = nil
lemma-50 = ==(last, Nat)
lemma-50 = ==(Nat)
lemma-50 = ==(last)
lemma-50 = last
lemma-50 = last(cons)
lemma-50 = cons
lemma-50 = cons(Nat, list)
lemma-50 = cons(list)
lemma-50 = cons(Nat)
lemma-50 = Nat
lemma-50 = _abstract =>
lemma-50 = _abstract =>(Equals, Equals)
lemma-50 = _abstract =>(Equals)
lemma-50 = _abstract Equals
lemma-50 = _abstract Equals(Var, Func)
lemma-50 = _abstract Equals(Func)
lemma-50 = _abstract Equals(Var)
lemma-50 = _abstract Var
lemma-50 = _abstract Func
lemma-50 = _abstract Equals(Func, Var)
lemma-50 = _abstract Func(Func)
lemma-50 = _abstract Func(Var, Var)
lemma-50 = _abstract Func(Var)
lemma-50 = _length 23
lemma-50 = _lengthDistinct 19
lemma-50 = _distinctRatio 0.8
lemma-50 = _popular ==
lemma-50 = _commutative False
lemma-50 = _associative False
lemma-50 = _distributive False
lemma-50 = _abstractLength 23
lemma-50 = _abstractLengthDistinct 13
lemma-50 = _innerFunctionApplication False
lemma-50 = _innerFunctionDepth 0
lemma-50 = _func match x
lemma-50 = _func match x(Z, match z)
lemma-50 = _func match x(match z)
lemma-50 = _func match x(Z)
lemma-50 = _func Z
lemma-50 = _func match z
lemma-50 = _func match z(Nat, last)
lemma-50 = _func match z(last)
lemma-50 = _func match z(Nat)
lemma-50 = _func Nat
lemma-50 = _func last
lemma-50 = _func last(cons)
lemma-50 = _func cons
lemma-50 = _func cons(Nat, list)
lemma-50 = _func cons(list)
lemma-50 = _func cons(Nat)
lemma-50 = _func list
lemma-50 = _func _abstract match Var
lemma-50 = _func _abstract match Var(Func, match Var)
lemma-50 = _func _abstract match Var(match Var)
lemma-50 = _func _abstract match Var(Func)
lemma-50 = _func _abstract Func
lemma-50 = _func _abstract match Var(Var, Func)
lemma-50 = _func _abstract match Var(Var)
lemma-50 = _func _abstract Var
lemma-50 = _func _abstract Func(Func)
lemma-50 = _func _abstract Func(Var, Var)
lemma-50 = _func _abstract Func(Var)
lemma-50 = _func _length 17
lemma-50 = _func _lengthDistinct 17
lemma-50 = _func _distinctRatio 1.0
lemma-50 = _func _popular Nat
lemma-50 = _func recursive True
lemma-50 = _func _abstractLength 18
lemma-50 = _func _abstractLengthDistinct 11
lemma-50 = _func _nArgs 1

lemma-51 = ==
lemma-51 = ==(last, Z)
lemma-51 = ==(Z)
lemma-51 = ==(last)
lemma-51 = last
lemma-51 = last(nil)
lemma-51 = nil
lemma-51 = Z
lemma-51 = _abstract Equals
lemma-51 = _abstract Equals(Func, Func)
lemma-51 = _abstract Equals(Func)
lemma-51 = _abstract Func
lemma-51 = _abstract Func(Func)
lemma-51 = _length 8
lemma-51 = _lengthDistinct 8
lemma-51 = _distinctRatio 1.0
lemma-51 = _popular ==
lemma-51 = _commutative False
lemma-51 = _associative False
lemma-51 = _distributive False
lemma-51 = _abstractLength 8
lemma-51 = _abstractLengthDistinct 5
lemma-51 = _innerFunctionApplication False
lemma-51 = _innerFunctionDepth 0
lemma-51 = _func match x
lemma-51 = _func match x(Z, match z)
lemma-51 = _func match x(match z)
lemma-51 = _func match x(Z)
lemma-51 = _func Z
lemma-51 = _func match z
lemma-51 = _func match z(Nat, last)
lemma-51 = _func match z(last)
lemma-51 = _func match z(Nat)
lemma-51 = _func Nat
lemma-51 = _func last
lemma-51 = _func last(cons)
lemma-51 = _func cons
lemma-51 = _func cons(Nat, list)
lemma-51 = _func cons(list)
lemma-51 = _func cons(Nat)
lemma-51 = _func list
lemma-51 = _func _abstract match Var
lemma-51 = _func _abstract match Var(Func, match Var)
lemma-51 = _func _abstract match Var(match Var)
lemma-51 = _func _abstract match Var(Func)
lemma-51 = _func _abstract Func
lemma-51 = _func _abstract match Var(Var, Func)
lemma-51 = _func _abstract match Var(Var)
lemma-51 = _func _abstract Var
lemma-51 = _func _abstract Func(Func)
lemma-51 = _func _abstract Func(Var, Var)
lemma-51 = _func _abstract Func(Var)
lemma-51 = _func _length 17
lemma-51 = _func _lengthDistinct 17
lemma-51 = _func _distinctRatio 1.0
lemma-51 = _func _popular Nat
lemma-51 = _func recursive True
lemma-51 = _func _abstractLength 18
lemma-51 = _func _abstractLengthDistinct 11
lemma-51 = _func _nArgs 1

lemma-52 = ==
lemma-52 = ==(last, Nat)
lemma-52 = ==(Nat)
lemma-52 = ==(last)
lemma-52 = last
lemma-52 = last(cons)
lemma-52 = cons
lemma-52 = cons(Nat, nil)
lemma-52 = cons(nil)
lemma-52 = cons(Nat)
lemma-52 = Nat
lemma-52 = nil
lemma-52 = _abstract Equals
lemma-52 = _abstract Equals(Func, Var)
lemma-52 = _abstract Equals(Var)
lemma-52 = _abstract Equals(Func)
lemma-52 = _abstract Func
lemma-52 = _abstract Func(Func)
lemma-52 = _abstract Func(Var, Func)
lemma-52 = _abstract Func(Var)
lemma-52 = _abstract Var
lemma-52 = _length 13
lemma-52 = _lengthDistinct 12
lemma-52 = _distinctRatio 0.9
lemma-52 = _popular Nat
lemma-52 = _commutative False
lemma-52 = _associative False
lemma-52 = _distributive False
lemma-52 = _abstractLength 13
lemma-52 = _abstractLengthDistinct 9
lemma-52 = _innerFunctionApplication True
lemma-52 = _innerFunctionDepth 3
lemma-52 = _func match x
lemma-52 = _func match x(Z, match z)
lemma-52 = _func match x(match z)
lemma-52 = _func match x(Z)
lemma-52 = _func Z
lemma-52 = _func match z
lemma-52 = _func match z(Nat, last)
lemma-52 = _func match z(last)
lemma-52 = _func match z(Nat)
lemma-52 = _func Nat
lemma-52 = _func last
lemma-52 = _func last(cons)
lemma-52 = _func cons
lemma-52 = _func cons(Nat, list)
lemma-52 = _func cons(list)
lemma-52 = _func cons(Nat)
lemma-52 = _func list
lemma-52 = _func _abstract match Var
lemma-52 = _func _abstract match Var(Func, match Var)
lemma-52 = _func _abstract match Var(match Var)
lemma-52 = _func _abstract match Var(Func)
lemma-52 = _func _abstract Func
lemma-52 = _func _abstract match Var(Var, Func)
lemma-52 = _func _abstract match Var(Var)
lemma-52 = _func _abstract Var
lemma-52 = _func _abstract Func(Func)
lemma-52 = _func _abstract Func(Var, Var)
lemma-52 = _func _abstract Func(Var)
lemma-52 = _func _length 17
lemma-52 = _func _lengthDistinct 17
lemma-52 = _func _distinctRatio 1.0
lemma-52 = _func _popular Nat
lemma-52 = _func recursive True
lemma-52 = _func _abstractLength 18
lemma-52 = _func _abstractLengthDistinct 11
lemma-52 = _func _nArgs 1

lemma-53 = ==
lemma-53 = ==(last, last)
lemma-53 = ==(last)
lemma-53 = last
lemma-53 = last(cons)
lemma-53 = cons
lemma-53 = cons(Z, list)
lemma-53 = cons(list)
lemma-53 = cons(Z)
lemma-53 = Z
lemma-53 = list
lemma-53 = last(list)
lemma-53 = _abstract Equals
lemma-53 = _abstract Equals(Func, Func)
lemma-53 = _abstract Equals(Func)
lemma-53 = _abstract Func
lemma-53 = _abstract Func(Func)
lemma-53 = _abstract Func(Func, Var)
lemma-53 = _abstract Func(Var)
lemma-53 = _abstract Var
lemma-53 = _length 15
lemma-53 = _lengthDistinct 12
lemma-53 = _distinctRatio 0.8
lemma-53 = _popular ==(last)
lemma-53 = _commutative False
lemma-53 = _associative False
lemma-53 = _distributive False
lemma-53 = _abstractLength 15
lemma-53 = _abstractLengthDistinct 8
lemma-53 = _innerFunctionApplication True
lemma-53 = _innerFunctionDepth 3
lemma-53 = _func match x
lemma-53 = _func match x(Z, match z)
lemma-53 = _func match x(match z)
lemma-53 = _func match x(Z)
lemma-53 = _func Z
lemma-53 = _func match z
lemma-53 = _func match z(Nat, last)
lemma-53 = _func match z(last)
lemma-53 = _func match z(Nat)
lemma-53 = _func Nat
lemma-53 = _func last
lemma-53 = _func last(cons)
lemma-53 = _func cons
lemma-53 = _func cons(Nat, list)
lemma-53 = _func cons(list)
lemma-53 = _func cons(Nat)
lemma-53 = _func list
lemma-53 = _func _abstract match Var
lemma-53 = _func _abstract match Var(Func, match Var)
lemma-53 = _func _abstract match Var(match Var)
lemma-53 = _func _abstract match Var(Func)
lemma-53 = _func _abstract Func
lemma-53 = _func _abstract match Var(Var, Func)
lemma-53 = _func _abstract match Var(Var)
lemma-53 = _func _abstract Var
lemma-53 = _func _abstract Func(Func)
lemma-53 = _func _abstract Func(Var, Var)
lemma-53 = _func _abstract Func(Var)
lemma-53 = _func _length 17
lemma-53 = _func _lengthDistinct 17
lemma-53 = _func _distinctRatio 1.0
lemma-53 = _func _popular Nat
lemma-53 = _func recursive True
lemma-53 = _func _abstractLength 18
lemma-53 = _func _abstractLengthDistinct 11
lemma-53 = _func _nArgs 1

lemma-54 = ==
lemma-54 = ==(le, equal)
lemma-54 = ==(equal)
lemma-54 = ==(le)
lemma-54 = le
lemma-54 = le(Nat, Z)
lemma-54 = le(Z)
lemma-54 = le(Nat)
lemma-54 = Nat
lemma-54 = Z
lemma-54 = equal
lemma-54 = equal(Nat, Z)
lemma-54 = equal(Z)
lemma-54 = equal(Nat)
lemma-54 = _abstract Equals
lemma-54 = _abstract Equals(Func, Func)
lemma-54 = _abstract Equals(Func)
lemma-54 = _abstract Func
lemma-54 = _abstract Func(Var, Func)
lemma-54 = _abstract Func(Func)
lemma-54 = _abstract Func(Var)
lemma-54 = _abstract Var
lemma-54 = _length 16
lemma-54 = _lengthDistinct 14
lemma-54 = _distinctRatio 0.9
lemma-54 = _popular Nat
lemma-54 = _commutative False
lemma-54 = _associative False
lemma-54 = _distributive False
lemma-54 = _abstractLength 16
lemma-54 = _abstractLengthDistinct 8
lemma-54 = _innerFunctionApplication True
lemma-54 = _innerFunctionDepth 2
lemma-54 = _func match x
lemma-54 = _func match x(match y, match y)
lemma-54 = _func match x(match y)
lemma-54 = _func match y
lemma-54 = _func match y(True, False)
lemma-54 = _func match y(False)
lemma-54 = _func match y(True)
lemma-54 = _func True
lemma-54 = _func False
lemma-54 = _func match y(False, equal)
lemma-54 = _func match y(equal)
lemma-54 = _func equal
lemma-54 = _func equal(Nat, Nat)
lemma-54 = _func equal(Nat)
lemma-54 = _func Nat
lemma-54 = _func _abstract match Var
lemma-54 = _func _abstract match Var(match Var, match Var)
lemma-54 = _func _abstract match Var(match Var)
lemma-54 = _func _abstract match Var(Const, Const)
lemma-54 = _func _abstract match Var(Const)
lemma-54 = _func _abstract Const
lemma-54 = _func _abstract match Var(Const, Func)
lemma-54 = _func _abstract match Var(Func)
lemma-54 = _func _abstract Func
lemma-54 = _func _abstract Func(Var, Var)
lemma-54 = _func _abstract Func(Var)
lemma-54 = _func _abstract Var
lemma-54 = _func _length 15
lemma-54 = _func _lengthDistinct 15
lemma-54 = _func _distinctRatio 1.0
lemma-54 = _func _popular False
lemma-54 = _func recursive True
lemma-54 = _func _abstractLength 21
lemma-54 = _func _abstractLengthDistinct 12
lemma-54 = _func _nArgs 2
lemma-54 = _func match x
lemma-54 = _func match x(True, match y)
lemma-54 = _func match x(match y)
lemma-54 = _func match x(True)
lemma-54 = _func True
lemma-54 = _func match y
lemma-54 = _func match y(False, le)
lemma-54 = _func match y(le)
lemma-54 = _func match y(False)
lemma-54 = _func False
lemma-54 = _func le
lemma-54 = _func le(Nat, Nat)
lemma-54 = _func le(Nat)
lemma-54 = _func Nat
lemma-54 = _func _abstract match Var
lemma-54 = _func _abstract match Var(Const, match Var)
lemma-54 = _func _abstract match Var(match Var)
lemma-54 = _func _abstract match Var(Const)
lemma-54 = _func _abstract Const
lemma-54 = _func _abstract match Var(Const, Func)
lemma-54 = _func _abstract match Var(Func)
lemma-54 = _func _abstract Func
lemma-54 = _func _abstract Func(Var, Var)
lemma-54 = _func _abstract Func(Var)
lemma-54 = _func _abstract Var
lemma-54 = _func _length 14
lemma-54 = _func _lengthDistinct 14
lemma-54 = _func _distinctRatio 1.0
lemma-54 = _func _popular False
lemma-54 = _func recursive True
lemma-54 = _func _abstractLength 16
lemma-54 = _func _abstractLengthDistinct 11
lemma-54 = _func _nArgs 2

lemma-55 = ==
lemma-55 = ==(le, True)
lemma-55 = ==(True)
lemma-55 = ==(le)
lemma-55 = le
lemma-55 = le(Nat, Nat)
lemma-55 = le(Nat)
lemma-55 = Nat
lemma-55 = True
lemma-55 = _abstract Equals
lemma-55 = _abstract Equals(Func, Const)
lemma-55 = _abstract Equals(Const)
lemma-55 = _abstract Equals(Func)
lemma-55 = _abstract Func
lemma-55 = _abstract Func(Var, Var)
lemma-55 = _abstract Func(Var)
lemma-55 = _abstract Var
lemma-55 = _abstract Const
lemma-55 = _length 11
lemma-55 = _lengthDistinct 9
lemma-55 = _distinctRatio 0.8
lemma-55 = _popular Nat
lemma-55 = _commutative False
lemma-55 = _associative False
lemma-55 = _distributive False
lemma-55 = _abstractLength 11
lemma-55 = _abstractLengthDistinct 9
lemma-55 = _innerFunctionApplication False
lemma-55 = _innerFunctionDepth 1
lemma-55 = _func match x
lemma-55 = _func match x(True, match y)
lemma-55 = _func match x(match y)
lemma-55 = _func match x(True)
lemma-55 = _func True
lemma-55 = _func match y
lemma-55 = _func match y(False, le)
lemma-55 = _func match y(le)
lemma-55 = _func match y(False)
lemma-55 = _func False
lemma-55 = _func le
lemma-55 = _func le(Nat, Nat)
lemma-55 = _func le(Nat)
lemma-55 = _func Nat
lemma-55 = _func _abstract match Var
lemma-55 = _func _abstract match Var(Const, match Var)
lemma-55 = _func _abstract match Var(match Var)
lemma-55 = _func _abstract match Var(Const)
lemma-55 = _func _abstract Const
lemma-55 = _func _abstract match Var(Const, Func)
lemma-55 = _func _abstract match Var(Func)
lemma-55 = _func _abstract Func
lemma-55 = _func _abstract Func(Var, Var)
lemma-55 = _func _abstract Func(Var)
lemma-55 = _func _abstract Var
lemma-55 = _func _length 14
lemma-55 = _func _lengthDistinct 14
lemma-55 = _func _distinctRatio 1.0
lemma-55 = _func _popular False
lemma-55 = _func recursive True
lemma-55 = _func _abstractLength 16
lemma-55 = _func _abstractLengthDistinct 11
lemma-55 = _func _nArgs 2

lemma-58 = ==
lemma-58 = ==(le, equal)
lemma-58 = ==(equal)
lemma-58 = ==(le)
lemma-58 = le
lemma-58 = le(Nat, Z)
lemma-58 = le(Z)
lemma-58 = le(Nat)
lemma-58 = Nat
lemma-58 = Z
lemma-58 = equal
lemma-58 = equal(Nat, Z)
lemma-58 = equal(Z)
lemma-58 = equal(Nat)
lemma-58 = _abstract Equals
lemma-58 = _abstract Equals(Func, Func)
lemma-58 = _abstract Equals(Func)
lemma-58 = _abstract Func
lemma-58 = _abstract Func(Var, Func)
lemma-58 = _abstract Func(Func)
lemma-58 = _abstract Func(Var)
lemma-58 = _abstract Var
lemma-58 = _length 16
lemma-58 = _lengthDistinct 14
lemma-58 = _distinctRatio 0.9
lemma-58 = _popular Nat
lemma-58 = _commutative False
lemma-58 = _associative False
lemma-58 = _distributive False
lemma-58 = _abstractLength 16
lemma-58 = _abstractLengthDistinct 8
lemma-58 = _innerFunctionApplication True
lemma-58 = _innerFunctionDepth 2
lemma-58 = _func match x
lemma-58 = _func match x(match y, match y)
lemma-58 = _func match x(match y)
lemma-58 = _func match y
lemma-58 = _func match y(True, False)
lemma-58 = _func match y(False)
lemma-58 = _func match y(True)
lemma-58 = _func True
lemma-58 = _func False
lemma-58 = _func match y(False, equal)
lemma-58 = _func match y(equal)
lemma-58 = _func equal
lemma-58 = _func equal(Nat, Nat)
lemma-58 = _func equal(Nat)
lemma-58 = _func Nat
lemma-58 = _func _abstract match Var
lemma-58 = _func _abstract match Var(match Var, match Var)
lemma-58 = _func _abstract match Var(match Var)
lemma-58 = _func _abstract match Var(Const, Const)
lemma-58 = _func _abstract match Var(Const)
lemma-58 = _func _abstract Const
lemma-58 = _func _abstract match Var(Const, Func)
lemma-58 = _func _abstract match Var(Func)
lemma-58 = _func _abstract Func
lemma-58 = _func _abstract Func(Var, Var)
lemma-58 = _func _abstract Func(Var)
lemma-58 = _func _abstract Var
lemma-58 = _func _length 15
lemma-58 = _func _lengthDistinct 15
lemma-58 = _func _distinctRatio 1.0
lemma-58 = _func _popular False
lemma-58 = _func recursive True
lemma-58 = _func _abstractLength 21
lemma-58 = _func _abstractLengthDistinct 12
lemma-58 = _func _nArgs 2
lemma-58 = _func match x
lemma-58 = _func match x(True, match y)
lemma-58 = _func match x(match y)
lemma-58 = _func match x(True)
lemma-58 = _func True
lemma-58 = _func match y
lemma-58 = _func match y(False, le)
lemma-58 = _func match y(le)
lemma-58 = _func match y(False)
lemma-58 = _func False
lemma-58 = _func le
lemma-58 = _func le(Nat, Nat)
lemma-58 = _func le(Nat)
lemma-58 = _func Nat
lemma-58 = _func _abstract match Var
lemma-58 = _func _abstract match Var(Const, match Var)
lemma-58 = _func _abstract match Var(match Var)
lemma-58 = _func _abstract match Var(Const)
lemma-58 = _func _abstract Const
lemma-58 = _func _abstract match Var(Const, Func)
lemma-58 = _func _abstract match Var(Func)
lemma-58 = _func _abstract Func
lemma-58 = _func _abstract Func(Var, Var)
lemma-58 = _func _abstract Func(Var)
lemma-58 = _func _abstract Var
lemma-58 = _func _length 14
lemma-58 = _func _lengthDistinct 14
lemma-58 = _func _distinctRatio 1.0
lemma-58 = _func _popular False
lemma-58 = _func recursive True
lemma-58 = _func _abstractLength 16
lemma-58 = _func _abstractLengthDistinct 11
lemma-58 = _func _nArgs 2

lemma-59 = ==
lemma-59 = ==(le, True)
lemma-59 = ==(True)
lemma-59 = ==(le)
lemma-59 = le
lemma-59 = le(Z, Nat)
lemma-59 = le(Nat)
lemma-59 = le(Z)
lemma-59 = Z
lemma-59 = Nat
lemma-59 = True
lemma-59 = _abstract Equals
lemma-59 = _abstract Equals(Func, Const)
lemma-59 = _abstract Equals(Const)
lemma-59 = _abstract Equals(Func)
lemma-59 = _abstract Func
lemma-59 = _abstract Func(Func, Var)
lemma-59 = _abstract Func(Var)
lemma-59 = _abstract Func(Func)
lemma-59 = _abstract Var
lemma-59 = _abstract Const
lemma-59 = _length 11
lemma-59 = _lengthDistinct 11
lemma-59 = _distinctRatio 1.0
lemma-59 = _popular ==
lemma-59 = _commutative False
lemma-59 = _associative False
lemma-59 = _distributive False
lemma-59 = _abstractLength 11
lemma-59 = _abstractLengthDistinct 10
lemma-59 = _innerFunctionApplication True
lemma-59 = _innerFunctionDepth 2
lemma-59 = _func match x
lemma-59 = _func match x(True, match y)
lemma-59 = _func match x(match y)
lemma-59 = _func match x(True)
lemma-59 = _func True
lemma-59 = _func match y
lemma-59 = _func match y(False, le)
lemma-59 = _func match y(le)
lemma-59 = _func match y(False)
lemma-59 = _func False
lemma-59 = _func le
lemma-59 = _func le(Nat, Nat)
lemma-59 = _func le(Nat)
lemma-59 = _func Nat
lemma-59 = _func _abstract match Var
lemma-59 = _func _abstract match Var(Const, match Var)
lemma-59 = _func _abstract match Var(match Var)
lemma-59 = _func _abstract match Var(Const)
lemma-59 = _func _abstract Const
lemma-59 = _func _abstract match Var(Const, Func)
lemma-59 = _func _abstract match Var(Func)
lemma-59 = _func _abstract Func
lemma-59 = _func _abstract Func(Var, Var)
lemma-59 = _func _abstract Func(Var)
lemma-59 = _func _abstract Var
lemma-59 = _func _length 14
lemma-59 = _func _lengthDistinct 14
lemma-59 = _func _distinctRatio 1.0
lemma-59 = _func _popular False
lemma-59 = _func recursive True
lemma-59 = _func _abstractLength 16
lemma-59 = _func _abstractLengthDistinct 11
lemma-59 = _func _nArgs 2

lemma-60 = ==
lemma-60 = ==(le, True)
lemma-60 = ==(True)
lemma-60 = ==(le)
lemma-60 = le
lemma-60 = le(Nat, S)
lemma-60 = le(S)
lemma-60 = le(Nat)
lemma-60 = Nat
lemma-60 = S
lemma-60 = S(Nat)
lemma-60 = True
lemma-60 = _abstract Equals
lemma-60 = _abstract Equals(Func, Const)
lemma-60 = _abstract Equals(Const)
lemma-60 = _abstract Equals(Func)
lemma-60 = _abstract Func
lemma-60 = _abstract Func(Var, Func)
lemma-60 = _abstract Func(Func)
lemma-60 = _abstract Func(Var)
lemma-60 = _abstract Var
lemma-60 = _abstract Const
lemma-60 = _length 13
lemma-60 = _lengthDistinct 12
lemma-60 = _distinctRatio 0.9
lemma-60 = _popular Nat
lemma-60 = _commutative False
lemma-60 = _associative False
lemma-60 = _distributive False
lemma-60 = _abstractLength 13
lemma-60 = _abstractLengthDistinct 10
lemma-60 = _innerFunctionApplication True
lemma-60 = _innerFunctionDepth 2
lemma-60 = _func match x
lemma-60 = _func match x(True, match y)
lemma-60 = _func match x(match y)
lemma-60 = _func match x(True)
lemma-60 = _func True
lemma-60 = _func match y
lemma-60 = _func match y(False, le)
lemma-60 = _func match y(le)
lemma-60 = _func match y(False)
lemma-60 = _func False
lemma-60 = _func le
lemma-60 = _func le(Nat, Nat)
lemma-60 = _func le(Nat)
lemma-60 = _func Nat
lemma-60 = _func _abstract match Var
lemma-60 = _func _abstract match Var(Const, match Var)
lemma-60 = _func _abstract match Var(match Var)
lemma-60 = _func _abstract match Var(Const)
lemma-60 = _func _abstract Const
lemma-60 = _func _abstract match Var(Const, Func)
lemma-60 = _func _abstract match Var(Func)
lemma-60 = _func _abstract Func
lemma-60 = _func _abstract Func(Var, Var)
lemma-60 = _func _abstract Func(Var)
lemma-60 = _func _abstract Var
lemma-60 = _func _length 14
lemma-60 = _func _lengthDistinct 14
lemma-60 = _func _distinctRatio 1.0
lemma-60 = _func _popular False
lemma-60 = _func recursive True
lemma-60 = _func _abstractLength 16
lemma-60 = _func _abstractLengthDistinct 11
lemma-60 = _func _nArgs 2

lemma-61 = ==
lemma-61 = ==(le, False)
lemma-61 = ==(False)
lemma-61 = ==(le)
lemma-61 = le
lemma-61 = le(S, Nat)
lemma-61 = le(Nat)
lemma-61 = le(S)
lemma-61 = S
lemma-61 = S(Nat)
lemma-61 = Nat
lemma-61 = False
lemma-61 = _abstract Equals
lemma-61 = _abstract Equals(Func, Const)
lemma-61 = _abstract Equals(Const)
lemma-61 = _abstract Equals(Func)
lemma-61 = _abstract Func
lemma-61 = _abstract Func(Func, Var)
lemma-61 = _abstract Func(Var)
lemma-61 = _abstract Func(Func)
lemma-61 = _abstract Var
lemma-61 = _abstract Const
lemma-61 = _length 13
lemma-61 = _lengthDistinct 12
lemma-61 = _distinctRatio 0.9
lemma-61 = _popular Nat
lemma-61 = _commutative False
lemma-61 = _associative False
lemma-61 = _distributive False
lemma-61 = _abstractLength 13
lemma-61 = _abstractLengthDistinct 10
lemma-61 = _innerFunctionApplication True
lemma-61 = _innerFunctionDepth 2
lemma-61 = _func match x
lemma-61 = _func match x(True, match y)
lemma-61 = _func match x(match y)
lemma-61 = _func match x(True)
lemma-61 = _func True
lemma-61 = _func match y
lemma-61 = _func match y(False, le)
lemma-61 = _func match y(le)
lemma-61 = _func match y(False)
lemma-61 = _func False
lemma-61 = _func le
lemma-61 = _func le(Nat, Nat)
lemma-61 = _func le(Nat)
lemma-61 = _func Nat
lemma-61 = _func _abstract match Var
lemma-61 = _func _abstract match Var(Const, match Var)
lemma-61 = _func _abstract match Var(match Var)
lemma-61 = _func _abstract match Var(Const)
lemma-61 = _func _abstract Const
lemma-61 = _func _abstract match Var(Const, Func)
lemma-61 = _func _abstract match Var(Func)
lemma-61 = _func _abstract Func
lemma-61 = _func _abstract Func(Var, Var)
lemma-61 = _func _abstract Func(Var)
lemma-61 = _func _abstract Var
lemma-61 = _func _length 14
lemma-61 = _func _lengthDistinct 14
lemma-61 = _func _distinctRatio 1.0
lemma-61 = _func _popular False
lemma-61 = _func recursive True
lemma-61 = _func _abstractLength 16
lemma-61 = _func _abstractLengthDistinct 11
lemma-61 = _func _nArgs 2

lemma-62 = ==
lemma-62 = ==(le, False)
lemma-62 = ==(False)
lemma-62 = ==(le)
lemma-62 = le
lemma-62 = le(S, Z)
lemma-62 = le(Z)
lemma-62 = le(S)
lemma-62 = S
lemma-62 = S(Nat)
lemma-62 = Nat
lemma-62 = Z
lemma-62 = False
lemma-62 = _abstract Equals
lemma-62 = _abstract Equals(Func, Const)
lemma-62 = _abstract Equals(Const)
lemma-62 = _abstract Equals(Func)
lemma-62 = _abstract Func
lemma-62 = _abstract Func(Func, Func)
lemma-62 = _abstract Func(Func)
lemma-62 = _abstract Func(Var)
lemma-62 = _abstract Var
lemma-62 = _abstract Const
lemma-62 = _length 13
lemma-62 = _lengthDistinct 13
lemma-62 = _distinctRatio 1.0
lemma-62 = _popular ==
lemma-62 = _commutative False
lemma-62 = _associative False
lemma-62 = _distributive False
lemma-62 = _abstractLength 13
lemma-62 = _abstractLengthDistinct 10
lemma-62 = _innerFunctionApplication True
lemma-62 = _innerFunctionDepth 2
lemma-62 = _func match x
lemma-62 = _func match x(True, match y)
lemma-62 = _func match x(match y)
lemma-62 = _func match x(True)
lemma-62 = _func True
lemma-62 = _func match y
lemma-62 = _func match y(False, le)
lemma-62 = _func match y(le)
lemma-62 = _func match y(False)
lemma-62 = _func False
lemma-62 = _func le
lemma-62 = _func le(Nat, Nat)
lemma-62 = _func le(Nat)
lemma-62 = _func Nat
lemma-62 = _func _abstract match Var
lemma-62 = _func _abstract match Var(Const, match Var)
lemma-62 = _func _abstract match Var(match Var)
lemma-62 = _func _abstract match Var(Const)
lemma-62 = _func _abstract Const
lemma-62 = _func _abstract match Var(Const, Func)
lemma-62 = _func _abstract match Var(Func)
lemma-62 = _func _abstract Func
lemma-62 = _func _abstract Func(Var, Var)
lemma-62 = _func _abstract Func(Var)
lemma-62 = _func _abstract Var
lemma-62 = _func _length 14
lemma-62 = _func _lengthDistinct 14
lemma-62 = _func _distinctRatio 1.0
lemma-62 = _func _popular False
lemma-62 = _func recursive True
lemma-62 = _func _abstractLength 16
lemma-62 = _func _abstractLengthDistinct 11
lemma-62 = _func _nArgs 2

lemma-63 = ==
lemma-63 = ==(le, le)
lemma-63 = ==(le)
lemma-63 = le
lemma-63 = le(S, S)
lemma-63 = le(S)
lemma-63 = S
lemma-63 = S(Nat)
lemma-63 = Nat
lemma-63 = le(Nat, Nat)
lemma-63 = le(Nat)
lemma-63 = _abstract Equals
lemma-63 = _abstract Equals(Func, Func)
lemma-63 = _abstract Equals(Func)
lemma-63 = _abstract Func
lemma-63 = _abstract Func(Func, Func)
lemma-63 = _abstract Func(Func)
lemma-63 = _abstract Func(Var)
lemma-63 = _abstract Var
lemma-63 = _abstract Func(Var, Var)
lemma-63 = _length 20
lemma-63 = _lengthDistinct 11
lemma-63 = _distinctRatio 0.6
lemma-63 = _popular Nat
lemma-63 = _commutative False
lemma-63 = _associative False
lemma-63 = _distributive False
lemma-63 = _abstractLength 20
lemma-63 = _abstractLengthDistinct 9
lemma-63 = _innerFunctionApplication True
lemma-63 = _innerFunctionDepth 2
lemma-63 = _func match x
lemma-63 = _func match x(True, match y)
lemma-63 = _func match x(match y)
lemma-63 = _func match x(True)
lemma-63 = _func True
lemma-63 = _func match y
lemma-63 = _func match y(False, le)
lemma-63 = _func match y(le)
lemma-63 = _func match y(False)
lemma-63 = _func False
lemma-63 = _func le
lemma-63 = _func le(Nat, Nat)
lemma-63 = _func le(Nat)
lemma-63 = _func Nat
lemma-63 = _func _abstract match Var
lemma-63 = _func _abstract match Var(Const, match Var)
lemma-63 = _func _abstract match Var(match Var)
lemma-63 = _func _abstract match Var(Const)
lemma-63 = _func _abstract Const
lemma-63 = _func _abstract match Var(Const, Func)
lemma-63 = _func _abstract match Var(Func)
lemma-63 = _func _abstract Func
lemma-63 = _func _abstract Func(Var, Var)
lemma-63 = _func _abstract Func(Var)
lemma-63 = _func _abstract Var
lemma-63 = _func _length 14
lemma-63 = _func _lengthDistinct 14
lemma-63 = _func _distinctRatio 1.0
lemma-63 = _func _popular False
lemma-63 = _func recursive True
lemma-63 = _func _abstractLength 16
lemma-63 = _func _abstractLengthDistinct 11
lemma-63 = _func _nArgs 2

lemma-64 = ==
lemma-64 = ==(max2, max2)
lemma-64 = ==(max2)
lemma-64 = max2
lemma-64 = max2(max2, Nat)
lemma-64 = max2(Nat)
lemma-64 = max2(max2)
lemma-64 = max2(Nat, Nat)
lemma-64 = Nat
lemma-64 = max2(Nat, max2)
lemma-64 = _abstract Equals
lemma-64 = _abstract Equals(Func, Func)
lemma-64 = _abstract Equals(Func)
lemma-64 = _abstract Func
lemma-64 = _abstract Func(Func, Var)
lemma-64 = _abstract Func(Var)
lemma-64 = _abstract Func(Func)
lemma-64 = _abstract Func(Var, Var)
lemma-64 = _abstract Var
lemma-64 = _abstract Func(Var, Func)
lemma-64 = _length 26
lemma-64 = _lengthDistinct 10
lemma-64 = _distinctRatio 0.4
lemma-64 = _popular Nat
lemma-64 = _commutative False
lemma-64 = _associative True
lemma-64 = _distributive False
lemma-64 = _abstractLength 26
lemma-64 = _abstractLengthDistinct 10
lemma-64 = _innerFunctionApplication True
lemma-64 = _innerFunctionDepth 2
lemma-64 = _func match x
lemma-64 = _func match x(Nat, match y)
lemma-64 = _func match x(match y)
lemma-64 = _func match x(Nat)
lemma-64 = _func Nat
lemma-64 = _func match y
lemma-64 = _func match y(S, S)
lemma-64 = _func match y(S)
lemma-64 = _func S
lemma-64 = _func S(Nat)
lemma-64 = _func S(max2)
lemma-64 = _func max2
lemma-64 = _func max2(Nat, Nat)
lemma-64 = _func max2(Nat)
lemma-64 = _func _abstract match Var
lemma-64 = _func _abstract match Var(Var, match Var)
lemma-64 = _func _abstract match Var(match Var)
lemma-64 = _func _abstract match Var(Var)
lemma-64 = _func _abstract Var
lemma-64 = _func _abstract match Var(Func, Func)
lemma-64 = _func _abstract match Var(Func)
lemma-64 = _func _abstract Func
lemma-64 = _func _abstract Func(Var)
lemma-64 = _func _abstract Func(Func)
lemma-64 = _func _abstract Func(Var, Var)
lemma-64 = _func _length 14
lemma-64 = _func _lengthDistinct 14
lemma-64 = _func _distinctRatio 1.0
lemma-64 = _func _popular Nat
lemma-64 = _func recursive True
lemma-64 = _func _abstractLength 20
lemma-64 = _func _abstractLengthDistinct 11
lemma-64 = _func _nArgs 2

lemma-65 = ==
lemma-65 = ==(max2, Nat)
lemma-65 = ==(Nat)
lemma-65 = ==(max2)
lemma-65 = max2
lemma-65 = max2(Nat, Nat)
lemma-65 = max2(Nat)
lemma-65 = Nat
lemma-65 = _abstract Equals
lemma-65 = _abstract Equals(Func, Var)
lemma-65 = _abstract Equals(Var)
lemma-65 = _abstract Equals(Func)
lemma-65 = _abstract Func
lemma-65 = _abstract Func(Var, Var)
lemma-65 = _abstract Func(Var)
lemma-65 = _abstract Var
lemma-65 = _length 11
lemma-65 = _lengthDistinct 8
lemma-65 = _distinctRatio 0.7
lemma-65 = _popular Nat
lemma-65 = _commutative False
lemma-65 = _associative False
lemma-65 = _distributive False
lemma-65 = _abstractLength 11
lemma-65 = _abstractLengthDistinct 8
lemma-65 = _innerFunctionApplication False
lemma-65 = _innerFunctionDepth 1
lemma-65 = _func match x
lemma-65 = _func match x(Nat, match y)
lemma-65 = _func match x(match y)
lemma-65 = _func match x(Nat)
lemma-65 = _func Nat
lemma-65 = _func match y
lemma-65 = _func match y(S, S)
lemma-65 = _func match y(S)
lemma-65 = _func S
lemma-65 = _func S(Nat)
lemma-65 = _func S(max2)
lemma-65 = _func max2
lemma-65 = _func max2(Nat, Nat)
lemma-65 = _func max2(Nat)
lemma-65 = _func _abstract match Var
lemma-65 = _func _abstract match Var(Var, match Var)
lemma-65 = _func _abstract match Var(match Var)
lemma-65 = _func _abstract match Var(Var)
lemma-65 = _func _abstract Var
lemma-65 = _func _abstract match Var(Func, Func)
lemma-65 = _func _abstract match Var(Func)
lemma-65 = _func _abstract Func
lemma-65 = _func _abstract Func(Var)
lemma-65 = _func _abstract Func(Func)
lemma-65 = _func _abstract Func(Var, Var)
lemma-65 = _func _length 14
lemma-65 = _func _lengthDistinct 14
lemma-65 = _func _distinctRatio 1.0
lemma-65 = _func _popular Nat
lemma-65 = _func recursive True
lemma-65 = _func _abstractLength 20
lemma-65 = _func _abstractLengthDistinct 11
lemma-65 = _func _nArgs 2

lemma-66 = ==
lemma-66 = ==(max2, Nat)
lemma-66 = ==(Nat)
lemma-66 = ==(max2)
lemma-66 = max2
lemma-66 = max2(Nat, Z)
lemma-66 = max2(Z)
lemma-66 = max2(Nat)
lemma-66 = Nat
lemma-66 = Z
lemma-66 = _abstract Equals
lemma-66 = _abstract Equals(Func, Var)
lemma-66 = _abstract Equals(Var)
lemma-66 = _abstract Equals(Func)
lemma-66 = _abstract Func
lemma-66 = _abstract Func(Var, Func)
lemma-66 = _abstract Func(Func)
lemma-66 = _abstract Func(Var)
lemma-66 = _abstract Var
lemma-66 = _length 11
lemma-66 = _lengthDistinct 10
lemma-66 = _distinctRatio 0.9
lemma-66 = _popular Nat
lemma-66 = _commutative False
lemma-66 = _associative False
lemma-66 = _distributive False
lemma-66 = _abstractLength 11
lemma-66 = _abstractLengthDistinct 9
lemma-66 = _innerFunctionApplication True
lemma-66 = _innerFunctionDepth 2
lemma-66 = _func match x
lemma-66 = _func match x(Nat, match y)
lemma-66 = _func match x(match y)
lemma-66 = _func match x(Nat)
lemma-66 = _func Nat
lemma-66 = _func match y
lemma-66 = _func match y(S, S)
lemma-66 = _func match y(S)
lemma-66 = _func S
lemma-66 = _func S(Nat)
lemma-66 = _func S(max2)
lemma-66 = _func max2
lemma-66 = _func max2(Nat, Nat)
lemma-66 = _func max2(Nat)
lemma-66 = _func _abstract match Var
lemma-66 = _func _abstract match Var(Var, match Var)
lemma-66 = _func _abstract match Var(match Var)
lemma-66 = _func _abstract match Var(Var)
lemma-66 = _func _abstract Var
lemma-66 = _func _abstract match Var(Func, Func)
lemma-66 = _func _abstract match Var(Func)
lemma-66 = _func _abstract Func
lemma-66 = _func _abstract Func(Var)
lemma-66 = _func _abstract Func(Func)
lemma-66 = _func _abstract Func(Var, Var)
lemma-66 = _func _length 14
lemma-66 = _func _lengthDistinct 14
lemma-66 = _func _distinctRatio 1.0
lemma-66 = _func _popular Nat
lemma-66 = _func recursive True
lemma-66 = _func _abstractLength 20
lemma-66 = _func _abstractLengthDistinct 11
lemma-66 = _func _nArgs 2

lemma-67 = ==
lemma-67 = ==(max2, Nat)
lemma-67 = ==(Nat)
lemma-67 = ==(max2)
lemma-67 = max2
lemma-67 = max2(Z, Nat)
lemma-67 = max2(Nat)
lemma-67 = max2(Z)
lemma-67 = Z
lemma-67 = Nat
lemma-67 = _abstract Equals
lemma-67 = _abstract Equals(Func, Var)
lemma-67 = _abstract Equals(Var)
lemma-67 = _abstract Equals(Func)
lemma-67 = _abstract Func
lemma-67 = _abstract Func(Func, Var)
lemma-67 = _abstract Func(Var)
lemma-67 = _abstract Func(Func)
lemma-67 = _abstract Var
lemma-67 = _length 11
lemma-67 = _lengthDistinct 10
lemma-67 = _distinctRatio 0.9
lemma-67 = _popular Nat
lemma-67 = _commutative False
lemma-67 = _associative False
lemma-67 = _distributive False
lemma-67 = _abstractLength 11
lemma-67 = _abstractLengthDistinct 9
lemma-67 = _innerFunctionApplication True
lemma-67 = _innerFunctionDepth 2
lemma-67 = _func match x
lemma-67 = _func match x(Nat, match y)
lemma-67 = _func match x(match y)
lemma-67 = _func match x(Nat)
lemma-67 = _func Nat
lemma-67 = _func match y
lemma-67 = _func match y(S, S)
lemma-67 = _func match y(S)
lemma-67 = _func S
lemma-67 = _func S(Nat)
lemma-67 = _func S(max2)
lemma-67 = _func max2
lemma-67 = _func max2(Nat, Nat)
lemma-67 = _func max2(Nat)
lemma-67 = _func _abstract match Var
lemma-67 = _func _abstract match Var(Var, match Var)
lemma-67 = _func _abstract match Var(match Var)
lemma-67 = _func _abstract match Var(Var)
lemma-67 = _func _abstract Var
lemma-67 = _func _abstract match Var(Func, Func)
lemma-67 = _func _abstract match Var(Func)
lemma-67 = _func _abstract Func
lemma-67 = _func _abstract Func(Var)
lemma-67 = _func _abstract Func(Func)
lemma-67 = _func _abstract Func(Var, Var)
lemma-67 = _func _length 14
lemma-67 = _func _lengthDistinct 14
lemma-67 = _func _distinctRatio 1.0
lemma-67 = _func _popular Nat
lemma-67 = _func recursive True
lemma-67 = _func _abstractLength 20
lemma-67 = _func _abstractLengthDistinct 11
lemma-67 = _func _nArgs 2

lemma-68 = ==
lemma-68 = ==(max2, max2)
lemma-68 = ==(max2)
lemma-68 = max2
lemma-68 = max2(Nat, Nat)
lemma-68 = max2(Nat)
lemma-68 = Nat
lemma-68 = _abstract Equals
lemma-68 = _abstract Equals(Func, Func)
lemma-68 = _abstract Equals(Func)
lemma-68 = _abstract Func
lemma-68 = _abstract Func(Var, Var)
lemma-68 = _abstract Func(Var)
lemma-68 = _abstract Var
lemma-68 = _length 16
lemma-68 = _lengthDistinct 7
lemma-68 = _distinctRatio 0.4
lemma-68 = _popular Nat
lemma-68 = _commutative True
lemma-68 = _associative False
lemma-68 = _distributive False
lemma-68 = _abstractLength 16
lemma-68 = _abstractLengthDistinct 7
lemma-68 = _innerFunctionApplication False
lemma-68 = _innerFunctionDepth 1
lemma-68 = _func match x
lemma-68 = _func match x(Nat, match y)
lemma-68 = _func match x(match y)
lemma-68 = _func match x(Nat)
lemma-68 = _func Nat
lemma-68 = _func match y
lemma-68 = _func match y(S, S)
lemma-68 = _func match y(S)
lemma-68 = _func S
lemma-68 = _func S(Nat)
lemma-68 = _func S(max2)
lemma-68 = _func max2
lemma-68 = _func max2(Nat, Nat)
lemma-68 = _func max2(Nat)
lemma-68 = _func _abstract match Var
lemma-68 = _func _abstract match Var(Var, match Var)
lemma-68 = _func _abstract match Var(match Var)
lemma-68 = _func _abstract match Var(Var)
lemma-68 = _func _abstract Var
lemma-68 = _func _abstract match Var(Func, Func)
lemma-68 = _func _abstract match Var(Func)
lemma-68 = _func _abstract Func
lemma-68 = _func _abstract Func(Var)
lemma-68 = _func _abstract Func(Func)
lemma-68 = _func _abstract Func(Var, Var)
lemma-68 = _func _length 14
lemma-68 = _func _lengthDistinct 14
lemma-68 = _func _distinctRatio 1.0
lemma-68 = _func _popular Nat
lemma-68 = _func recursive True
lemma-68 = _func _abstractLength 20
lemma-68 = _func _abstractLengthDistinct 11
lemma-68 = _func _nArgs 2

lemma-69 = ==
lemma-69 = ==(max2, S)
lemma-69 = ==(S)
lemma-69 = ==(max2)
lemma-69 = max2
lemma-69 = max2(Nat, S)
lemma-69 = max2(S)
lemma-69 = max2(Nat)
lemma-69 = Nat
lemma-69 = S
lemma-69 = S(Nat)
lemma-69 = _abstract Equals
lemma-69 = _abstract Equals(Func, Func)
lemma-69 = _abstract Equals(Func)
lemma-69 = _abstract Func
lemma-69 = _abstract Func(Var, Func)
lemma-69 = _abstract Func(Func)
lemma-69 = _abstract Func(Var)
lemma-69 = _abstract Var
lemma-69 = _length 15
lemma-69 = _lengthDistinct 11
lemma-69 = _distinctRatio 0.7
lemma-69 = _popular Nat
lemma-69 = _commutative False
lemma-69 = _associative False
lemma-69 = _distributive False
lemma-69 = _abstractLength 15
lemma-69 = _abstractLengthDistinct 8
lemma-69 = _innerFunctionApplication True
lemma-69 = _innerFunctionDepth 2
lemma-69 = _func match x
lemma-69 = _func match x(Nat, match y)
lemma-69 = _func match x(match y)
lemma-69 = _func match x(Nat)
lemma-69 = _func Nat
lemma-69 = _func match y
lemma-69 = _func match y(S, S)
lemma-69 = _func match y(S)
lemma-69 = _func S
lemma-69 = _func S(Nat)
lemma-69 = _func S(max2)
lemma-69 = _func max2
lemma-69 = _func max2(Nat, Nat)
lemma-69 = _func max2(Nat)
lemma-69 = _func _abstract match Var
lemma-69 = _func _abstract match Var(Var, match Var)
lemma-69 = _func _abstract match Var(match Var)
lemma-69 = _func _abstract match Var(Var)
lemma-69 = _func _abstract Var
lemma-69 = _func _abstract match Var(Func, Func)
lemma-69 = _func _abstract match Var(Func)
lemma-69 = _func _abstract Func
lemma-69 = _func _abstract Func(Var)
lemma-69 = _func _abstract Func(Func)
lemma-69 = _func _abstract Func(Var, Var)
lemma-69 = _func _length 14
lemma-69 = _func _lengthDistinct 14
lemma-69 = _func _distinctRatio 1.0
lemma-69 = _func _popular Nat
lemma-69 = _func recursive True
lemma-69 = _func _abstractLength 20
lemma-69 = _func _abstractLengthDistinct 11
lemma-69 = _func _nArgs 2

lemma-70 = ==
lemma-70 = ==(max2, max2)
lemma-70 = ==(max2)
lemma-70 = max2
lemma-70 = max2(Nat, max2)
lemma-70 = max2(max2)
lemma-70 = max2(Nat)
lemma-70 = Nat
lemma-70 = max2(Nat, Nat)
lemma-70 = _abstract Equals
lemma-70 = _abstract Equals(Func, Func)
lemma-70 = _abstract Equals(Func)
lemma-70 = _abstract Func
lemma-70 = _abstract Func(Var, Func)
lemma-70 = _abstract Func(Func)
lemma-70 = _abstract Func(Var)
lemma-70 = _abstract Var
lemma-70 = _abstract Func(Var, Var)
lemma-70 = _length 21
lemma-70 = _lengthDistinct 9
lemma-70 = _distinctRatio 0.4
lemma-70 = _popular Nat
lemma-70 = _commutative False
lemma-70 = _associative False
lemma-70 = _distributive False
lemma-70 = _abstractLength 21
lemma-70 = _abstractLengthDistinct 9
lemma-70 = _innerFunctionApplication True
lemma-70 = _innerFunctionDepth 2
lemma-70 = _func match x
lemma-70 = _func match x(Nat, match y)
lemma-70 = _func match x(match y)
lemma-70 = _func match x(Nat)
lemma-70 = _func Nat
lemma-70 = _func match y
lemma-70 = _func match y(S, S)
lemma-70 = _func match y(S)
lemma-70 = _func S
lemma-70 = _func S(Nat)
lemma-70 = _func S(max2)
lemma-70 = _func max2
lemma-70 = _func max2(Nat, Nat)
lemma-70 = _func max2(Nat)
lemma-70 = _func _abstract match Var
lemma-70 = _func _abstract match Var(Var, match Var)
lemma-70 = _func _abstract match Var(match Var)
lemma-70 = _func _abstract match Var(Var)
lemma-70 = _func _abstract Var
lemma-70 = _func _abstract match Var(Func, Func)
lemma-70 = _func _abstract match Var(Func)
lemma-70 = _func _abstract Func
lemma-70 = _func _abstract Func(Var)
lemma-70 = _func _abstract Func(Func)
lemma-70 = _func _abstract Func(Var, Var)
lemma-70 = _func _length 14
lemma-70 = _func _lengthDistinct 14
lemma-70 = _func _distinctRatio 1.0
lemma-70 = _func _popular Nat
lemma-70 = _func recursive True
lemma-70 = _func _abstractLength 20
lemma-70 = _func _abstractLengthDistinct 11
lemma-70 = _func _nArgs 2

lemma-71 = ==
lemma-71 = ==(max2, max2)
lemma-71 = ==(max2)
lemma-71 = max2
lemma-71 = max2(max2, Nat)
lemma-71 = max2(Nat)
lemma-71 = max2(max2)
lemma-71 = max2(Nat, Nat)
lemma-71 = Nat
lemma-71 = max2(Nat, max2)
lemma-71 = _abstract Equals
lemma-71 = _abstract Equals(Func, Func)
lemma-71 = _abstract Equals(Func)
lemma-71 = _abstract Func
lemma-71 = _abstract Func(Func, Var)
lemma-71 = _abstract Func(Var)
lemma-71 = _abstract Func(Func)
lemma-71 = _abstract Func(Var, Var)
lemma-71 = _abstract Var
lemma-71 = _abstract Func(Var, Func)
lemma-71 = _length 26
lemma-71 = _lengthDistinct 10
lemma-71 = _distinctRatio 0.4
lemma-71 = _popular Nat
lemma-71 = _commutative False
lemma-71 = _associative True
lemma-71 = _distributive False
lemma-71 = _abstractLength 26
lemma-71 = _abstractLengthDistinct 10
lemma-71 = _innerFunctionApplication True
lemma-71 = _innerFunctionDepth 2
lemma-71 = _func match x
lemma-71 = _func match x(Nat, match y)
lemma-71 = _func match x(match y)
lemma-71 = _func match x(Nat)
lemma-71 = _func Nat
lemma-71 = _func match y
lemma-71 = _func match y(S, S)
lemma-71 = _func match y(S)
lemma-71 = _func S
lemma-71 = _func S(Nat)
lemma-71 = _func S(max2)
lemma-71 = _func max2
lemma-71 = _func max2(Nat, Nat)
lemma-71 = _func max2(Nat)
lemma-71 = _func _abstract match Var
lemma-71 = _func _abstract match Var(Var, match Var)
lemma-71 = _func _abstract match Var(match Var)
lemma-71 = _func _abstract match Var(Var)
lemma-71 = _func _abstract Var
lemma-71 = _func _abstract match Var(Func, Func)
lemma-71 = _func _abstract match Var(Func)
lemma-71 = _func _abstract Func
lemma-71 = _func _abstract Func(Var)
lemma-71 = _func _abstract Func(Func)
lemma-71 = _func _abstract Func(Var, Var)
lemma-71 = _func _length 14
lemma-71 = _func _lengthDistinct 14
lemma-71 = _func _distinctRatio 1.0
lemma-71 = _func _popular Nat
lemma-71 = _func recursive True
lemma-71 = _func _abstractLength 20
lemma-71 = _func _abstractLengthDistinct 11
lemma-71 = _func _nArgs 2

lemma-72 = ==
lemma-72 = ==(max2, S)
lemma-72 = ==(S)
lemma-72 = ==(max2)
lemma-72 = max2
lemma-72 = max2(S, S)
lemma-72 = max2(S)
lemma-72 = S
lemma-72 = S(Nat)
lemma-72 = Nat
lemma-72 = S(max2)
lemma-72 = max2(Nat, Nat)
lemma-72 = max2(Nat)
lemma-72 = _abstract Equals
lemma-72 = _abstract Equals(Func, Func)
lemma-72 = _abstract Equals(Func)
lemma-72 = _abstract Func
lemma-72 = _abstract Func(Func, Func)
lemma-72 = _abstract Func(Func)
lemma-72 = _abstract Func(Var)
lemma-72 = _abstract Var
lemma-72 = _abstract Func(Var, Var)
lemma-72 = _length 22
lemma-72 = _lengthDistinct 13
lemma-72 = _distinctRatio 0.6
lemma-72 = _popular Nat
lemma-72 = _commutative False
lemma-72 = _associative False
lemma-72 = _distributive False
lemma-72 = _abstractLength 22
lemma-72 = _abstractLengthDistinct 9
lemma-72 = _innerFunctionApplication True
lemma-72 = _innerFunctionDepth 2
lemma-72 = _func match x
lemma-72 = _func match x(Nat, match y)
lemma-72 = _func match x(match y)
lemma-72 = _func match x(Nat)
lemma-72 = _func Nat
lemma-72 = _func match y
lemma-72 = _func match y(S, S)
lemma-72 = _func match y(S)
lemma-72 = _func S
lemma-72 = _func S(Nat)
lemma-72 = _func S(max2)
lemma-72 = _func max2
lemma-72 = _func max2(Nat, Nat)
lemma-72 = _func max2(Nat)
lemma-72 = _func _abstract match Var
lemma-72 = _func _abstract match Var(Var, match Var)
lemma-72 = _func _abstract match Var(match Var)
lemma-72 = _func _abstract match Var(Var)
lemma-72 = _func _abstract Var
lemma-72 = _func _abstract match Var(Func, Func)
lemma-72 = _func _abstract match Var(Func)
lemma-72 = _func _abstract Func
lemma-72 = _func _abstract Func(Var)
lemma-72 = _func _abstract Func(Func)
lemma-72 = _func _abstract Func(Var, Var)
lemma-72 = _func _length 14
lemma-72 = _func _lengthDistinct 14
lemma-72 = _func _distinctRatio 1.0
lemma-72 = _func _popular Nat
lemma-72 = _func recursive True
lemma-72 = _func _abstractLength 20
lemma-72 = _func _abstractLengthDistinct 11
lemma-72 = _func _nArgs 2

lemma-73 = ==
lemma-73 = ==(max2, max2)
lemma-73 = ==(max2)
lemma-73 = max2
lemma-73 = max2(Nat, Nat)
lemma-73 = max2(Nat)
lemma-73 = Nat
lemma-73 = _abstract Equals
lemma-73 = _abstract Equals(Func, Func)
lemma-73 = _abstract Equals(Func)
lemma-73 = _abstract Func
lemma-73 = _abstract Func(Var, Var)
lemma-73 = _abstract Func(Var)
lemma-73 = _abstract Var
lemma-73 = _length 16
lemma-73 = _lengthDistinct 7
lemma-73 = _distinctRatio 0.4
lemma-73 = _popular Nat
lemma-73 = _commutative True
lemma-73 = _associative False
lemma-73 = _distributive False
lemma-73 = _abstractLength 16
lemma-73 = _abstractLengthDistinct 7
lemma-73 = _innerFunctionApplication False
lemma-73 = _innerFunctionDepth 1
lemma-73 = _func match x
lemma-73 = _func match x(Nat, match y)
lemma-73 = _func match x(match y)
lemma-73 = _func match x(Nat)
lemma-73 = _func Nat
lemma-73 = _func match y
lemma-73 = _func match y(S, S)
lemma-73 = _func match y(S)
lemma-73 = _func S
lemma-73 = _func S(Nat)
lemma-73 = _func S(max2)
lemma-73 = _func max2
lemma-73 = _func max2(Nat, Nat)
lemma-73 = _func max2(Nat)
lemma-73 = _func _abstract match Var
lemma-73 = _func _abstract match Var(Var, match Var)
lemma-73 = _func _abstract match Var(match Var)
lemma-73 = _func _abstract match Var(Var)
lemma-73 = _func _abstract Var
lemma-73 = _func _abstract match Var(Func, Func)
lemma-73 = _func _abstract match Var(Func)
lemma-73 = _func _abstract Func
lemma-73 = _func _abstract Func(Var)
lemma-73 = _func _abstract Func(Func)
lemma-73 = _func _abstract Func(Var, Var)
lemma-73 = _func _length 14
lemma-73 = _func _lengthDistinct 14
lemma-73 = _func _distinctRatio 1.0
lemma-73 = _func _popular Nat
lemma-73 = _func recursive True
lemma-73 = _func _abstractLength 20
lemma-73 = _func _abstractLengthDistinct 11
lemma-73 = _func _nArgs 2

lemma-74 = ==
lemma-74 = ==(min2, min2)
lemma-74 = ==(min2)
lemma-74 = min2
lemma-74 = min2(Nat, Nat)
lemma-74 = min2(Nat)
lemma-74 = Nat
lemma-74 = _abstract Equals
lemma-74 = _abstract Equals(Func, Func)
lemma-74 = _abstract Equals(Func)
lemma-74 = _abstract Func
lemma-74 = _abstract Func(Var, Var)
lemma-74 = _abstract Func(Var)
lemma-74 = _abstract Var
lemma-74 = _length 16
lemma-74 = _lengthDistinct 7
lemma-74 = _distinctRatio 0.4
lemma-74 = _popular Nat
lemma-74 = _commutative True
lemma-74 = _associative False
lemma-74 = _distributive False
lemma-74 = _abstractLength 16
lemma-74 = _abstractLengthDistinct 7
lemma-74 = _innerFunctionApplication False
lemma-74 = _innerFunctionDepth 1
lemma-74 = _func match x
lemma-74 = _func match x(Z, match y)
lemma-74 = _func match x(match y)
lemma-74 = _func match x(Z)
lemma-74 = _func Z
lemma-74 = _func match y
lemma-74 = _func match y(Z, S)
lemma-74 = _func match y(S)
lemma-74 = _func match y(Z)
lemma-74 = _func S
lemma-74 = _func S(min2)
lemma-74 = _func min2
lemma-74 = _func min2(Nat, Nat)
lemma-74 = _func min2(Nat)
lemma-74 = _func Nat
lemma-74 = _func _abstract match Var
lemma-74 = _func _abstract match Var(Func, match Var)
lemma-74 = _func _abstract match Var(match Var)
lemma-74 = _func _abstract match Var(Func)
lemma-74 = _func _abstract Func
lemma-74 = _func _abstract match Var(Func, Func)
lemma-74 = _func _abstract Func(Func)
lemma-74 = _func _abstract Func(Var, Var)
lemma-74 = _func _abstract Func(Var)
lemma-74 = _func _abstract Var
lemma-74 = _func _length 15
lemma-74 = _func _lengthDistinct 15
lemma-74 = _func _distinctRatio 1.0
lemma-74 = _func _popular Nat
lemma-74 = _func recursive True
lemma-74 = _func _abstractLength 18
lemma-74 = _func _abstractLengthDistinct 10
lemma-74 = _func _nArgs 2

lemma-75 = ==
lemma-75 = ==(min2, Nat)
lemma-75 = ==(Nat)
lemma-75 = ==(min2)
lemma-75 = min2
lemma-75 = min2(Nat, Nat)
lemma-75 = min2(Nat)
lemma-75 = Nat
lemma-75 = _abstract Equals
lemma-75 = _abstract Equals(Func, Var)
lemma-75 = _abstract Equals(Var)
lemma-75 = _abstract Equals(Func)
lemma-75 = _abstract Func
lemma-75 = _abstract Func(Var, Var)
lemma-75 = _abstract Func(Var)
lemma-75 = _abstract Var
lemma-75 = _length 11
lemma-75 = _lengthDistinct 8
lemma-75 = _distinctRatio 0.7
lemma-75 = _popular Nat
lemma-75 = _commutative False
lemma-75 = _associative False
lemma-75 = _distributive False
lemma-75 = _abstractLength 11
lemma-75 = _abstractLengthDistinct 8
lemma-75 = _innerFunctionApplication False
lemma-75 = _innerFunctionDepth 1
lemma-75 = _func match x
lemma-75 = _func match x(Z, match y)
lemma-75 = _func match x(match y)
lemma-75 = _func match x(Z)
lemma-75 = _func Z
lemma-75 = _func match y
lemma-75 = _func match y(Z, S)
lemma-75 = _func match y(S)
lemma-75 = _func match y(Z)
lemma-75 = _func S
lemma-75 = _func S(min2)
lemma-75 = _func min2
lemma-75 = _func min2(Nat, Nat)
lemma-75 = _func min2(Nat)
lemma-75 = _func Nat
lemma-75 = _func _abstract match Var
lemma-75 = _func _abstract match Var(Func, match Var)
lemma-75 = _func _abstract match Var(match Var)
lemma-75 = _func _abstract match Var(Func)
lemma-75 = _func _abstract Func
lemma-75 = _func _abstract match Var(Func, Func)
lemma-75 = _func _abstract Func(Func)
lemma-75 = _func _abstract Func(Var, Var)
lemma-75 = _func _abstract Func(Var)
lemma-75 = _func _abstract Var
lemma-75 = _func _length 15
lemma-75 = _func _lengthDistinct 15
lemma-75 = _func _distinctRatio 1.0
lemma-75 = _func _popular Nat
lemma-75 = _func recursive True
lemma-75 = _func _abstractLength 18
lemma-75 = _func _abstractLengthDistinct 10
lemma-75 = _func _nArgs 2

lemma-76 = ==
lemma-76 = ==(min2, Z)
lemma-76 = ==(Z)
lemma-76 = ==(min2)
lemma-76 = min2
lemma-76 = min2(Nat, Z)
lemma-76 = min2(Z)
lemma-76 = min2(Nat)
lemma-76 = Nat
lemma-76 = Z
lemma-76 = _abstract Equals
lemma-76 = _abstract Equals(Func, Func)
lemma-76 = _abstract Equals(Func)
lemma-76 = _abstract Func
lemma-76 = _abstract Func(Var, Func)
lemma-76 = _abstract Func(Func)
lemma-76 = _abstract Func(Var)
lemma-76 = _abstract Var
lemma-76 = _length 11
lemma-76 = _lengthDistinct 10
lemma-76 = _distinctRatio 0.9
lemma-76 = _popular Z
lemma-76 = _commutative False
lemma-76 = _associative False
lemma-76 = _distributive False
lemma-76 = _abstractLength 11
lemma-76 = _abstractLengthDistinct 8
lemma-76 = _innerFunctionApplication True
lemma-76 = _innerFunctionDepth 2
lemma-76 = _func match x
lemma-76 = _func match x(Z, match y)
lemma-76 = _func match x(match y)
lemma-76 = _func match x(Z)
lemma-76 = _func Z
lemma-76 = _func match y
lemma-76 = _func match y(Z, S)
lemma-76 = _func match y(S)
lemma-76 = _func match y(Z)
lemma-76 = _func S
lemma-76 = _func S(min2)
lemma-76 = _func min2
lemma-76 = _func min2(Nat, Nat)
lemma-76 = _func min2(Nat)
lemma-76 = _func Nat
lemma-76 = _func _abstract match Var
lemma-76 = _func _abstract match Var(Func, match Var)
lemma-76 = _func _abstract match Var(match Var)
lemma-76 = _func _abstract match Var(Func)
lemma-76 = _func _abstract Func
lemma-76 = _func _abstract match Var(Func, Func)
lemma-76 = _func _abstract Func(Func)
lemma-76 = _func _abstract Func(Var, Var)
lemma-76 = _func _abstract Func(Var)
lemma-76 = _func _abstract Var
lemma-76 = _func _length 15
lemma-76 = _func _lengthDistinct 15
lemma-76 = _func _distinctRatio 1.0
lemma-76 = _func _popular Nat
lemma-76 = _func recursive True
lemma-76 = _func _abstractLength 18
lemma-76 = _func _abstractLengthDistinct 10
lemma-76 = _func _nArgs 2

lemma-77 = ==
lemma-77 = ==(min2, Z)
lemma-77 = ==(Z)
lemma-77 = ==(min2)
lemma-77 = min2
lemma-77 = min2(Z, Nat)
lemma-77 = min2(Nat)
lemma-77 = min2(Z)
lemma-77 = Z
lemma-77 = Nat
lemma-77 = _abstract Equals
lemma-77 = _abstract Equals(Func, Func)
lemma-77 = _abstract Equals(Func)
lemma-77 = _abstract Func
lemma-77 = _abstract Func(Func, Var)
lemma-77 = _abstract Func(Var)
lemma-77 = _abstract Func(Func)
lemma-77 = _abstract Var
lemma-77 = _length 11
lemma-77 = _lengthDistinct 10
lemma-77 = _distinctRatio 0.9
lemma-77 = _popular Z
lemma-77 = _commutative False
lemma-77 = _associative False
lemma-77 = _distributive False
lemma-77 = _abstractLength 11
lemma-77 = _abstractLengthDistinct 8
lemma-77 = _innerFunctionApplication True
lemma-77 = _innerFunctionDepth 2
lemma-77 = _func match x
lemma-77 = _func match x(Z, match y)
lemma-77 = _func match x(match y)
lemma-77 = _func match x(Z)
lemma-77 = _func Z
lemma-77 = _func match y
lemma-77 = _func match y(Z, S)
lemma-77 = _func match y(S)
lemma-77 = _func match y(Z)
lemma-77 = _func S
lemma-77 = _func S(min2)
lemma-77 = _func min2
lemma-77 = _func min2(Nat, Nat)
lemma-77 = _func min2(Nat)
lemma-77 = _func Nat
lemma-77 = _func _abstract match Var
lemma-77 = _func _abstract match Var(Func, match Var)
lemma-77 = _func _abstract match Var(match Var)
lemma-77 = _func _abstract match Var(Func)
lemma-77 = _func _abstract Func
lemma-77 = _func _abstract match Var(Func, Func)
lemma-77 = _func _abstract Func(Func)
lemma-77 = _func _abstract Func(Var, Var)
lemma-77 = _func _abstract Func(Var)
lemma-77 = _func _abstract Var
lemma-77 = _func _length 15
lemma-77 = _func _lengthDistinct 15
lemma-77 = _func _distinctRatio 1.0
lemma-77 = _func _popular Nat
lemma-77 = _func recursive True
lemma-77 = _func _abstractLength 18
lemma-77 = _func _abstractLengthDistinct 10
lemma-77 = _func _nArgs 2

lemma-78 = ==
lemma-78 = ==(min2, min2)
lemma-78 = ==(min2)
lemma-78 = min2
lemma-78 = min2(Nat, Nat)
lemma-78 = min2(Nat)
lemma-78 = Nat
lemma-78 = _abstract Equals
lemma-78 = _abstract Equals(Func, Func)
lemma-78 = _abstract Equals(Func)
lemma-78 = _abstract Func
lemma-78 = _abstract Func(Var, Var)
lemma-78 = _abstract Func(Var)
lemma-78 = _abstract Var
lemma-78 = _length 16
lemma-78 = _lengthDistinct 7
lemma-78 = _distinctRatio 0.4
lemma-78 = _popular Nat
lemma-78 = _commutative True
lemma-78 = _associative False
lemma-78 = _distributive False
lemma-78 = _abstractLength 16
lemma-78 = _abstractLengthDistinct 7
lemma-78 = _innerFunctionApplication False
lemma-78 = _innerFunctionDepth 1
lemma-78 = _func match x
lemma-78 = _func match x(Z, match y)
lemma-78 = _func match x(match y)
lemma-78 = _func match x(Z)
lemma-78 = _func Z
lemma-78 = _func match y
lemma-78 = _func match y(Z, S)
lemma-78 = _func match y(S)
lemma-78 = _func match y(Z)
lemma-78 = _func S
lemma-78 = _func S(min2)
lemma-78 = _func min2
lemma-78 = _func min2(Nat, Nat)
lemma-78 = _func min2(Nat)
lemma-78 = _func Nat
lemma-78 = _func _abstract match Var
lemma-78 = _func _abstract match Var(Func, match Var)
lemma-78 = _func _abstract match Var(match Var)
lemma-78 = _func _abstract match Var(Func)
lemma-78 = _func _abstract Func
lemma-78 = _func _abstract match Var(Func, Func)
lemma-78 = _func _abstract Func(Func)
lemma-78 = _func _abstract Func(Var, Var)
lemma-78 = _func _abstract Func(Var)
lemma-78 = _func _abstract Var
lemma-78 = _func _length 15
lemma-78 = _func _lengthDistinct 15
lemma-78 = _func _distinctRatio 1.0
lemma-78 = _func _popular Nat
lemma-78 = _func recursive True
lemma-78 = _func _abstractLength 18
lemma-78 = _func _abstractLengthDistinct 10
lemma-78 = _func _nArgs 2

lemma-79 = ==
lemma-79 = ==(min2, Nat)
lemma-79 = ==(Nat)
lemma-79 = ==(min2)
lemma-79 = min2
lemma-79 = min2(Nat, S)
lemma-79 = min2(S)
lemma-79 = min2(Nat)
lemma-79 = Nat
lemma-79 = S
lemma-79 = S(Nat)
lemma-79 = _abstract Equals
lemma-79 = _abstract Equals(Func, Var)
lemma-79 = _abstract Equals(Var)
lemma-79 = _abstract Equals(Func)
lemma-79 = _abstract Func
lemma-79 = _abstract Func(Var, Func)
lemma-79 = _abstract Func(Func)
lemma-79 = _abstract Func(Var)
lemma-79 = _abstract Var
lemma-79 = _length 13
lemma-79 = _lengthDistinct 11
lemma-79 = _distinctRatio 0.8
lemma-79 = _popular Nat
lemma-79 = _commutative False
lemma-79 = _associative False
lemma-79 = _distributive False
lemma-79 = _abstractLength 13
lemma-79 = _abstractLengthDistinct 9
lemma-79 = _innerFunctionApplication True
lemma-79 = _innerFunctionDepth 2
lemma-79 = _func match x
lemma-79 = _func match x(Z, match y)
lemma-79 = _func match x(match y)
lemma-79 = _func match x(Z)
lemma-79 = _func Z
lemma-79 = _func match y
lemma-79 = _func match y(Z, S)
lemma-79 = _func match y(S)
lemma-79 = _func match y(Z)
lemma-79 = _func S
lemma-79 = _func S(min2)
lemma-79 = _func min2
lemma-79 = _func min2(Nat, Nat)
lemma-79 = _func min2(Nat)
lemma-79 = _func Nat
lemma-79 = _func _abstract match Var
lemma-79 = _func _abstract match Var(Func, match Var)
lemma-79 = _func _abstract match Var(match Var)
lemma-79 = _func _abstract match Var(Func)
lemma-79 = _func _abstract Func
lemma-79 = _func _abstract match Var(Func, Func)
lemma-79 = _func _abstract Func(Func)
lemma-79 = _func _abstract Func(Var, Var)
lemma-79 = _func _abstract Func(Var)
lemma-79 = _func _abstract Var
lemma-79 = _func _length 15
lemma-79 = _func _lengthDistinct 15
lemma-79 = _func _distinctRatio 1.0
lemma-79 = _func _popular Nat
lemma-79 = _func recursive True
lemma-79 = _func _abstractLength 18
lemma-79 = _func _abstractLengthDistinct 10
lemma-79 = _func _nArgs 2

lemma-80 = ==
lemma-80 = ==(min2, min2)
lemma-80 = ==(min2)
lemma-80 = min2
lemma-80 = min2(Nat, min2)
lemma-80 = min2(min2)
lemma-80 = min2(Nat)
lemma-80 = Nat
lemma-80 = min2(Nat, Nat)
lemma-80 = _abstract Equals
lemma-80 = _abstract Equals(Func, Func)
lemma-80 = _abstract Equals(Func)
lemma-80 = _abstract Func
lemma-80 = _abstract Func(Var, Func)
lemma-80 = _abstract Func(Func)
lemma-80 = _abstract Func(Var)
lemma-80 = _abstract Var
lemma-80 = _abstract Func(Var, Var)
lemma-80 = _length 21
lemma-80 = _lengthDistinct 9
lemma-80 = _distinctRatio 0.4
lemma-80 = _popular Nat
lemma-80 = _commutative False
lemma-80 = _associative False
lemma-80 = _distributive False
lemma-80 = _abstractLength 21
lemma-80 = _abstractLengthDistinct 9
lemma-80 = _innerFunctionApplication True
lemma-80 = _innerFunctionDepth 2
lemma-80 = _func match x
lemma-80 = _func match x(Z, match y)
lemma-80 = _func match x(match y)
lemma-80 = _func match x(Z)
lemma-80 = _func Z
lemma-80 = _func match y
lemma-80 = _func match y(Z, S)
lemma-80 = _func match y(S)
lemma-80 = _func match y(Z)
lemma-80 = _func S
lemma-80 = _func S(min2)
lemma-80 = _func min2
lemma-80 = _func min2(Nat, Nat)
lemma-80 = _func min2(Nat)
lemma-80 = _func Nat
lemma-80 = _func _abstract match Var
lemma-80 = _func _abstract match Var(Func, match Var)
lemma-80 = _func _abstract match Var(match Var)
lemma-80 = _func _abstract match Var(Func)
lemma-80 = _func _abstract Func
lemma-80 = _func _abstract match Var(Func, Func)
lemma-80 = _func _abstract Func(Func)
lemma-80 = _func _abstract Func(Var, Var)
lemma-80 = _func _abstract Func(Var)
lemma-80 = _func _abstract Var
lemma-80 = _func _length 15
lemma-80 = _func _lengthDistinct 15
lemma-80 = _func _distinctRatio 1.0
lemma-80 = _func _popular Nat
lemma-80 = _func recursive True
lemma-80 = _func _abstractLength 18
lemma-80 = _func _abstractLengthDistinct 10
lemma-80 = _func _nArgs 2

lemma-81 = ==
lemma-81 = ==(min2, min2)
lemma-81 = ==(min2)
lemma-81 = min2
lemma-81 = min2(min2, Nat)
lemma-81 = min2(Nat)
lemma-81 = min2(min2)
lemma-81 = min2(Nat, Nat)
lemma-81 = Nat
lemma-81 = min2(Nat, min2)
lemma-81 = _abstract Equals
lemma-81 = _abstract Equals(Func, Func)
lemma-81 = _abstract Equals(Func)
lemma-81 = _abstract Func
lemma-81 = _abstract Func(Func, Var)
lemma-81 = _abstract Func(Var)
lemma-81 = _abstract Func(Func)
lemma-81 = _abstract Func(Var, Var)
lemma-81 = _abstract Var
lemma-81 = _abstract Func(Var, Func)
lemma-81 = _length 26
lemma-81 = _lengthDistinct 10
lemma-81 = _distinctRatio 0.4
lemma-81 = _popular Nat
lemma-81 = _commutative False
lemma-81 = _associative True
lemma-81 = _distributive False
lemma-81 = _abstractLength 26
lemma-81 = _abstractLengthDistinct 10
lemma-81 = _innerFunctionApplication True
lemma-81 = _innerFunctionDepth 2
lemma-81 = _func match x
lemma-81 = _func match x(Z, match y)
lemma-81 = _func match x(match y)
lemma-81 = _func match x(Z)
lemma-81 = _func Z
lemma-81 = _func match y
lemma-81 = _func match y(Z, S)
lemma-81 = _func match y(S)
lemma-81 = _func match y(Z)
lemma-81 = _func S
lemma-81 = _func S(min2)
lemma-81 = _func min2
lemma-81 = _func min2(Nat, Nat)
lemma-81 = _func min2(Nat)
lemma-81 = _func Nat
lemma-81 = _func _abstract match Var
lemma-81 = _func _abstract match Var(Func, match Var)
lemma-81 = _func _abstract match Var(match Var)
lemma-81 = _func _abstract match Var(Func)
lemma-81 = _func _abstract Func
lemma-81 = _func _abstract match Var(Func, Func)
lemma-81 = _func _abstract Func(Func)
lemma-81 = _func _abstract Func(Var, Var)
lemma-81 = _func _abstract Func(Var)
lemma-81 = _func _abstract Var
lemma-81 = _func _length 15
lemma-81 = _func _lengthDistinct 15
lemma-81 = _func _distinctRatio 1.0
lemma-81 = _func _popular Nat
lemma-81 = _func recursive True
lemma-81 = _func _abstractLength 18
lemma-81 = _func _abstractLengthDistinct 10
lemma-81 = _func _nArgs 2

lemma-82 = ==
lemma-82 = ==(min2, S)
lemma-82 = ==(S)
lemma-82 = ==(min2)
lemma-82 = min2
lemma-82 = min2(S, S)
lemma-82 = min2(S)
lemma-82 = S
lemma-82 = S(Nat)
lemma-82 = Nat
lemma-82 = S(min2)
lemma-82 = min2(Nat, Nat)
lemma-82 = min2(Nat)
lemma-82 = _abstract Equals
lemma-82 = _abstract Equals(Func, Func)
lemma-82 = _abstract Equals(Func)
lemma-82 = _abstract Func
lemma-82 = _abstract Func(Func, Func)
lemma-82 = _abstract Func(Func)
lemma-82 = _abstract Func(Var)
lemma-82 = _abstract Var
lemma-82 = _abstract Func(Var, Var)
lemma-82 = _length 22
lemma-82 = _lengthDistinct 13
lemma-82 = _distinctRatio 0.6
lemma-82 = _popular Nat
lemma-82 = _commutative False
lemma-82 = _associative False
lemma-82 = _distributive False
lemma-82 = _abstractLength 22
lemma-82 = _abstractLengthDistinct 9
lemma-82 = _innerFunctionApplication True
lemma-82 = _innerFunctionDepth 2
lemma-82 = _func match x
lemma-82 = _func match x(Z, match y)
lemma-82 = _func match x(match y)
lemma-82 = _func match x(Z)
lemma-82 = _func Z
lemma-82 = _func match y
lemma-82 = _func match y(Z, S)
lemma-82 = _func match y(S)
lemma-82 = _func match y(Z)
lemma-82 = _func S
lemma-82 = _func S(min2)
lemma-82 = _func min2
lemma-82 = _func min2(Nat, Nat)
lemma-82 = _func min2(Nat)
lemma-82 = _func Nat
lemma-82 = _func _abstract match Var
lemma-82 = _func _abstract match Var(Func, match Var)
lemma-82 = _func _abstract match Var(match Var)
lemma-82 = _func _abstract match Var(Func)
lemma-82 = _func _abstract Func
lemma-82 = _func _abstract match Var(Func, Func)
lemma-82 = _func _abstract Func(Func)
lemma-82 = _func _abstract Func(Var, Var)
lemma-82 = _func _abstract Func(Var)
lemma-82 = _func _abstract Var
lemma-82 = _func _length 15
lemma-82 = _func _lengthDistinct 15
lemma-82 = _func _distinctRatio 1.0
lemma-82 = _func _popular Nat
lemma-82 = _func recursive True
lemma-82 = _func _abstractLength 18
lemma-82 = _func _abstractLengthDistinct 10
lemma-82 = _func _nArgs 2

lemma-83 = ==
lemma-83 = ==(dropWhile, list)
lemma-83 = ==(list)
lemma-83 = ==(dropWhile)
lemma-83 = dropWhile
lemma-83 = dropWhile(lambda, list)
lemma-83 = dropWhile(list)
lemma-83 = dropWhile(lambda)
lemma-83 = lambda
lemma-83 = lambda(False)
lemma-83 = False
lemma-83 = list
lemma-83 = _abstract Equals
lemma-83 = _abstract Equals(Func, Var)
lemma-83 = _abstract Equals(Var)
lemma-83 = _abstract Equals(Func)
lemma-83 = _abstract Func
lemma-83 = _abstract Func(Lambda, Var)
lemma-83 = _abstract Func(Var)
lemma-83 = _abstract Func(Lambda)
lemma-83 = _abstract Lambda
lemma-83 = _abstract Lambda(Const)
lemma-83 = _abstract Const
lemma-83 = _abstract Var
lemma-83 = _length 13
lemma-83 = _lengthDistinct 12
lemma-83 = _distinctRatio 0.9
lemma-83 = _popular list
lemma-83 = _commutative False
lemma-83 = _associative False
lemma-83 = _distributive False
lemma-83 = _abstractLength 13
lemma-83 = _abstractLengthDistinct 12
lemma-83 = _innerFunctionApplication False
lemma-83 = _innerFunctionDepth 1
lemma-83 = _func match y
lemma-83 = _func match y(nil, match @)
lemma-83 = _func match y(match @)
lemma-83 = _func match y(nil)
lemma-83 = _func nil
lemma-83 = _func match @
lemma-83 = _func match @(dropWhile, cons)
lemma-83 = _func match @(cons)
lemma-83 = _func match @(dropWhile)
lemma-83 = _func dropWhile
lemma-83 = _func dropWhile(a :=>: Boolean, list)
lemma-83 = _func dropWhile(list)
lemma-83 = _func dropWhile(a :=>: Boolean)
lemma-83 = _func a :=>: Boolean
lemma-83 = _func list
lemma-83 = _func cons
lemma-83 = _func cons(anyType, list)
lemma-83 = _func cons(list)
lemma-83 = _func cons(anyType)
lemma-83 = _func anyType
lemma-83 = _func _abstract match Var
lemma-83 = _func _abstract match Var(Func, match @)
lemma-83 = _func _abstract match Var(match @)
lemma-83 = _func _abstract match Var(Func)
lemma-83 = _func _abstract Func
lemma-83 = _func _abstract match @
lemma-83 = _func _abstract match @(Func, Func)
lemma-83 = _func _abstract match @(Func)
lemma-83 = _func _abstract Func(FuncType, Var)
lemma-83 = _func _abstract Func(Var)
lemma-83 = _func _abstract Func(FuncType)
lemma-83 = _func _abstract FuncType
lemma-83 = _func _abstract Var
lemma-83 = _func _abstract Func(Var, Var)
lemma-83 = _func _length 20
lemma-83 = _func _lengthDistinct 20
lemma-83 = _func _distinctRatio 1.0
lemma-83 = _func _popular a :=>: Boolean
lemma-83 = _func recursive True
lemma-83 = _func _abstractLength 21
lemma-83 = _func _abstractLengthDistinct 14
lemma-83 = _func _nArgs 2

lemma-84 = ==
lemma-84 = ==(dropWhile, nil)
lemma-84 = ==(nil)
lemma-84 = ==(dropWhile)
lemma-84 = dropWhile
lemma-84 = dropWhile(x :=>: Boolean, nil)
lemma-84 = dropWhile(nil)
lemma-84 = dropWhile(x :=>: Boolean)
lemma-84 = x :=>: Boolean
lemma-84 = nil
lemma-84 = _abstract Equals
lemma-84 = _abstract Equals(Func, Func)
lemma-84 = _abstract Equals(Func)
lemma-84 = _abstract Func
lemma-84 = _abstract Func(FuncType, Func)
lemma-84 = _abstract Func(Func)
lemma-84 = _abstract Func(FuncType)
lemma-84 = _abstract FuncType
lemma-84 = _length 11
lemma-84 = _lengthDistinct 10
lemma-84 = _distinctRatio 0.9
lemma-84 = _popular nil
lemma-84 = _commutative False
lemma-84 = _associative False
lemma-84 = _distributive False
lemma-84 = _abstractLength 11
lemma-84 = _abstractLengthDistinct 8
lemma-84 = _innerFunctionApplication True
lemma-84 = _innerFunctionDepth 2
lemma-84 = _func match y
lemma-84 = _func match y(nil, match @)
lemma-84 = _func match y(match @)
lemma-84 = _func match y(nil)
lemma-84 = _func nil
lemma-84 = _func match @
lemma-84 = _func match @(dropWhile, cons)
lemma-84 = _func match @(cons)
lemma-84 = _func match @(dropWhile)
lemma-84 = _func dropWhile
lemma-84 = _func dropWhile(a :=>: Boolean, list)
lemma-84 = _func dropWhile(list)
lemma-84 = _func dropWhile(a :=>: Boolean)
lemma-84 = _func a :=>: Boolean
lemma-84 = _func list
lemma-84 = _func cons
lemma-84 = _func cons(anyType, list)
lemma-84 = _func cons(list)
lemma-84 = _func cons(anyType)
lemma-84 = _func anyType
lemma-84 = _func _abstract match Var
lemma-84 = _func _abstract match Var(Func, match @)
lemma-84 = _func _abstract match Var(match @)
lemma-84 = _func _abstract match Var(Func)
lemma-84 = _func _abstract Func
lemma-84 = _func _abstract match @
lemma-84 = _func _abstract match @(Func, Func)
lemma-84 = _func _abstract match @(Func)
lemma-84 = _func _abstract Func(FuncType, Var)
lemma-84 = _func _abstract Func(Var)
lemma-84 = _func _abstract Func(FuncType)
lemma-84 = _func _abstract FuncType
lemma-84 = _func _abstract Var
lemma-84 = _func _abstract Func(Var, Var)
lemma-84 = _func _length 20
lemma-84 = _func _lengthDistinct 20
lemma-84 = _func _distinctRatio 1.0
lemma-84 = _func _popular a :=>: Boolean
lemma-84 = _func recursive True
lemma-84 = _func _abstractLength 21
lemma-84 = _func _abstractLengthDistinct 14
lemma-84 = _func _nArgs 2

lemma-85 = ==
lemma-85 = ==(dropWhile, dropWhile)
lemma-85 = ==(dropWhile)
lemma-85 = dropWhile
lemma-85 = dropWhile(x :=>: Boolean, dropWhile)
lemma-85 = dropWhile(dropWhile)
lemma-85 = dropWhile(x :=>: Boolean)
lemma-85 = x :=>: Boolean
lemma-85 = dropWhile(x :=>: Boolean, list)
lemma-85 = dropWhile(list)
lemma-85 = list
lemma-85 = _abstract Equals
lemma-85 = _abstract Equals(Func, Func)
lemma-85 = _abstract Equals(Func)
lemma-85 = _abstract Func
lemma-85 = _abstract Func(FuncType, Func)
lemma-85 = _abstract Func(Func)
lemma-85 = _abstract Func(FuncType)
lemma-85 = _abstract FuncType
lemma-85 = _abstract Func(FuncType, Var)
lemma-85 = _abstract Func(Var)
lemma-85 = _abstract Var
lemma-85 = _length 21
lemma-85 = _lengthDistinct 11
lemma-85 = _distinctRatio 0.5
lemma-85 = _popular dropWhile
lemma-85 = _commutative False
lemma-85 = _associative False
lemma-85 = _distributive False
lemma-85 = _abstractLength 21
lemma-85 = _abstractLengthDistinct 11
lemma-85 = _innerFunctionApplication True
lemma-85 = _innerFunctionDepth 2
lemma-85 = _func match y
lemma-85 = _func match y(nil, match @)
lemma-85 = _func match y(match @)
lemma-85 = _func match y(nil)
lemma-85 = _func nil
lemma-85 = _func match @
lemma-85 = _func match @(dropWhile, cons)
lemma-85 = _func match @(cons)
lemma-85 = _func match @(dropWhile)
lemma-85 = _func dropWhile
lemma-85 = _func dropWhile(a :=>: Boolean, list)
lemma-85 = _func dropWhile(list)
lemma-85 = _func dropWhile(a :=>: Boolean)
lemma-85 = _func a :=>: Boolean
lemma-85 = _func list
lemma-85 = _func cons
lemma-85 = _func cons(anyType, list)
lemma-85 = _func cons(list)
lemma-85 = _func cons(anyType)
lemma-85 = _func anyType
lemma-85 = _func _abstract match Var
lemma-85 = _func _abstract match Var(Func, match @)
lemma-85 = _func _abstract match Var(match @)
lemma-85 = _func _abstract match Var(Func)
lemma-85 = _func _abstract Func
lemma-85 = _func _abstract match @
lemma-85 = _func _abstract match @(Func, Func)
lemma-85 = _func _abstract match @(Func)
lemma-85 = _func _abstract Func(FuncType, Var)
lemma-85 = _func _abstract Func(Var)
lemma-85 = _func _abstract Func(FuncType)
lemma-85 = _func _abstract FuncType
lemma-85 = _func _abstract Var
lemma-85 = _func _abstract Func(Var, Var)
lemma-85 = _func _length 20
lemma-85 = _func _lengthDistinct 20
lemma-85 = _func _distinctRatio 1.0
lemma-85 = _func _popular a :=>: Boolean
lemma-85 = _func recursive True
lemma-85 = _func _abstractLength 21
lemma-85 = _func _abstractLengthDistinct 14
lemma-85 = _func _nArgs 2

lemma-86 = ==
lemma-86 = ==(takeWhile, list)
lemma-86 = ==(list)
lemma-86 = ==(takeWhile)
lemma-86 = takeWhile
lemma-86 = takeWhile(lambda, list)
lemma-86 = takeWhile(list)
lemma-86 = takeWhile(lambda)
lemma-86 = lambda
lemma-86 = lambda(True)
lemma-86 = True
lemma-86 = list
lemma-86 = _abstract Equals
lemma-86 = _abstract Equals(Func, Var)
lemma-86 = _abstract Equals(Var)
lemma-86 = _abstract Equals(Func)
lemma-86 = _abstract Func
lemma-86 = _abstract Func(Lambda, Var)
lemma-86 = _abstract Func(Var)
lemma-86 = _abstract Func(Lambda)
lemma-86 = _abstract Lambda
lemma-86 = _abstract Lambda(Const)
lemma-86 = _abstract Const
lemma-86 = _abstract Var
lemma-86 = _length 13
lemma-86 = _lengthDistinct 12
lemma-86 = _distinctRatio 0.9
lemma-86 = _popular list
lemma-86 = _commutative False
lemma-86 = _associative False
lemma-86 = _distributive False
lemma-86 = _abstractLength 13
lemma-86 = _abstractLengthDistinct 12
lemma-86 = _innerFunctionApplication False
lemma-86 = _innerFunctionDepth 1
lemma-86 = _func match y
lemma-86 = _func match y(nil, match @)
lemma-86 = _func match y(match @)
lemma-86 = _func match y(nil)
lemma-86 = _func nil
lemma-86 = _func match @
lemma-86 = _func match @(cons, nil)
lemma-86 = _func match @(nil)
lemma-86 = _func match @(cons)
lemma-86 = _func cons
lemma-86 = _func cons(anyType, takeWhile)
lemma-86 = _func cons(takeWhile)
lemma-86 = _func cons(anyType)
lemma-86 = _func anyType
lemma-86 = _func takeWhile
lemma-86 = _func takeWhile(a :=>: Boolean, list)
lemma-86 = _func takeWhile(list)
lemma-86 = _func takeWhile(a :=>: Boolean)
lemma-86 = _func a :=>: Boolean
lemma-86 = _func list
lemma-86 = _func _abstract match Var
lemma-86 = _func _abstract match Var(Func, match @)
lemma-86 = _func _abstract match Var(match @)
lemma-86 = _func _abstract match Var(Func)
lemma-86 = _func _abstract Func
lemma-86 = _func _abstract match @
lemma-86 = _func _abstract match @(Func, Func)
lemma-86 = _func _abstract match @(Func)
lemma-86 = _func _abstract Func(Var, Func)
lemma-86 = _func _abstract Func(Func)
lemma-86 = _func _abstract Func(Var)
lemma-86 = _func _abstract Var
lemma-86 = _func _abstract Func(FuncType, Var)
lemma-86 = _func _abstract Func(FuncType)
lemma-86 = _func _abstract FuncType
lemma-86 = _func _length 20
lemma-86 = _func _lengthDistinct 20
lemma-86 = _func _distinctRatio 1.0
lemma-86 = _func _popular a :=>: Boolean
lemma-86 = _func recursive True
lemma-86 = _func _abstractLength 21
lemma-86 = _func _abstractLengthDistinct 15
lemma-86 = _func _nArgs 2

lemma-87 = ==
lemma-87 = ==(takeWhile, nil)
lemma-87 = ==(nil)
lemma-87 = ==(takeWhile)
lemma-87 = takeWhile
lemma-87 = takeWhile(x :=>: Boolean, nil)
lemma-87 = takeWhile(nil)
lemma-87 = takeWhile(x :=>: Boolean)
lemma-87 = x :=>: Boolean
lemma-87 = nil
lemma-87 = _abstract Equals
lemma-87 = _abstract Equals(Func, Func)
lemma-87 = _abstract Equals(Func)
lemma-87 = _abstract Func
lemma-87 = _abstract Func(FuncType, Func)
lemma-87 = _abstract Func(Func)
lemma-87 = _abstract Func(FuncType)
lemma-87 = _abstract FuncType
lemma-87 = _length 11
lemma-87 = _lengthDistinct 10
lemma-87 = _distinctRatio 0.9
lemma-87 = _popular nil
lemma-87 = _commutative False
lemma-87 = _associative False
lemma-87 = _distributive False
lemma-87 = _abstractLength 11
lemma-87 = _abstractLengthDistinct 8
lemma-87 = _innerFunctionApplication True
lemma-87 = _innerFunctionDepth 2
lemma-87 = _func match y
lemma-87 = _func match y(nil, match @)
lemma-87 = _func match y(match @)
lemma-87 = _func match y(nil)
lemma-87 = _func nil
lemma-87 = _func match @
lemma-87 = _func match @(cons, nil)
lemma-87 = _func match @(nil)
lemma-87 = _func match @(cons)
lemma-87 = _func cons
lemma-87 = _func cons(anyType, takeWhile)
lemma-87 = _func cons(takeWhile)
lemma-87 = _func cons(anyType)
lemma-87 = _func anyType
lemma-87 = _func takeWhile
lemma-87 = _func takeWhile(a :=>: Boolean, list)
lemma-87 = _func takeWhile(list)
lemma-87 = _func takeWhile(a :=>: Boolean)
lemma-87 = _func a :=>: Boolean
lemma-87 = _func list
lemma-87 = _func _abstract match Var
lemma-87 = _func _abstract match Var(Func, match @)
lemma-87 = _func _abstract match Var(match @)
lemma-87 = _func _abstract match Var(Func)
lemma-87 = _func _abstract Func
lemma-87 = _func _abstract match @
lemma-87 = _func _abstract match @(Func, Func)
lemma-87 = _func _abstract match @(Func)
lemma-87 = _func _abstract Func(Var, Func)
lemma-87 = _func _abstract Func(Func)
lemma-87 = _func _abstract Func(Var)
lemma-87 = _func _abstract Var
lemma-87 = _func _abstract Func(FuncType, Var)
lemma-87 = _func _abstract Func(FuncType)
lemma-87 = _func _abstract FuncType
lemma-87 = _func _length 20
lemma-87 = _func _lengthDistinct 20
lemma-87 = _func _distinctRatio 1.0
lemma-87 = _func _popular a :=>: Boolean
lemma-87 = _func recursive True
lemma-87 = _func _abstractLength 21
lemma-87 = _func _abstractLengthDistinct 15
lemma-87 = _func _nArgs 2

lemma-88 = ==
lemma-88 = ==(takeWhile, takeWhile)
lemma-88 = ==(takeWhile)
lemma-88 = takeWhile
lemma-88 = takeWhile(x :=>: Boolean, takeWhile)
lemma-88 = takeWhile(takeWhile)
lemma-88 = takeWhile(x :=>: Boolean)
lemma-88 = x :=>: Boolean
lemma-88 = takeWhile(x :=>: Boolean, list)
lemma-88 = takeWhile(list)
lemma-88 = list
lemma-88 = _abstract Equals
lemma-88 = _abstract Equals(Func, Func)
lemma-88 = _abstract Equals(Func)
lemma-88 = _abstract Func
lemma-88 = _abstract Func(FuncType, Func)
lemma-88 = _abstract Func(Func)
lemma-88 = _abstract Func(FuncType)
lemma-88 = _abstract FuncType
lemma-88 = _abstract Func(FuncType, Var)
lemma-88 = _abstract Func(Var)
lemma-88 = _abstract Var
lemma-88 = _length 21
lemma-88 = _lengthDistinct 11
lemma-88 = _distinctRatio 0.5
lemma-88 = _popular takeWhile
lemma-88 = _commutative False
lemma-88 = _associative False
lemma-88 = _distributive False
lemma-88 = _abstractLength 21
lemma-88 = _abstractLengthDistinct 11
lemma-88 = _innerFunctionApplication True
lemma-88 = _innerFunctionDepth 2
lemma-88 = _func match y
lemma-88 = _func match y(nil, match @)
lemma-88 = _func match y(match @)
lemma-88 = _func match y(nil)
lemma-88 = _func nil
lemma-88 = _func match @
lemma-88 = _func match @(cons, nil)
lemma-88 = _func match @(nil)
lemma-88 = _func match @(cons)
lemma-88 = _func cons
lemma-88 = _func cons(anyType, takeWhile)
lemma-88 = _func cons(takeWhile)
lemma-88 = _func cons(anyType)
lemma-88 = _func anyType
lemma-88 = _func takeWhile
lemma-88 = _func takeWhile(a :=>: Boolean, list)
lemma-88 = _func takeWhile(list)
lemma-88 = _func takeWhile(a :=>: Boolean)
lemma-88 = _func a :=>: Boolean
lemma-88 = _func list
lemma-88 = _func _abstract match Var
lemma-88 = _func _abstract match Var(Func, match @)
lemma-88 = _func _abstract match Var(match @)
lemma-88 = _func _abstract match Var(Func)
lemma-88 = _func _abstract Func
lemma-88 = _func _abstract match @
lemma-88 = _func _abstract match @(Func, Func)
lemma-88 = _func _abstract match @(Func)
lemma-88 = _func _abstract Func(Var, Func)
lemma-88 = _func _abstract Func(Func)
lemma-88 = _func _abstract Func(Var)
lemma-88 = _func _abstract Var
lemma-88 = _func _abstract Func(FuncType, Var)
lemma-88 = _func _abstract Func(FuncType)
lemma-88 = _func _abstract FuncType
lemma-88 = _func _length 20
lemma-88 = _func _lengthDistinct 20
lemma-88 = _func _distinctRatio 1.0
lemma-88 = _func _popular a :=>: Boolean
lemma-88 = _func recursive True
lemma-88 = _func _abstractLength 21
lemma-88 = _func _abstractLengthDistinct 15
lemma-88 = _func _nArgs 2

lemma-89 = ==
lemma-89 = ==(takeWhile, takeWhile)
lemma-89 = ==(takeWhile)
lemma-89 = takeWhile
lemma-89 = takeWhile(x :=>: Boolean, takeWhile)
lemma-89 = takeWhile(takeWhile)
lemma-89 = takeWhile(x :=>: Boolean)
lemma-89 = x :=>: Boolean
lemma-89 = takeWhile(x :=>: Boolean, list)
lemma-89 = takeWhile(list)
lemma-89 = list
lemma-89 = _abstract Equals
lemma-89 = _abstract Equals(Func, Func)
lemma-89 = _abstract Equals(Func)
lemma-89 = _abstract Func
lemma-89 = _abstract Func(FuncType, Func)
lemma-89 = _abstract Func(Func)
lemma-89 = _abstract Func(FuncType)
lemma-89 = _abstract FuncType
lemma-89 = _abstract Func(FuncType, Var)
lemma-89 = _abstract Func(Var)
lemma-89 = _abstract Var
lemma-89 = _length 26
lemma-89 = _lengthDistinct 11
lemma-89 = _distinctRatio 0.4
lemma-89 = _popular takeWhile
lemma-89 = _commutative False
lemma-89 = _associative False
lemma-89 = _distributive False
lemma-89 = _abstractLength 26
lemma-89 = _abstractLengthDistinct 11
lemma-89 = _innerFunctionApplication True
lemma-89 = _innerFunctionDepth 2
lemma-89 = _func match y
lemma-89 = _func match y(nil, match @)
lemma-89 = _func match y(match @)
lemma-89 = _func match y(nil)
lemma-89 = _func nil
lemma-89 = _func match @
lemma-89 = _func match @(cons, nil)
lemma-89 = _func match @(nil)
lemma-89 = _func match @(cons)
lemma-89 = _func cons
lemma-89 = _func cons(anyType, takeWhile)
lemma-89 = _func cons(takeWhile)
lemma-89 = _func cons(anyType)
lemma-89 = _func anyType
lemma-89 = _func takeWhile
lemma-89 = _func takeWhile(a :=>: Boolean, list)
lemma-89 = _func takeWhile(list)
lemma-89 = _func takeWhile(a :=>: Boolean)
lemma-89 = _func a :=>: Boolean
lemma-89 = _func list
lemma-89 = _func _abstract match Var
lemma-89 = _func _abstract match Var(Func, match @)
lemma-89 = _func _abstract match Var(match @)
lemma-89 = _func _abstract match Var(Func)
lemma-89 = _func _abstract Func
lemma-89 = _func _abstract match @
lemma-89 = _func _abstract match @(Func, Func)
lemma-89 = _func _abstract match @(Func)
lemma-89 = _func _abstract Func(Var, Func)
lemma-89 = _func _abstract Func(Func)
lemma-89 = _func _abstract Func(Var)
lemma-89 = _func _abstract Var
lemma-89 = _func _abstract Func(FuncType, Var)
lemma-89 = _func _abstract Func(FuncType)
lemma-89 = _func _abstract FuncType
lemma-89 = _func _length 20
lemma-89 = _func _lengthDistinct 20
lemma-89 = _func _distinctRatio 1.0
lemma-89 = _func _popular a :=>: Boolean
lemma-89 = _func recursive True
lemma-89 = _func _abstractLength 21
lemma-89 = _func _abstractLengthDistinct 15
lemma-89 = _func _nArgs 2

lemma-90 = ==
lemma-90 = ==(take, nil)
lemma-90 = ==(nil)
lemma-90 = ==(take)
lemma-90 = take
lemma-90 = take(Z, list)
lemma-90 = take(list)
lemma-90 = take(Z)
lemma-90 = Z
lemma-90 = list
lemma-90 = nil
lemma-90 = _abstract Equals
lemma-90 = _abstract Equals(Func, Func)
lemma-90 = _abstract Equals(Func)
lemma-90 = _abstract Func
lemma-90 = _abstract Func(Func, Var)
lemma-90 = _abstract Func(Var)
lemma-90 = _abstract Func(Func)
lemma-90 = _abstract Var
lemma-90 = _length 11
lemma-90 = _lengthDistinct 11
lemma-90 = _distinctRatio 1.0
lemma-90 = _popular ==
lemma-90 = _commutative False
lemma-90 = _associative False
lemma-90 = _distributive False
lemma-90 = _abstractLength 11
lemma-90 = _abstractLengthDistinct 8
lemma-90 = _innerFunctionApplication True
lemma-90 = _innerFunctionDepth 2
lemma-90 = _func match x
lemma-90 = _func match x(nil, match y)
lemma-90 = _func match x(match y)
lemma-90 = _func match x(nil)
lemma-90 = _func nil
lemma-90 = _func match y
lemma-90 = _func match y(nil, cons)
lemma-90 = _func match y(cons)
lemma-90 = _func match y(nil)
lemma-90 = _func cons
lemma-90 = _func cons(anyType, take)
lemma-90 = _func cons(take)
lemma-90 = _func cons(anyType)
lemma-90 = _func anyType
lemma-90 = _func take
lemma-90 = _func take(Nat, list)
lemma-90 = _func take(list)
lemma-90 = _func take(Nat)
lemma-90 = _func Nat
lemma-90 = _func list
lemma-90 = _func _abstract match Var
lemma-90 = _func _abstract match Var(Func, match Var)
lemma-90 = _func _abstract match Var(match Var)
lemma-90 = _func _abstract match Var(Func)
lemma-90 = _func _abstract Func
lemma-90 = _func _abstract match Var(Func, Func)
lemma-90 = _func _abstract Func(Var, Func)
lemma-90 = _func _abstract Func(Func)
lemma-90 = _func _abstract Func(Var)
lemma-90 = _func _abstract Var
lemma-90 = _func _abstract Func(Var, Var)
lemma-90 = _func _length 20
lemma-90 = _func _lengthDistinct 20
lemma-90 = _func _distinctRatio 1.0
lemma-90 = _func _popular Nat
lemma-90 = _func recursive True
lemma-90 = _func _abstractLength 21
lemma-90 = _func _abstractLengthDistinct 11
lemma-90 = _func _nArgs 2

lemma-91 = ==
lemma-91 = ==(take, map2)
lemma-91 = ==(map2)
lemma-91 = ==(take)
lemma-91 = take
lemma-91 = take(Nat, map2)
lemma-91 = take(map2)
lemma-91 = take(Nat)
lemma-91 = Nat
lemma-91 = map2
lemma-91 = map2(b :=>: a, list)
lemma-91 = map2(list)
lemma-91 = map2(b :=>: a)
lemma-91 = b :=>: a
lemma-91 = list
lemma-91 = map2(b :=>: a, take)
lemma-91 = map2(take)
lemma-91 = take(Nat, list)
lemma-91 = take(list)
lemma-91 = _abstract Equals
lemma-91 = _abstract Equals(Func, Func)
lemma-91 = _abstract Equals(Func)
lemma-91 = _abstract Func
lemma-91 = _abstract Func(Var, Func)
lemma-91 = _abstract Func(Func)
lemma-91 = _abstract Func(Var)
lemma-91 = _abstract Var
lemma-91 = _abstract Func(FuncType, Var)
lemma-91 = _abstract Func(FuncType)
lemma-91 = _abstract FuncType
lemma-91 = _abstract Func(FuncType, Func)
lemma-91 = _abstract Func(Var, Var)
lemma-91 = _length 26
lemma-91 = _lengthDistinct 19
lemma-91 = _distinctRatio 0.7
lemma-91 = _popular Nat
lemma-91 = _commutative False
lemma-91 = _associative False
lemma-91 = _distributive False
lemma-91 = _abstractLength 26
lemma-91 = _abstractLengthDistinct 13
lemma-91 = _innerFunctionApplication True
lemma-91 = _innerFunctionDepth 2
lemma-91 = _func match y
lemma-91 = _func match y(nil, cons)
lemma-91 = _func match y(cons)
lemma-91 = _func match y(nil)
lemma-91 = _func nil
lemma-91 = _func cons
lemma-91 = _func cons(@, map2)
lemma-91 = _func cons(map2)
lemma-91 = _func cons(@)
lemma-91 = _func @
lemma-91 = _func @(a :=>: b, anyType)
lemma-91 = _func @(anyType)
lemma-91 = _func @(a :=>: b)
lemma-91 = _func a :=>: b
lemma-91 = _func anyType
lemma-91 = _func map2
lemma-91 = _func map2(a :=>: b, list)
lemma-91 = _func map2(list)
lemma-91 = _func map2(a :=>: b)
lemma-91 = _func list
lemma-91 = _func _abstract match Var
lemma-91 = _func _abstract match Var(Func, Func)
lemma-91 = _func _abstract match Var(Func)
lemma-91 = _func _abstract Func
lemma-91 = _func _abstract Func(@, Func)
lemma-91 = _func _abstract Func(Func)
lemma-91 = _func _abstract Func(@)
lemma-91 = _func _abstract @
lemma-91 = _func _abstract @(FuncType, Var)
lemma-91 = _func _abstract @(Var)
lemma-91 = _func _abstract @(FuncType)
lemma-91 = _func _abstract FuncType
lemma-91 = _func _abstract Var
lemma-91 = _func _abstract Func(FuncType, Var)
lemma-91 = _func _abstract Func(Var)
lemma-91 = _func _abstract Func(FuncType)
lemma-91 = _func _length 20
lemma-91 = _func _lengthDistinct 20
lemma-91 = _func _distinctRatio 1.0
lemma-91 = _func _popular @
lemma-91 = _func recursive True
lemma-91 = _func _abstractLength 21
lemma-91 = _func _abstractLengthDistinct 16
lemma-91 = _func _nArgs 2
lemma-91 = _func match x
lemma-91 = _func match x(nil, match y)
lemma-91 = _func match x(match y)
lemma-91 = _func match x(nil)
lemma-91 = _func nil
lemma-91 = _func match y
lemma-91 = _func match y(nil, cons)
lemma-91 = _func match y(cons)
lemma-91 = _func match y(nil)
lemma-91 = _func cons
lemma-91 = _func cons(anyType, take)
lemma-91 = _func cons(take)
lemma-91 = _func cons(anyType)
lemma-91 = _func anyType
lemma-91 = _func take
lemma-91 = _func take(Nat, list)
lemma-91 = _func take(list)
lemma-91 = _func take(Nat)
lemma-91 = _func Nat
lemma-91 = _func list
lemma-91 = _func _abstract match Var
lemma-91 = _func _abstract match Var(Func, match Var)
lemma-91 = _func _abstract match Var(match Var)
lemma-91 = _func _abstract match Var(Func)
lemma-91 = _func _abstract Func
lemma-91 = _func _abstract match Var(Func, Func)
lemma-91 = _func _abstract Func(Var, Func)
lemma-91 = _func _abstract Func(Func)
lemma-91 = _func _abstract Func(Var)
lemma-91 = _func _abstract Var
lemma-91 = _func _abstract Func(Var, Var)
lemma-91 = _func _length 20
lemma-91 = _func _lengthDistinct 20
lemma-91 = _func _distinctRatio 1.0
lemma-91 = _func _popular Nat
lemma-91 = _func recursive True
lemma-91 = _func _abstractLength 21
lemma-91 = _func _abstractLengthDistinct 11
lemma-91 = _func _nArgs 2

lemma-93 = ==
lemma-93 = ==(take, map2)
lemma-93 = ==(map2)
lemma-93 = ==(take)
lemma-93 = take
lemma-93 = take(Nat, map2)
lemma-93 = take(map2)
lemma-93 = take(Nat)
lemma-93 = Nat
lemma-93 = map2
lemma-93 = map2(y :=>: x, list)
lemma-93 = map2(list)
lemma-93 = map2(y :=>: x)
lemma-93 = y :=>: x
lemma-93 = list
lemma-93 = map2(y :=>: x, take)
lemma-93 = map2(take)
lemma-93 = take(Nat, list)
lemma-93 = take(list)
lemma-93 = _abstract Equals
lemma-93 = _abstract Equals(Func, Func)
lemma-93 = _abstract Equals(Func)
lemma-93 = _abstract Func
lemma-93 = _abstract Func(Var, Func)
lemma-93 = _abstract Func(Func)
lemma-93 = _abstract Func(Var)
lemma-93 = _abstract Var
lemma-93 = _abstract Func(FuncType, Var)
lemma-93 = _abstract Func(FuncType)
lemma-93 = _abstract FuncType
lemma-93 = _abstract Func(FuncType, Func)
lemma-93 = _abstract Func(Var, Var)
lemma-93 = _length 26
lemma-93 = _lengthDistinct 19
lemma-93 = _distinctRatio 0.7
lemma-93 = _popular Nat
lemma-93 = _commutative False
lemma-93 = _associative False
lemma-93 = _distributive False
lemma-93 = _abstractLength 26
lemma-93 = _abstractLengthDistinct 13
lemma-93 = _innerFunctionApplication True
lemma-93 = _innerFunctionDepth 2
lemma-93 = _func match y
lemma-93 = _func match y(nil, cons)
lemma-93 = _func match y(cons)
lemma-93 = _func match y(nil)
lemma-93 = _func nil
lemma-93 = _func cons
lemma-93 = _func cons(@, map2)
lemma-93 = _func cons(map2)
lemma-93 = _func cons(@)
lemma-93 = _func @
lemma-93 = _func @(a :=>: b, anyType)
lemma-93 = _func @(anyType)
lemma-93 = _func @(a :=>: b)
lemma-93 = _func a :=>: b
lemma-93 = _func anyType
lemma-93 = _func map2
lemma-93 = _func map2(a :=>: b, list)
lemma-93 = _func map2(list)
lemma-93 = _func map2(a :=>: b)
lemma-93 = _func list
lemma-93 = _func _abstract match Var
lemma-93 = _func _abstract match Var(Func, Func)
lemma-93 = _func _abstract match Var(Func)
lemma-93 = _func _abstract Func
lemma-93 = _func _abstract Func(@, Func)
lemma-93 = _func _abstract Func(Func)
lemma-93 = _func _abstract Func(@)
lemma-93 = _func _abstract @
lemma-93 = _func _abstract @(FuncType, Var)
lemma-93 = _func _abstract @(Var)
lemma-93 = _func _abstract @(FuncType)
lemma-93 = _func _abstract FuncType
lemma-93 = _func _abstract Var
lemma-93 = _func _abstract Func(FuncType, Var)
lemma-93 = _func _abstract Func(Var)
lemma-93 = _func _abstract Func(FuncType)
lemma-93 = _func _length 20
lemma-93 = _func _lengthDistinct 20
lemma-93 = _func _distinctRatio 1.0
lemma-93 = _func _popular @
lemma-93 = _func recursive True
lemma-93 = _func _abstractLength 21
lemma-93 = _func _abstractLengthDistinct 16
lemma-93 = _func _nArgs 2
lemma-93 = _func match x
lemma-93 = _func match x(nil, match y)
lemma-93 = _func match x(match y)
lemma-93 = _func match x(nil)
lemma-93 = _func nil
lemma-93 = _func match y
lemma-93 = _func match y(nil, cons)
lemma-93 = _func match y(cons)
lemma-93 = _func match y(nil)
lemma-93 = _func cons
lemma-93 = _func cons(anyType, take)
lemma-93 = _func cons(take)
lemma-93 = _func cons(anyType)
lemma-93 = _func anyType
lemma-93 = _func take
lemma-93 = _func take(Nat, list)
lemma-93 = _func take(list)
lemma-93 = _func take(Nat)
lemma-93 = _func Nat
lemma-93 = _func list
lemma-93 = _func _abstract match Var
lemma-93 = _func _abstract match Var(Func, match Var)
lemma-93 = _func _abstract match Var(match Var)
lemma-93 = _func _abstract match Var(Func)
lemma-93 = _func _abstract Func
lemma-93 = _func _abstract match Var(Func, Func)
lemma-93 = _func _abstract Func(Var, Func)
lemma-93 = _func _abstract Func(Func)
lemma-93 = _func _abstract Func(Var)
lemma-93 = _func _abstract Var
lemma-93 = _func _abstract Func(Var, Var)
lemma-93 = _func _length 20
lemma-93 = _func _lengthDistinct 20
lemma-93 = _func _distinctRatio 1.0
lemma-93 = _func _popular Nat
lemma-93 = _func recursive True
lemma-93 = _func _abstractLength 21
lemma-93 = _func _abstractLengthDistinct 11
lemma-93 = _func _nArgs 2

lemma-99 = ==
lemma-99 = ==(map2, nil)
lemma-99 = ==(nil)
lemma-99 = ==(map2)
lemma-99 = map2
lemma-99 = map2(y :=>: x, nil)
lemma-99 = map2(nil)
lemma-99 = map2(y :=>: x)
lemma-99 = y :=>: x
lemma-99 = nil
lemma-99 = _abstract Equals
lemma-99 = _abstract Equals(Func, Func)
lemma-99 = _abstract Equals(Func)
lemma-99 = _abstract Func
lemma-99 = _abstract Func(FuncType, Func)
lemma-99 = _abstract Func(Func)
lemma-99 = _abstract Func(FuncType)
lemma-99 = _abstract FuncType
lemma-99 = _length 11
lemma-99 = _lengthDistinct 10
lemma-99 = _distinctRatio 0.9
lemma-99 = _popular nil
lemma-99 = _commutative False
lemma-99 = _associative False
lemma-99 = _distributive False
lemma-99 = _abstractLength 11
lemma-99 = _abstractLengthDistinct 8
lemma-99 = _innerFunctionApplication True
lemma-99 = _innerFunctionDepth 2
lemma-99 = _func match y
lemma-99 = _func match y(nil, cons)
lemma-99 = _func match y(cons)
lemma-99 = _func match y(nil)
lemma-99 = _func nil
lemma-99 = _func cons
lemma-99 = _func cons(@, map2)
lemma-99 = _func cons(map2)
lemma-99 = _func cons(@)
lemma-99 = _func @
lemma-99 = _func @(a :=>: b, anyType)
lemma-99 = _func @(anyType)
lemma-99 = _func @(a :=>: b)
lemma-99 = _func a :=>: b
lemma-99 = _func anyType
lemma-99 = _func map2
lemma-99 = _func map2(a :=>: b, list)
lemma-99 = _func map2(list)
lemma-99 = _func map2(a :=>: b)
lemma-99 = _func list
lemma-99 = _func _abstract match Var
lemma-99 = _func _abstract match Var(Func, Func)
lemma-99 = _func _abstract match Var(Func)
lemma-99 = _func _abstract Func
lemma-99 = _func _abstract Func(@, Func)
lemma-99 = _func _abstract Func(Func)
lemma-99 = _func _abstract Func(@)
lemma-99 = _func _abstract @
lemma-99 = _func _abstract @(FuncType, Var)
lemma-99 = _func _abstract @(Var)
lemma-99 = _func _abstract @(FuncType)
lemma-99 = _func _abstract FuncType
lemma-99 = _func _abstract Var
lemma-99 = _func _abstract Func(FuncType, Var)
lemma-99 = _func _abstract Func(Var)
lemma-99 = _func _abstract Func(FuncType)
lemma-99 = _func _length 20
lemma-99 = _func _lengthDistinct 20
lemma-99 = _func _distinctRatio 1.0
lemma-99 = _func _popular @
lemma-99 = _func recursive True
lemma-99 = _func _abstractLength 21
lemma-99 = _func _abstractLengthDistinct 16
lemma-99 = _func _nArgs 2

finished
