(declare-datatypes (a)
  ((list (nil) (cons (head a) (tail (list a))))))
(define-fun-rec
  (par (a)
    (append
       ((x (list a)) (x (list a))) (list a)
       (match x
         (case nil x)
         (case (cons x xs) (cons x (append xs x)))))))
(define-fun-rec
  (par (a)
    (rev
       ((x (list a))) (list a)
       (match x
         (case nil (as nil (list a)))
         (case (cons x xs) (append (rev xs) (cons x (as nil (list a)))))))))
(assert-proof
  (par (x)
     (forall ((x (list x))) (= (rev (rev x)) x))
    ([0, 1, 2, 3, 4, 5, 6, 7] [])))
(assert-proof
  (par (a)
     (forall ((xs (list a))) (= (rev (rev xs)) xs))
    ([0, 1, 2, 3, 4, 5, 6] [0])))
(assert-proof
  (par (x)
    
    (forall ((x (list x)) (x (list x)))
      (= (append (rev x) (rev x)) (rev (append x x))))
    ([0, 1, 2, 3, 4, 5] [0])))
(assert-proof
  (par (x)
    
    (forall ((x x))
      (= (rev (cons x (as nil (list x)))) (cons x (as nil (list x)))))
    ([0, 1, 2, 3, 4] [])))
(assert-proof
  (par (x)
     (= (rev (as nil (list x))) (as nil (list x)))
    ([0, 1, 2, 3] [])))
(assert-proof
  (par (x)
    
    (forall ((x (list x)) (x (list x)) (x (list x)))
      (= (append (append x x) x) (append x (append x x))))
    ([0, 1, 2] [0])))
(assert-proof
  (par (x)
    
    (forall ((x x) (x (list x)) (x (list x)))
      (= (append (cons x x) x) (cons x (append x x))))
    ([0, 1] [])))
(assert-proof
  (par (x)
     (forall ((x (list x))) (= (append (as nil (list x)) x) x))
    ([0] [])))
(assert-proof
  (par (x)
     (forall ((x (list x))) (= (append x (as nil (list x))) x))
    ([] [0])))
(check-sat)