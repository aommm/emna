(declare-datatypes (a)
  ((list (nil) (cons (head a) (tail (list a))))))
(define-fun-rec
  (par (a)
    (append
       ((x (list a)) (y (list a))) (list a)
       (match x
         (case nil y)
         (case (cons z xs) (cons z (append xs y)))))))
(define-fun-rec
  (par (a)
    (rev
       ((x (list a))) (list a)
       (match x
         (case nil (as nil (list a)))
         (case (cons y xs) (append (rev xs) (cons y (as nil (list a)))))))))
(assert-prove
  (par (x) ((forall ((y (list x))) (= (rev (rev y)) y))) (pro0f)))
(assert-prove
  (par (a) ((forall ((xs (list a))) (= (rev (rev xs)) xs))) (pro0f)))
(assert-prove
  (par (x)
    ((forall ((y (list x)) (z (list x)))
       (= (append (rev z) (rev y)) (rev (append y z)))))
    (pro0f)))
(assert-prove
  (par (x)
    ((forall ((y x))
       (= (rev (cons y (as nil (list x)))) (cons y (as nil (list x))))))
    (pro0f)))
(assert-prove
  (par (x) ((= (rev (as nil (list x))) (as nil (list x)))) (pro0f)))
(assert-prove
  (par (x)
    ((forall ((y (list x)) (z (list x)) (x2 (list x)))
       (= (append (append y z) x2) (append y (append z x2)))))
    (pro0f)))
(assert-prove
  (par (x)
    ((forall ((y x) (z (list x)) (x2 (list x)))
       (= (append (cons y z) x2) (cons y (append z x2)))))
    (pro0f)))
(assert-prove
  (par (x)
    ((forall ((y (list x))) (= (append (as nil (list x)) y) y)))
    (pro0f)))
(assert-prove
  (par (x)
    ((forall ((y (list x))) (= (append y (as nil (list x))) y)))
    (pro0f)))
(check-sat)