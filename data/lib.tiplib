(declare-datatypes (a)
  ((list (nil) (cons (head a) (tail (list a))))))
(declare-datatypes (a)
  ((Tree (Leaf)
     (Node (Node_0 (Tree a)) (Node_1 a) (Node_2 (Tree a))))))
(declare-datatypes (a b) ((Pair (Pair2 (first a) (second b)))))
(declare-datatypes () ((Nat (Z) (S (p Nat)))))
(define-fun-rec
  (par (a b)
    (zip
       ((x (list a)) (y (list b))) (list (Pair a b))
       (match x
         (case nil (as nil (list (Pair a b))))
         (case (cons z x2)
           (match y
             (case nil (as nil (list (Pair a b))))
             (case (cons x3 x4) (cons (Pair2 z x3) (zip x2 x4)))))))))
(define-fun
  (par (a b)
    (zipConcat
       ((x a) (y (list a)) (z (list b))) (list (Pair a b))
       (match z
         (case nil (as nil (list (Pair a b))))
         (case (cons y2 ys) (cons (Pair2 x y2) (zip y ys)))))))
(define-fun-rec
  (par (a)
    (takeWhile
       ((x (=> a Bool)) (y (list a))) (list a)
       (match y
         (case nil (as nil (list a)))
         (case (cons z xs)
           (ite (@ x z) (cons z (takeWhile x xs)) (as nil (list a))))))))
(define-fun-rec
  (par (a)
    (take
       ((x Nat) (y (list a))) (list a)
       (match x
         (case Z (as nil (list a)))
         (case (S z)
           (match y
             (case nil (as nil (list a)))
             (case (cons x2 x3) (cons x2 (take z x3)))))))))
(define-fun-rec
  (par (a)
    (qrev
       ((x (list a)) (y (list a))) (list a)
       (match x
         (case nil y)
         (case (cons z xs) (qrev xs (cons z y)))))))
(define-fun-rec
  plus
    ((x Nat) (y Nat)) Nat
    (match x
      (case Z y)
      (case (S z) (S (plus z y)))))
(define-fun
  (par (a)
    (null
       ((x (list a))) Bool
       (match x
         (case nil true)
         (case (cons y z) false)))))
(define-fun-rec
  mult2
    ((x Nat) (y Nat) (z Nat)) Nat
    (match x
      (case Z z)
      (case (S x2) (mult2 x2 y (plus y z)))))
(define-fun-rec
  mult
    ((x Nat) (y Nat)) Nat
    (match x
      (case Z Z)
      (case (S z) (plus y (mult z y)))))
(define-fun-rec
  (par (a)
    (mirror
       ((x (Tree a))) (Tree a)
       (match x
         (case Leaf (as Leaf (Tree a)))
         (case (Node l y r) (Node (mirror r) y (mirror l)))))))
(define-fun-rec
  minus
    ((x Nat) (y Nat)) Nat
    (match x
      (case Z Z)
      (case (S z)
        (match y
          (case Z (S z))
          (case (S x2) (minus z x2))))))
(define-fun-rec
  min2
    ((x Nat) (y Nat)) Nat
    (match x
      (case Z Z)
      (case (S z)
        (match y
          (case Z Z)
          (case (S y2) (S (min2 z y2)))))))
(define-fun-rec
  max2
    ((x Nat) (y Nat)) Nat
    (match x
      (case Z y)
      (case (S z)
        (match y
          (case Z (S z))
          (case (S x2) (S (max2 z x2)))))))
(define-fun-rec
  (par (a b)
    (map2
       ((x (=> a b)) (y (list a))) (list b)
       (match y
         (case nil (as nil (list b)))
         (case (cons z xs) (cons (@ x z) (map2 x xs)))))))
(define-fun-rec
  (par (a)
    (length
       ((x (list a))) Nat
       (match x
         (case nil Z)
         (case (cons y xs) (S (length xs)))))))
(define-fun-rec
  le
    ((x Nat) (y Nat)) Bool
    (match x
      (case Z true)
      (case (S z)
        (match y
          (case Z false)
          (case (S x2) (le z x2))))))
(define-fun-rec
  last
    ((x (list Nat))) Nat
    (match x
      (case nil Z)
      (case (cons y z)
        (match z
          (case nil y)
          (case (cons x2 x3) (last (cons x2 x3)))))))
(define-fun-rec
  (par (a)
    (height
       ((x (Tree a))) Nat
       (match x
         (case Leaf Z)
         (case (Node l y r) (S (max2 (height l) (height r))))))))
(define-fun-rec
  half
    ((x Nat)) Nat
    (match x
      (case Z Z)
      (case (S y)
        (match y
          (case Z Z)
          (case (S z) (S (half z)))))))
(define-fun-rec
  even
    ((x Nat)) Bool
    (match x
      (case Z true)
      (case (S y)
        (match y
          (case Z false)
          (case (S z) (even z))))))
(define-fun-rec
  equal
    ((x Nat) (y Nat)) Bool
    (match x
      (case Z
        (match y
          (case Z true)
          (case (S z) false)))
      (case (S x2)
        (match y
          (case Z false)
          (case (S y2) (equal x2 y2))))))
(define-fun-rec
  (par (a)
    (dropWhile
       ((x (=> a Bool)) (y (list a))) (list a)
       (match y
         (case nil (as nil (list a)))
         (case (cons z xs) (ite (@ x z) (dropWhile x xs) (cons z xs)))))))
(define-fun-rec
  (par (a)
    (drop
       ((x Nat) (y (list a))) (list a)
       (match x
         (case Z y)
         (case (S z)
           (match y
             (case nil (as nil (list a)))
             (case (cons x2 x3) (drop z x3))))))))
(define-fun-rec
  double
    ((x Nat)) Nat
    (match x
      (case Z Z)
      (case (S y) (S (S (double y))))))
(define-fun-rec
  count
    ((x Nat) (y (list Nat))) Nat
    (match y
      (case nil Z)
      (case (cons z ys)
        (ite (equal x z) (S (count x ys)) (count x ys)))))
(define-fun-rec
  (par (a)
    (append
       ((x (list a)) (y (list a))) (list a)
       (match x
         (case nil y)
         (case (cons z xs) (cons z (append xs y)))))))
(define-fun-rec
  (par (a)
    (rev
       ((x (list a))) (list a)
       (match x
         (case nil (as nil (list a)))
         (case (cons y xs) (append (rev xs) (cons y (as nil (list a)))))))))
(define-fun-rec
  (par (a)
    (qrevflat
       ((x (list (list a))) (y (list a))) (list a)
       (match x
         (case nil y)
         (case (cons xs xss) (qrevflat xss (append (rev xs) y)))))))
(define-fun-rec
  (par (a)
    (revflat
       ((x (list (list a)))) (list a)
       (match x
         (case nil (as nil (list a)))
         (case (cons xs xss) (append (revflat xss) (rev xs)))))))
(assert-proof
  (lemma-100 (forall ((a Nat) (b Nat)) (= (max2 a b) (max2 b a)))
    ([] [0] structural z3-4.4.0 emna-0.1)))
(assert-proof
  (lemma-101
    (forall ((a Nat) (b Nat) (c Nat))
      (= (min2 (min2 a b) c) (min2 a (min2 b c))))
    ([] [1] structural z3-4.4.0 emna-0.1)))
(assert-proof
  (lemma-102 (forall ((x Nat)) (= (min2 x x) x))
    ([lemma-101] [0] structural z3-4.4.0 emna-0.1)))
(assert-proof
  (lemma-103 (forall ((x Nat)) (= (min2 x Z) Z))
    ([lemma-101, lemma-102] [] structural z3-4.4.0 emna-0.1)))
(assert-proof
  (lemma-104 (forall ((x Nat)) (= (min2 Z x) Z))
    ([lemma-101, lemma-102, lemma-103]
      [] structural z3-4.4.0 emna-0.1)))
(assert-proof
  (lemma-105 (forall ((x Nat) (y Nat)) (= (min2 y x) (min2 x y)))
    ([lemma-101, lemma-102, lemma-103, lemma-104]
      [0, 1] structural z3-4.4.0 emna-0.1)))
(assert-proof
  (lemma-106 (forall ((x Nat)) (= (min2 x (S x)) x))
    ([lemma-101, lemma-102, lemma-103, lemma-104, lemma-105]
      [0] structural z3-4.4.0 emna-0.1)))
(assert-proof
  (lemma-107
    (forall ((x Nat) (y Nat)) (= (min2 x (min2 x y)) (min2 x y)))
    ([lemma-101, lemma-102, lemma-103, lemma-104, lemma-105, lemma-106]
      [] structural z3-4.4.0 emna-0.1)))
(assert-proof
  (lemma-108
    (forall ((x Nat) (y Nat) (z Nat))
      (= (min2 (min2 x y) z) (min2 x (min2 y z))))
    ([lemma-101,
      lemma-102,
      lemma-103,
      lemma-104,
      lemma-105,
      lemma-106,
      lemma-107]
      [] structural z3-4.4.0 emna-0.1)))
(assert-proof
  (lemma-109
    (forall ((x Nat) (y Nat)) (= (min2 (S x) (S y)) (S (min2 x y))))
    ([lemma-101,
      lemma-102,
      lemma-103,
      lemma-104,
      lemma-105,
      lemma-106,
      lemma-107,
      lemma-108]
      [] structural z3-4.4.0 emna-0.1)))
(assert-proof
  (lemma-110 (forall ((a Nat) (b Nat)) (= (min2 a b) (min2 b a)))
    ([] [0] structural z3-4.4.0 emna-0.1)))
(assert-proof
  (par (a)
    lemma-111
    (forall ((xs (list a)))
      (= (dropWhile (lambda ((x a)) false) xs) xs))
    ([] [] structural z3-4.4.0 emna-0.1)))
(assert-proof
  (par (x)
    lemma-112
    (forall ((y (=> x Bool)))
      (= (dropWhile y (as nil (list x))) (as nil (list x))))
    ([lemma-111] [] structural z3-4.4.0 emna-0.1)))
(assert-proof
  (par (x)
    lemma-113
    (forall ((y (=> x Bool)) (z (list x)))
      (= (dropWhile y (dropWhile y z)) (dropWhile y z)))
    ([lemma-111, lemma-112] [1] structural z3-4.4.0 emna-0.1)))
(assert-proof
  (par (a)
    lemma-114
    (forall ((xs (list a)))
      (= (takeWhile (lambda ((x a)) true) xs) xs))
    ([] [0] structural z3-4.4.0 emna-0.1)))
(assert-proof
  (par (x)
    lemma-115
    (forall ((y (=> x Bool)))
      (= (takeWhile y (as nil (list x))) (as nil (list x))))
    ([lemma-114] [] structural z3-4.4.0 emna-0.1)))
(assert-proof
  (par (x)
    lemma-116
    (forall ((y (=> x Bool)) (z (list x)))
      (= (takeWhile y (takeWhile y z)) (takeWhile y z)))
    ([lemma-114, lemma-115] [1] structural z3-4.4.0 emna-0.1)))
(assert-proof
  (par (x)
    lemma-117
    (forall ((y (=> x Bool)) (z (=> x Bool)) (x2 (list x)))
      (= (takeWhile z (takeWhile y x2)) (takeWhile y (takeWhile z x2))))
    ([lemma-114, lemma-115, lemma-116]
      [2] structural z3-4.4.0 emna-0.1)))
(assert-proof
  (par (a)
    lemma-118
    (forall ((xs (list a))) (= (take Z xs) (as nil (list a))))
    ([] [] structural z3-4.4.0 emna-0.1)))
(assert-proof
  (par (a b)
    lemma-119
    (forall ((n Nat) (f (=> b a)) (xs (list b)))
      (= (take n (map2 f xs)) (map2 f (take n xs))))
    ([] [0] structural z3-4.4.0 emna-0.1)))
(assert-proof
  (par (x y)
    lemma-121
    (forall ((z (=> y x)) (x2 Nat) (x3 (list y)))
      (= (take x2 (map2 z x3)) (map2 z (take x2 x3))))
    ([lemma-119,
      lemma-19,
      lemma-28,
      lemma-29,
      lemma-30,
      lemma-31,
      lemma-32,
      lemma-127,
      lemma-128,
      lemma-129]
      [] structural z3-4.4.0 emna-0.1)))
(assert-proof
  (par (x y)
    lemma-127
    (forall ((z (=> y x)))
      (= (map2 z (as nil (list y))) (as nil (list x))))
    ([lemma-119,
      lemma-19,
      lemma-28,
      lemma-29,
      lemma-30,
      lemma-31,
      lemma-32]
      [] structural z3-4.4.0 emna-0.1)))
(assert-proof
  (par (x y)
    lemma-128
    (forall ((z (=> y x)) (x2 y))
      (= (map2 z (cons x2 (as nil (list y))))
        (cons (@ z x2) (as nil (list x)))))
    ([lemma-119,
      lemma-19,
      lemma-28,
      lemma-29,
      lemma-30,
      lemma-31,
      lemma-32,
      lemma-127]
      [] structural z3-4.4.0 emna-0.1)))
(assert-proof
  (par (x y)
    lemma-129
    (forall ((z (=> y x)) (x2 y) (x3 (list y)))
      (= (cons (@ z x2) (map2 z x3)) (map2 z (cons x2 x3))))
    ([lemma-119,
      lemma-19,
      lemma-28,
      lemma-29,
      lemma-30,
      lemma-31,
      lemma-32,
      lemma-127,
      lemma-128]
      [] structural z3-4.4.0 emna-0.1)))
(assert-proof
  (par (a)
    lemma-130
    (forall ((n Nat) (x a) (xs (list a)))
      (= (take (S n) (cons x xs)) (cons x (take n xs))))
    ([] [] structural z3-4.4.0 emna-0.1)))
(assert-proof
  (par (a b)
    lemma-131
    (forall ((x a) (xs (list a)) (ys (list b)))
      (= (zip (cons x xs) ys) (zipConcat x xs ys)))
    ([] [] structural z3-4.4.0 emna-0.1)))
(assert-proof
  (par (x y)
    lemma-132
    (forall ((z (list x)))
      (= (zip z (as nil (list y))) (as nil (list (Pair x y)))))
    ([lemma-131] [] structural z3-4.4.0 emna-0.1)))
(assert-proof
  (par (x y)
    lemma-133
    (forall ((z (list y)))
      (= (zip (as nil (list x)) z) (as nil (list (Pair x y)))))
    ([lemma-131, lemma-132] [] structural z3-4.4.0 emna-0.1)))
(assert-proof
  (par (x y)
    lemma-134
    (forall ((z x) (x2 y) (x3 (list x)) (x4 (list y)))
      (= (zip (cons z x3) (cons x2 x4)) (cons (Pair2 z x2) (zip x3 x4))))
    ([lemma-131, lemma-132, lemma-133]
      [] structural z3-4.4.0 emna-0.1)))
(assert-proof
  (par (x y)
    lemma-135
    (forall ((z x) (x2 (list x)))
      (= (zipConcat z x2 (as nil (list y))) (as nil (list (Pair x y)))))
    ([lemma-131, lemma-132, lemma-133, lemma-134]
      [] structural z3-4.4.0 emna-0.1)))
(assert-proof
  (par (x y)
    lemma-136
    (forall ((z x) (x2 (list x)) (x3 (list y)))
      (= (zip (cons z x2) x3) (zipConcat z x2 x3)))
    ([lemma-131, lemma-132, lemma-133, lemma-134, lemma-135]
      [] structural z3-4.4.0 emna-0.1)))
(assert-proof
  (par (x y)
    lemma-137
    (forall ((z (list x)) (x2 x) (x3 y))
      (= (zipConcat x2 z (cons x3 (as nil (list y))))
        (cons (Pair2 x2 x3) (as nil (list (Pair x y))))))
    ([lemma-131, lemma-132, lemma-133, lemma-134, lemma-135, lemma-136]
      [] structural z3-4.4.0 emna-0.1)))
(assert-proof
  (par (x y)
    lemma-138
    (forall ((z (list y)) (x2 x) (x3 y))
      (= (zipConcat x2 (as nil (list x)) (cons x3 z))
        (cons (Pair2 x2 x3) (as nil (list (Pair x y))))))
    ([lemma-131,
      lemma-132,
      lemma-133,
      lemma-134,
      lemma-135,
      lemma-136,
      lemma-137]
      [] structural z3-4.4.0 emna-0.1)))
(assert-proof
  (par (x y)
    lemma-139
    (forall ((z x) (x2 (list x)) (x3 y) (x4 (list y)))
      (= (cons (Pair2 z x3) (zip x2 x4)) (zipConcat z x2 (cons x3 x4))))
    ([lemma-131,
      lemma-132,
      lemma-133,
      lemma-134,
      lemma-135,
      lemma-136,
      lemma-137,
      lemma-138]
      [] structural z3-4.4.0 emna-0.1)))
(assert-proof
  (par (a b)
    lemma-140
    (forall ((x a) (y b) (xs (list a)) (ys (list b)))
      (= (zip (cons x xs) (cons y ys)) (cons (Pair2 x y) (zip xs ys))))
    ([] [] structural z3-4.4.0 emna-0.1)))
(assert-proof
  (par (a b)
    lemma-141
    (forall ((xs (list b)))
      (= (zip (as nil (list a)) xs) (as nil (list (Pair a b)))))
    ([] [] structural z3-4.4.0 emna-0.1)))
(assert-proof
  (par (x)
    lemma-142 (= (mirror (as Leaf (Tree x))) (as Leaf (Tree x)))
    ([] [] structural z3-4.4.0 emna-0.1)))
(assert-proof
  (par (x)
    lemma-143 (forall ((y (Tree x))) (= (mirror (mirror y)) y))
    ([lemma-142] [0] structural z3-4.4.0 emna-0.1)))
(assert-proof
  (par (x)
    lemma-146 (= (height (as Leaf (Tree x))) Z)
    ([lemma-142,
      lemma-143,
      lemma-153,
      lemma-154,
      lemma-92,
      lemma-93,
      lemma-94,
      lemma-95,
      lemma-96,
      lemma-97,
      lemma-98,
      lemma-99]
      [] structural z3-4.4.0 emna-0.1)))
(assert-proof
  (par (x)
    lemma-147
    (forall ((y x) (z (Tree x)))
      (= (height (Node z y z)) (S (height z))))
    ([lemma-142,
      lemma-143,
      lemma-153,
      lemma-154,
      lemma-92,
      lemma-93,
      lemma-94,
      lemma-95,
      lemma-96,
      lemma-97,
      lemma-98,
      lemma-99,
      lemma-146]
      [] structural z3-4.4.0 emna-0.1)))
(assert-proof
  (par (x)
    lemma-148
    (forall ((y x) (z (Tree x)))
      (= (height (Node z y (as Leaf (Tree x)))) (S (height z))))
    ([lemma-142,
      lemma-143,
      lemma-153,
      lemma-154,
      lemma-92,
      lemma-93,
      lemma-94,
      lemma-95,
      lemma-96,
      lemma-97,
      lemma-98,
      lemma-99,
      lemma-146,
      lemma-147]
      [] structural z3-4.4.0 emna-0.1)))
(assert-proof
  (par (x)
    lemma-149
    (forall ((y x) (z (Tree x)))
      (= (height (Node (as Leaf (Tree x)) y z)) (S (height z))))
    ([lemma-142,
      lemma-143,
      lemma-153,
      lemma-154,
      lemma-92,
      lemma-93,
      lemma-94,
      lemma-95,
      lemma-96,
      lemma-97,
      lemma-98,
      lemma-99,
      lemma-146,
      lemma-147,
      lemma-148]
      [] structural z3-4.4.0 emna-0.1)))
(assert-proof
  (par (x)
    lemma-150
    (forall ((y (Tree x)) (z x) (x2 (Tree x)))
      (= (height (Node x2 z y)) (height (Node y z x2))))
    ([lemma-142,
      lemma-143,
      lemma-153,
      lemma-154,
      lemma-92,
      lemma-93,
      lemma-94,
      lemma-95,
      lemma-96,
      lemma-97,
      lemma-98,
      lemma-99,
      lemma-146,
      lemma-147,
      lemma-148,
      lemma-149]
      [] structural z3-4.4.0 emna-0.1)))
(assert-proof
  (par (x)
    lemma-151
    (forall ((y (Tree x))) (= (height (mirror y)) (height y)))
    ([lemma-142,
      lemma-143,
      lemma-153,
      lemma-154,
      lemma-92,
      lemma-93,
      lemma-94,
      lemma-95,
      lemma-96,
      lemma-97,
      lemma-98,
      lemma-99,
      lemma-146,
      lemma-147,
      lemma-148,
      lemma-149,
      lemma-150]
      [0] structural z3-4.4.0 emna-0.1)))
(assert-proof
  (par (a)
    lemma-152
    (forall ((b (Tree a))) (= (height (mirror b)) (height b)))
    ([lemma-142,
      lemma-143,
      lemma-153,
      lemma-154,
      lemma-92,
      lemma-93,
      lemma-94,
      lemma-95,
      lemma-96,
      lemma-97,
      lemma-98,
      lemma-99,
      lemma-146,
      lemma-147,
      lemma-148,
      lemma-149,
      lemma-150,
      lemma-151]
      [] structural z3-4.4.0 emna-0.1)))
(assert-proof
  (par (x)
    lemma-153
    (forall ((y (Tree x)) (z x))
      (= (Node (as Leaf (Tree x)) z (mirror y))
        (mirror (Node y z (as Leaf (Tree x))))))
    ([lemma-142, lemma-143] [] structural z3-4.4.0 emna-0.1)))
(assert-proof
  (par (x)
    lemma-154
    (forall ((y (Tree x)) (z x) (x2 (Tree x)))
      (= (Node (mirror x2) z (mirror y)) (mirror (Node y z x2))))
    ([lemma-142, lemma-143, lemma-153]
      [] structural z3-4.4.0 emna-0.1)))
(assert-proof
  (par (a)
    lemma-155
    (forall ((n Nat) (m Nat) (xs (list a)))
      (= (drop n (drop m xs)) (drop (plus n m) xs)))
    ([] [0, 1] structural z3-4.4.0 emna-0.1)))
(assert-proof
  (par (x)
    lemma-158
    (forall ((y Nat) (z Nat) (x2 (list x)))
      (= (drop (plus y z) x2) (drop y (drop z x2))))
    ([lemma-155,
      lemma-49,
      lemma-60,
      lemma-65,
      lemma-66,
      lemma-67,
      lemma-68,
      lemma-33,
      lemma-34,
      lemma-35,
      lemma-20]
      [] structural z3-4.4.0 emna-0.1)))
(assert-proof
  (par (x)
    lemma-159
    (forall ((y Nat) (z x))
      (= (drop (plus y y) (cons z (as nil (list x))))
        (drop y (cons z (as nil (list x))))))
    ([lemma-155,
      lemma-49,
      lemma-60,
      lemma-65,
      lemma-66,
      lemma-67,
      lemma-68,
      lemma-33,
      lemma-34,
      lemma-35,
      lemma-20,
      lemma-158]
      [] structural z3-4.4.0 emna-0.1)))
(assert-proof
  (lemma-160
    (forall ((xs (list Nat)) (x Nat))
      (=> (not (null xs)) (= (last (cons x xs)) (last xs))))
    ([] [] structural z3-4.4.0 emna-0.1)))
(assert-proof
  (par (x)
    lemma-161 (= (null (as nil (list x))) true)
    ([lemma-160] [] structural z3-4.4.0 emna-0.1)))
(assert-proof
  (par (x)
    lemma-162 (forall ((y x) (z (list x))) (= (null (cons y z)) false))
    ([lemma-160, lemma-161] [] structural z3-4.4.0 emna-0.1)))
(assert-proof
  (lemma-163 (forall ((m Nat) (n Nat)) (=> (le m n) (le m (S n))))
    ([] [0] structural z3-4.4.0 emna-0.1)))
(assert-proof
  (par (x)
    lemma-174
    (forall ((y Nat) (z Nat) (x2 (list x)))
      (= (take (plus z y) (take z x2)) (take z x2)))
    ([lemma-19,
      lemma-28,
      lemma-29,
      lemma-30,
      lemma-31,
      lemma-32,
      lemma-49,
      lemma-60,
      lemma-65,
      lemma-66,
      lemma-67,
      lemma-68,
      lemma-33,
      lemma-34,
      lemma-35,
      lemma-20,
      lemma-25,
      lemma-158]
      [2] structural z3-4.4.0 emna-0.1)))
(assert-proof
  (par (x)
    lemma-177
    (forall ((y Nat) (z x))
      (= (take (plus y y) (cons z (as nil (list x))))
        (take y (cons z (as nil (list x))))))
    ([lemma-19,
      lemma-28,
      lemma-29,
      lemma-30,
      lemma-31,
      lemma-32,
      lemma-49,
      lemma-60,
      lemma-65,
      lemma-66,
      lemma-67,
      lemma-68,
      lemma-33,
      lemma-34,
      lemma-35,
      lemma-20,
      lemma-25,
      lemma-158,
      lemma-174,
      lemma-159]
      [] structural z3-4.4.0 emna-0.1)))
(assert-proof
  (par (a)
    lemma-178
    (forall ((n Nat) (m Nat) (xs (list a)))
      (= (take n (drop m xs)) (drop m (take (plus n m) xs))))
    ([lemma-19,
      lemma-28,
      lemma-29,
      lemma-30,
      lemma-31,
      lemma-32,
      lemma-49,
      lemma-60,
      lemma-65,
      lemma-66,
      lemma-67,
      lemma-68,
      lemma-33,
      lemma-34,
      lemma-35,
      lemma-20,
      lemma-25,
      lemma-158,
      lemma-174,
      lemma-159,
      lemma-177]
      [0, 1, 2] structural z3-4.4.0 emna-0.1)))
(assert-proof
  (par (a)
    lemma-18
    (forall ((n Nat) (xs (list a)))
      (= (append (take n xs) (drop n xs)) xs))
    ([] [0] structural z3-4.4.0 emna-0.1)))
(assert-proof
  (lemma-185 (= (double Z) Z)
    ([lemma-49, lemma-60, lemma-65, lemma-66, lemma-67, lemma-68]
      [] structural z3-4.4.0 emna-0.1)))
(assert-proof
  (lemma-186 (= (double (S Z)) (S (S Z)))
    ([lemma-49,
      lemma-60,
      lemma-65,
      lemma-66,
      lemma-67,
      lemma-68,
      lemma-185]
      [] structural z3-4.4.0 emna-0.1)))
(assert-proof
  (lemma-187 (forall ((x Nat)) (= (plus x x) (double x)))
    ([lemma-49,
      lemma-60,
      lemma-65,
      lemma-66,
      lemma-67,
      lemma-68,
      lemma-185,
      lemma-186]
      [0] structural z3-4.4.0 emna-0.1)))
(assert-proof
  (lemma-188 (forall ((x Nat)) (= (double x) (plus x x)))
    ([lemma-49,
      lemma-60,
      lemma-65,
      lemma-66,
      lemma-67,
      lemma-68,
      lemma-185,
      lemma-186,
      lemma-187]
      [] structural z3-4.4.0 emna-0.1)))
(assert-proof
  (par (a)
    lemma-189
    (forall ((x (list a)) (y (list a)))
      (= (length (append x y)) (length (append y x))))
    ([] [0, 1] structural z3-4.4.0 emna-0.1)))
(assert-proof
  (par (x)
    lemma-19
    (forall ((y Nat)) (= (take y (as nil (list x))) (as nil (list x))))
    ([lemma-18] [] structural z3-4.4.0 emna-0.1)))
(assert-proof
  (par (x)
    lemma-190 (= (length (as nil (list x))) Z)
    ([lemma-189] [] structural z3-4.4.0 emna-0.1)))
(assert-proof
  (par (x)
    lemma-191
    (forall ((y x) (z (list x)))
      (= (length (cons y z)) (S (length z))))
    ([lemma-189, lemma-190] [] structural z3-4.4.0 emna-0.1)))
(assert-proof
  (par (x)
    lemma-196
    (forall ((y (list x)) (z (list x)))
      (= (length (append z y)) (length (append y z))))
    ([lemma-189,
      lemma-190,
      lemma-191,
      lemma-21,
      lemma-22,
      lemma-23,
      lemma-24]
      [] structural z3-4.4.0 emna-0.1)))
(assert-proof
  (par (a)
    lemma-197
    (forall ((x (list a)) (y (list a)))
      (= (length (append x y)) (plus (length y) (length x))))
    ([] [0, 1] structural z3-4.4.0 emna-0.1)))
(assert-proof
  (par (x)
    lemma-20
    (forall ((y x) (z Nat) (x2 (list x)))
      (= (drop (S z) (cons y x2)) (drop z x2)))
    ([lemma-18,
      lemma-19,
      lemma-28,
      lemma-29,
      lemma-30,
      lemma-31,
      lemma-32,
      lemma-33,
      lemma-34,
      lemma-35]
      [] structural z3-4.4.0 emna-0.1)))
(assert-proof
  (par (x)
    lemma-203
    (forall ((y (list x)) (z (list x)))
      (= (plus (length y) (length z)) (length (append y z))))
    ([lemma-197,
      lemma-49,
      lemma-60,
      lemma-65,
      lemma-66,
      lemma-67,
      lemma-68,
      lemma-190,
      lemma-191,
      lemma-21,
      lemma-22,
      lemma-23,
      lemma-24,
      lemma-196]
      [] structural z3-4.4.0 emna-0.1)))
(assert-proof
  (par (x)
    lemma-206
    (forall ((y (list x)))
      (= (length (append y y)) (double (length y))))
    ([lemma-190,
      lemma-191,
      lemma-185,
      lemma-186,
      lemma-21,
      lemma-22,
      lemma-23,
      lemma-24,
      lemma-196,
      lemma-214]
      [] structural z3-4.4.0 emna-0.1)))
(assert-proof
  (par (x)
    lemma-21 (forall ((y (list x))) (= (append y (as nil (list x))) y))
    ([lemma-18,
      lemma-19,
      lemma-28,
      lemma-29,
      lemma-30,
      lemma-31,
      lemma-32,
      lemma-33,
      lemma-34,
      lemma-35,
      lemma-20]
      [0] structural z3-4.4.0 emna-0.1)))
(assert-proof
  (par (a)
    lemma-214
    (forall ((x (list a)))
      (= (length (append x x)) (double (length x))))
    ([lemma-190,
      lemma-191,
      lemma-185,
      lemma-186,
      lemma-21,
      lemma-22,
      lemma-23,
      lemma-24,
      lemma-196]
      [0] structural z3-4.4.0 emna-0.1)))
(assert-proof
  (par (a)
    lemma-217 (forall ((x (list a))) (= (length (rev x)) (length x)))
    ([lemma-190,
      lemma-191,
      lemma-21,
      lemma-22,
      lemma-23,
      lemma-24,
      lemma-224,
      lemma-225,
      lemma-226,
      lemma-196]
      [0] structural z3-4.4.0 emna-0.1)))
(assert-proof
  (par (x)
    lemma-218 (forall ((y (list x))) (= (rev (rev y)) y))
    ([lemma-190,
      lemma-191,
      lemma-21,
      lemma-22,
      lemma-23,
      lemma-24,
      lemma-224,
      lemma-225,
      lemma-226,
      lemma-196,
      lemma-217]
      [0] structural z3-4.4.0 emna-0.1)))
(assert-proof
  (par (x)
    lemma-219 (forall ((y (list x))) (= (length (rev y)) (length y)))
    ([lemma-190,
      lemma-191,
      lemma-21,
      lemma-22,
      lemma-23,
      lemma-24,
      lemma-224,
      lemma-225,
      lemma-226,
      lemma-196,
      lemma-217,
      lemma-218]
      [] structural z3-4.4.0 emna-0.1)))
(assert-proof
  (par (x)
    lemma-22 (forall ((y (list x))) (= (append (as nil (list x)) y) y))
    ([lemma-18,
      lemma-19,
      lemma-28,
      lemma-29,
      lemma-30,
      lemma-31,
      lemma-32,
      lemma-33,
      lemma-34,
      lemma-35,
      lemma-20,
      lemma-21]
      [] structural z3-4.4.0 emna-0.1)))
(assert-proof
  (par (x)
    lemma-224 (= (rev (as nil (list x))) (as nil (list x)))
    ([lemma-190, lemma-191, lemma-21, lemma-22, lemma-23, lemma-24]
      [] structural z3-4.4.0 emna-0.1)))
(assert-proof
  (par (x)
    lemma-225
    (forall ((y x))
      (= (rev (cons y (as nil (list x)))) (cons y (as nil (list x)))))
    ([lemma-190,
      lemma-191,
      lemma-21,
      lemma-22,
      lemma-23,
      lemma-24,
      lemma-224]
      [] structural z3-4.4.0 emna-0.1)))
(assert-proof
  (par (x)
    lemma-226
    (forall ((y (list x)) (z (list x)))
      (= (append (rev z) (rev y)) (rev (append y z))))
    ([lemma-190,
      lemma-191,
      lemma-21,
      lemma-22,
      lemma-23,
      lemma-24,
      lemma-224,
      lemma-225]
      [0] structural z3-4.4.0 emna-0.1)))
(assert-proof
  (par (x)
    lemma-23
    (forall ((y x) (z (list x)) (x2 (list x)))
      (= (append (cons y z) x2) (cons y (append z x2))))
    ([lemma-18,
      lemma-19,
      lemma-28,
      lemma-29,
      lemma-30,
      lemma-31,
      lemma-32,
      lemma-33,
      lemma-34,
      lemma-35,
      lemma-20,
      lemma-21,
      lemma-22]
      [] structural z3-4.4.0 emna-0.1)))
(assert-proof
  (par (a)
    lemma-236
    (forall ((x (list a)) (y (list a)))
      (= (length (rev (append x y))) (plus (length x) (length y))))
    ([lemma-49,
      lemma-60,
      lemma-65,
      lemma-66,
      lemma-67,
      lemma-68,
      lemma-190,
      lemma-191,
      lemma-21,
      lemma-22,
      lemma-23,
      lemma-24,
      lemma-224,
      lemma-225,
      lemma-226,
      lemma-196,
      lemma-203]
      [0, 1] structural z3-4.4.0 emna-0.1)))
(assert-proof
  (par (x)
    lemma-237 (forall ((y (list x))) (= (qrev (as nil (list x)) y) y))
    ([] [] structural z3-4.4.0 emna-0.1)))
(assert-proof
  (par (x)
    lemma-238
    (forall ((y (list x)) (z x) (x2 (list x)))
      (= (qrev (cons z y) x2) (qrev y (cons z x2))))
    ([lemma-237] [] structural z3-4.4.0 emna-0.1)))
(assert-proof
  (par (x)
    lemma-24
    (forall ((y (list x)) (z (list x)) (x2 (list x)))
      (= (append (append y z) x2) (append y (append z x2))))
    ([lemma-18,
      lemma-19,
      lemma-28,
      lemma-29,
      lemma-30,
      lemma-31,
      lemma-32,
      lemma-33,
      lemma-34,
      lemma-35,
      lemma-20,
      lemma-21,
      lemma-22,
      lemma-23]
      [0] structural z3-4.4.0 emna-0.1)))
(assert-proof
  (par (x)
    lemma-240
    (forall ((y (list x)) (z (list x)))
      (= (plus (length y) (length z)) (length (qrev y z))))
    ([lemma-237,
      lemma-238,
      lemma-243,
      lemma-49,
      lemma-60,
      lemma-65,
      lemma-66,
      lemma-67,
      lemma-68,
      lemma-190,
      lemma-191]
      [0] structural z3-4.4.0 emna-0.1)))
(assert-proof
  (par (a)
    lemma-241
    (forall ((x (list a)) (y (list a)))
      (= (length (qrev x y)) (plus (length x) (length y))))
    ([lemma-237,
      lemma-238,
      lemma-243,
      lemma-49,
      lemma-60,
      lemma-65,
      lemma-66,
      lemma-67,
      lemma-68,
      lemma-190,
      lemma-191,
      lemma-240]
      [] structural z3-4.4.0 emna-0.1)))
(assert-proof
  (par (x)
    lemma-242
    (forall ((y (list x)))
      (= (length (qrev y (as nil (list x)))) (length y)))
    ([lemma-237,
      lemma-238,
      lemma-243,
      lemma-49,
      lemma-60,
      lemma-65,
      lemma-66,
      lemma-67,
      lemma-68,
      lemma-190,
      lemma-191,
      lemma-240,
      lemma-241]
      [] structural z3-4.4.0 emna-0.1)))
(assert-proof
  (par (x)
    lemma-243
    (forall ((y (list x)) (z (list x)))
      (= (qrev (qrev z y) (as nil (list x))) (qrev y z)))
    ([lemma-237, lemma-238] [1] structural z3-4.4.0 emna-0.1)))
(assert-proof
  (par (a)
    lemma-244
    (forall ((x Nat) (y Nat) (z (list a)))
      (= (drop x (drop y z)) (drop y (drop x z))))
    ([] [1, 2] structural z3-4.4.0 emna-0.1)))
(assert-proof
  (par (x)
    lemma-25
    (forall ((y Nat) (z (list x)))
      (= (drop y (take y z)) (as nil (list x))))
    ([lemma-18,
      lemma-19,
      lemma-28,
      lemma-29,
      lemma-30,
      lemma-31,
      lemma-32,
      lemma-33,
      lemma-34,
      lemma-35,
      lemma-20,
      lemma-21,
      lemma-22,
      lemma-23,
      lemma-24]
      [0] structural z3-4.4.0 emna-0.1)))
(assert-proof
  (par (a)
    lemma-252 (forall ((x (list a))) (= (rev (rev x)) x))
    ([lemma-21,
      lemma-22,
      lemma-23,
      lemma-24,
      lemma-224,
      lemma-225,
      lemma-226]
      [0] structural z3-4.4.0 emna-0.1)))
(assert-proof
  (par (x)
    lemma-26
    (forall ((y (list x)))
      (= (take (S Z) (append y y)) (take (S Z) y)))
    ([lemma-18,
      lemma-19,
      lemma-28,
      lemma-29,
      lemma-30,
      lemma-31,
      lemma-32,
      lemma-33,
      lemma-34,
      lemma-35,
      lemma-20,
      lemma-21,
      lemma-22,
      lemma-23,
      lemma-24,
      lemma-25]
      [] structural z3-4.4.0 emna-0.1)))
(assert-proof
  (par (a)
    lemma-260
    (forall ((x (list a)) (y (list a)))
      (= (rev (append (rev x) (rev y))) (append y x)))
    ([lemma-21,
      lemma-22,
      lemma-23,
      lemma-24,
      lemma-224,
      lemma-225,
      lemma-226]
      [0, 1] structural z3-4.4.0 emna-0.1)))
(assert-proof
  (par (x)
    lemma-263
    (forall ((y (list x)) (z (list x)))
      (= (append (rev y) z) (qrev y z)))
    ([lemma-237,
      lemma-238,
      lemma-243,
      lemma-21,
      lemma-22,
      lemma-23,
      lemma-24,
      lemma-224,
      lemma-225,
      lemma-226]
      [0] structural z3-4.4.0 emna-0.1)))
(assert-proof
  (par (a)
    lemma-264
    (forall ((x (list a)) (y (list a)))
      (= (qrev x y) (append (rev x) y)))
    ([lemma-237,
      lemma-238,
      lemma-243,
      lemma-21,
      lemma-22,
      lemma-23,
      lemma-24,
      lemma-224,
      lemma-225,
      lemma-226,
      lemma-263]
      [] structural z3-4.4.0 emna-0.1)))
(assert-proof
  (par (x)
    lemma-266
    (forall ((y (list x))) (= (qrev y (as nil (list x))) (rev y)))
    ([lemma-237,
      lemma-238,
      lemma-243,
      lemma-21,
      lemma-22,
      lemma-23,
      lemma-24,
      lemma-224,
      lemma-225,
      lemma-226,
      lemma-263,
      lemma-264,
      lemma-218]
      [] structural z3-4.4.0 emna-0.1)))
(assert-proof
  (par (x)
    lemma-27
    (forall ((y Nat) (z (list x)))
      (= (append (take y z) (drop y z)) z))
    ([lemma-18,
      lemma-19,
      lemma-28,
      lemma-29,
      lemma-30,
      lemma-31,
      lemma-32,
      lemma-33,
      lemma-34,
      lemma-35,
      lemma-20,
      lemma-21,
      lemma-22,
      lemma-23,
      lemma-24,
      lemma-25,
      lemma-26]
      [] structural z3-4.4.0 emna-0.1)))
(assert-proof
  (lemma-273 (= (half Z) Z)
    ([lemma-49, lemma-60, lemma-65, lemma-66, lemma-67, lemma-68]
      [] structural z3-4.4.0 emna-0.1)))
(assert-proof
  (lemma-274 (= (half (S Z)) Z)
    ([lemma-49,
      lemma-60,
      lemma-65,
      lemma-66,
      lemma-67,
      lemma-68,
      lemma-273]
      [] structural z3-4.4.0 emna-0.1)))
(assert-proof
  (lemma-275 (forall ((x Nat)) (= (half (plus x x)) x))
    ([lemma-49,
      lemma-60,
      lemma-65,
      lemma-66,
      lemma-67,
      lemma-68,
      lemma-273,
      lemma-274]
      [0] structural z3-4.4.0 emna-0.1)))
(assert-proof
  (lemma-276 (forall ((x Nat)) (= (half (plus x x)) x))
    ([lemma-49,
      lemma-60,
      lemma-65,
      lemma-66,
      lemma-67,
      lemma-68,
      lemma-273,
      lemma-274,
      lemma-275]
      [] structural z3-4.4.0 emna-0.1)))
(assert-proof
  (par (x)
    lemma-28 (forall ((y (list x))) (= (take Z y) (as nil (list x))))
    ([lemma-18, lemma-19] [] structural z3-4.4.0 emna-0.1)))
(assert-proof
  (lemma-283 (forall ((x Nat)) (= (plus x (S x)) (S (plus x x))))
    ([lemma-49, lemma-60, lemma-65, lemma-66, lemma-67, lemma-68]
      [] structural z3-4.4.0 emna-0.1)))
(assert-proof
  (par (x)
    lemma-29
    (forall ((y Nat) (z (list x))) (= (take y (take y z)) (take y z)))
    ([lemma-18, lemma-19, lemma-28] [0] structural z3-4.4.0 emna-0.1)))
(assert-proof
  (lemma-290 (= (even Z) true)
    ([lemma-49, lemma-60, lemma-65, lemma-66, lemma-67, lemma-68]
      [] structural z3-4.4.0 emna-0.1)))
(assert-proof
  (lemma-291 (= (even (S Z)) false)
    ([lemma-49,
      lemma-60,
      lemma-65,
      lemma-66,
      lemma-67,
      lemma-68,
      lemma-290]
      [] structural z3-4.4.0 emna-0.1)))
(assert-proof
  (lemma-292 (forall ((x Nat)) (= (even (plus x x)) true))
    ([lemma-49,
      lemma-60,
      lemma-65,
      lemma-66,
      lemma-67,
      lemma-68,
      lemma-290,
      lemma-291]
      [0] structural z3-4.4.0 emna-0.1)))
(assert-proof
  (lemma-293 (forall ((x Nat)) (even (plus x x)))
    ([lemma-49,
      lemma-60,
      lemma-65,
      lemma-66,
      lemma-67,
      lemma-68,
      lemma-290,
      lemma-291,
      lemma-292]
      [] structural z3-4.4.0 emna-0.1)))
(assert-proof
  (par (x)
    lemma-30
    (forall ((y Nat) (z Nat) (x2 (list x)))
      (= (take z (take y x2)) (take y (take z x2))))
    ([lemma-18, lemma-19, lemma-28, lemma-29]
      [0] structural z3-4.4.0 emna-0.1)))
(assert-proof
  (par (a)
    lemma-301
    (forall ((x (list a)) (y (list a)))
      (= (rev (rev (append x y))) (append (rev (rev x)) (rev (rev y)))))
    ([lemma-21,
      lemma-22,
      lemma-23,
      lemma-24,
      lemma-224,
      lemma-225,
      lemma-226]
      [] structural z3-4.4.0 emna-0.1)))
(assert-proof
  (par (a)
    lemma-309
    (forall ((x (list a)) (y (list a)))
      (= (rev (append (rev x) y)) (append (rev y) x)))
    ([lemma-21,
      lemma-22,
      lemma-23,
      lemma-24,
      lemma-224,
      lemma-225,
      lemma-226]
      [0] structural z3-4.4.0 emna-0.1)))
(assert-proof
  (par (x)
    lemma-31
    (forall ((y x) (z Nat) (x2 (list x)))
      (= (take (S z) (cons y x2)) (cons y (take z x2))))
    ([lemma-18, lemma-19, lemma-28, lemma-29, lemma-30]
      [] structural z3-4.4.0 emna-0.1)))
(assert-proof
  (par (a)
    lemma-317
    (forall ((x (list a)) (y (list a)))
      (= (append (rev (rev x)) y) (rev (rev (append x y)))))
    ([lemma-21,
      lemma-22,
      lemma-23,
      lemma-24,
      lemma-224,
      lemma-225,
      lemma-226]
      [1] structural z3-4.4.0 emna-0.1)))
(assert-proof
  (par (x)
    lemma-32
    (forall ((y Nat) (z (list x)))
      (= (take (S y) (take y z)) (take y z)))
    ([lemma-18, lemma-19, lemma-28, lemma-29, lemma-30, lemma-31]
      [0] structural z3-4.4.0 emna-0.1)))
(assert-proof
  (par (a)
    lemma-327 (forall ((x (list a))) (even (length (append x x))))
    ([lemma-190,
      lemma-191,
      lemma-290,
      lemma-291,
      lemma-21,
      lemma-22,
      lemma-23,
      lemma-24,
      lemma-196]
      [0] structural z3-4.4.0 emna-0.1)))
(assert-proof
  (par (x)
    lemma-33
    (forall ((y Nat)) (= (drop y (as nil (list x))) (as nil (list x))))
    ([lemma-18,
      lemma-19,
      lemma-28,
      lemma-29,
      lemma-30,
      lemma-31,
      lemma-32]
      [] structural z3-4.4.0 emna-0.1)))
(assert-proof
  (par (a)
    lemma-337
    (forall ((x (list a)) (y (list a)))
      (= (even (length (append x y))) (even (length (append y x)))))
    ([lemma-190,
      lemma-191,
      lemma-290,
      lemma-291,
      lemma-21,
      lemma-22,
      lemma-23,
      lemma-24,
      lemma-196]
      [] structural z3-4.4.0 emna-0.1)))
(assert-proof
  (par (x)
    lemma-34 (forall ((y (list x))) (= (drop Z y) y))
    ([lemma-18,
      lemma-19,
      lemma-28,
      lemma-29,
      lemma-30,
      lemma-31,
      lemma-32,
      lemma-33]
      [] structural z3-4.4.0 emna-0.1)))
(assert-proof
  (par (a)
    lemma-347
    (forall ((x (list a)) (y (list a)))
      (= (half (length (append x y))) (half (length (append y x)))))
    ([lemma-190,
      lemma-191,
      lemma-273,
      lemma-274,
      lemma-21,
      lemma-22,
      lemma-23,
      lemma-24,
      lemma-196]
      [] structural z3-4.4.0 emna-0.1)))
(assert-proof
  (par (x)
    lemma-35
    (forall ((y Nat) (z Nat) (x2 (list x)))
      (= (drop z (drop y x2)) (drop y (drop z x2))))
    ([lemma-18,
      lemma-19,
      lemma-28,
      lemma-29,
      lemma-30,
      lemma-31,
      lemma-32,
      lemma-33,
      lemma-34]
      [2] structural z3-4.4.0 emna-0.1)))
(assert-proof
  (lemma-357
    (forall ((x Nat) (y Nat)) (= (even (plus x y)) (even (plus y x))))
    ([lemma-49,
      lemma-60,
      lemma-65,
      lemma-66,
      lemma-67,
      lemma-68,
      lemma-290,
      lemma-291,
      lemma-292]
      [] structural z3-4.4.0 emna-0.1)))
(assert-proof
  (lemma-36
    (forall ((n Nat) (xs (list Nat)))
      (= (S (count n xs)) (count n (cons n xs))))
    ([] [0] structural z3-4.4.0 emna-0.1)))
(assert-proof
  (par (a)
    lemma-367
    (forall ((x (list a)) (y (list a)))
      (= (even (length (append x y)))
        (even (plus (length y) (length x)))))
    ([lemma-49,
      lemma-60,
      lemma-65,
      lemma-66,
      lemma-67,
      lemma-68,
      lemma-190,
      lemma-191,
      lemma-290,
      lemma-291,
      lemma-21,
      lemma-22,
      lemma-23,
      lemma-24,
      lemma-292,
      lemma-196,
      lemma-203]
      [] structural z3-4.4.0 emna-0.1)))
(assert-proof
  (lemma-37 (forall ((x Nat)) (= (equal x x) true))
    ([lemma-36] [0] structural z3-4.4.0 emna-0.1)))
(assert-proof
  (par (a)
    lemma-371
    (forall ((x (list a))) (= (rev x) (qrev x (as nil (list a)))))
    ([lemma-237,
      lemma-238,
      lemma-243,
      lemma-21,
      lemma-22,
      lemma-23,
      lemma-24,
      lemma-224,
      lemma-225,
      lemma-226,
      lemma-263]
      [] structural z3-4.4.0 emna-0.1)))
(assert-proof
  (par (x)
    lemma-374
    (forall ((y (list (list x))) (z (list x)))
      (= (qrevflat (cons z y) (as nil (list x))) (qrevflat y (rev z))))
    ([lemma-21,
      lemma-22,
      lemma-23,
      lemma-24,
      lemma-224,
      lemma-225,
      lemma-226,
      lemma-388,
      lemma-389,
      lemma-390]
      [] structural z3-4.4.0 emna-0.1)))
(assert-proof
  (par (x)
    lemma-375 (= (revflat (as nil (list (list x)))) (as nil (list x)))
    ([lemma-21,
      lemma-22,
      lemma-23,
      lemma-24,
      lemma-224,
      lemma-225,
      lemma-226,
      lemma-388,
      lemma-389,
      lemma-390,
      lemma-374]
      [] structural z3-4.4.0 emna-0.1)))
(assert-proof
  (par (x)
    lemma-376
    (forall ((y (list x)))
      (= (revflat (cons y (as nil (list (list x))))) (rev y)))
    ([lemma-21,
      lemma-22,
      lemma-23,
      lemma-24,
      lemma-224,
      lemma-225,
      lemma-226,
      lemma-388,
      lemma-389,
      lemma-390,
      lemma-374,
      lemma-375]
      [] structural z3-4.4.0 emna-0.1)))
(assert-proof
  (par (x)
    lemma-377
    (forall ((y (list (list x))))
      (= (revflat (cons (as nil (list x)) y)) (revflat y)))
    ([lemma-21,
      lemma-22,
      lemma-23,
      lemma-24,
      lemma-224,
      lemma-225,
      lemma-226,
      lemma-388,
      lemma-389,
      lemma-390,
      lemma-374,
      lemma-375,
      lemma-376]
      [] structural z3-4.4.0 emna-0.1)))
(assert-proof
  (par (x)
    lemma-378
    (forall ((y (list x)) (z (list (list x))))
      (= (append (revflat z) (rev y)) (revflat (cons y z))))
    ([lemma-21,
      lemma-22,
      lemma-23,
      lemma-24,
      lemma-224,
      lemma-225,
      lemma-226,
      lemma-388,
      lemma-389,
      lemma-390,
      lemma-374,
      lemma-375,
      lemma-376,
      lemma-377]
      [] structural z3-4.4.0 emna-0.1)))
(assert-proof
  (par (x)
    lemma-379
    (forall ((y (list (list x))) (z (list (list x))))
      (= (append (revflat z) (revflat y)) (revflat (append y z))))
    ([lemma-21,
      lemma-22,
      lemma-23,
      lemma-24,
      lemma-224,
      lemma-225,
      lemma-226,
      lemma-388,
      lemma-389,
      lemma-390,
      lemma-374,
      lemma-375,
      lemma-376,
      lemma-377,
      lemma-378]
      [0] structural z3-4.4.0 emna-0.1)))
(assert-proof
  (lemma-38
    (forall ((x Nat) (y (list Nat)))
      (= (count (S x) (cons Z y)) (count (S x) y)))
    ([lemma-36,
      lemma-37,
      lemma-39,
      lemma-40,
      lemma-41,
      lemma-42,
      lemma-43,
      lemma-44,
      lemma-45,
      lemma-46]
      [] structural z3-4.4.0 emna-0.1)))
(assert-proof
  (par (x)
    lemma-380
    (forall ((y (list (list x))))
      (= (qrevflat y (as nil (list x))) (revflat y)))
    ([lemma-21,
      lemma-22,
      lemma-23,
      lemma-24,
      lemma-224,
      lemma-225,
      lemma-226,
      lemma-388,
      lemma-389,
      lemma-390,
      lemma-374,
      lemma-375,
      lemma-376,
      lemma-377,
      lemma-378,
      lemma-379]
      [0] structural z3-4.4.0 emna-0.1)))
(assert-proof
  (par (a)
    lemma-381
    (forall ((x (list (list a))))
      (= (revflat x) (qrevflat x (as nil (list a)))))
    ([lemma-21,
      lemma-22,
      lemma-23,
      lemma-24,
      lemma-224,
      lemma-225,
      lemma-226,
      lemma-388,
      lemma-389,
      lemma-390,
      lemma-374,
      lemma-375,
      lemma-376,
      lemma-377,
      lemma-378,
      lemma-379,
      lemma-380]
      [] structural z3-4.4.0 emna-0.1)))
(assert-proof
  (par (x)
    lemma-388
    (forall ((y (list x))) (= (qrevflat (as nil (list (list x))) y) y))
    ([lemma-21,
      lemma-22,
      lemma-23,
      lemma-24,
      lemma-224,
      lemma-225,
      lemma-226]
      [] structural z3-4.4.0 emna-0.1)))
(assert-proof
  (par (x)
    lemma-389
    (forall ((y (list (list x))) (z (list x)) (x2 (list x)))
      (= (qrevflat y (append z x2)) (append (qrevflat y z) x2)))
    ([lemma-21,
      lemma-22,
      lemma-23,
      lemma-24,
      lemma-224,
      lemma-225,
      lemma-226,
      lemma-388]
      [0] structural z3-4.4.0 emna-0.1)))
(assert-proof
  (lemma-39 (forall ((x Nat) (y Nat)) (= (equal y x) (equal x y)))
    ([lemma-36, lemma-37] [0] structural z3-4.4.0 emna-0.1)))
(assert-proof
  (par (x)
    lemma-390
    (forall ((y (list (list x))) (z (list (list x))) (x2 (list x)))
      (= (qrevflat (append z y) x2) (qrevflat y (qrevflat z x2))))
    ([lemma-21,
      lemma-22,
      lemma-23,
      lemma-24,
      lemma-224,
      lemma-225,
      lemma-226,
      lemma-388,
      lemma-389]
      [1] structural z3-4.4.0 emna-0.1)))
(assert-proof
  (par (a)
    lemma-394
    (forall ((x (list a))) (= (rev (qrev x (as nil (list a)))) x))
    ([lemma-237,
      lemma-238,
      lemma-243,
      lemma-21,
      lemma-22,
      lemma-23,
      lemma-24,
      lemma-224,
      lemma-225,
      lemma-226,
      lemma-263]
      [] structural z3-4.4.0 emna-0.1)))
(assert-proof
  (lemma-40 (forall ((x Nat)) (= (equal x (S x)) false))
    ([lemma-36, lemma-37, lemma-39] [0] structural z3-4.4.0 emna-0.1)))
(assert-proof
  (par (a)
    lemma-402
    (forall ((x (list a)))
      (= (rev (append (rev x) (as nil (list a)))) x))
    ([lemma-21,
      lemma-22,
      lemma-23,
      lemma-24,
      lemma-224,
      lemma-225,
      lemma-226]
      [0] structural z3-4.4.0 emna-0.1)))
(assert-proof
  (par (a)
    lemma-406
    (forall ((x (list a)))
      (= (qrev (qrev x (as nil (list a))) (as nil (list a))) x))
    ([lemma-237, lemma-238, lemma-243]
      [] structural z3-4.4.0 emna-0.1)))
(assert-proof
  (lemma-409
    (forall ((x Nat) (y Nat)) (= (mult2 x (S Z) y) (plus x y)))
    ([lemma-49,
      lemma-60,
      lemma-65,
      lemma-66,
      lemma-67,
      lemma-68,
      lemma-438,
      lemma-439,
      lemma-440,
      lemma-441]
      [] structural z3-4.4.0 emna-0.1)))
(assert-proof
  (lemma-41 (forall ((x Nat)) (= (equal Z (S x)) false))
    ([lemma-36, lemma-37, lemma-39, lemma-40]
      [] structural z3-4.4.0 emna-0.1)))
(assert-proof
  (lemma-410
    (forall ((x Nat) (y Nat)) (= (mult2 y (S x) x) (mult2 x (S y) y)))
    ([lemma-49,
      lemma-60,
      lemma-65,
      lemma-66,
      lemma-67,
      lemma-68,
      lemma-438,
      lemma-439,
      lemma-440,
      lemma-441,
      lemma-409]
      [] structural z3-4.4.0 emna-0.1)))
(assert-proof
  (lemma-411
    (forall ((x Nat) (y Nat)) (= (mult2 y (S x) Z) (mult2 y x y)))
    ([lemma-49,
      lemma-60,
      lemma-65,
      lemma-66,
      lemma-67,
      lemma-68,
      lemma-438,
      lemma-439,
      lemma-440,
      lemma-441,
      lemma-409,
      lemma-410]
      [] structural z3-4.4.0 emna-0.1)))
(assert-proof
  (lemma-412
    (forall ((x Nat) (y Nat) (z Nat))
      (= (plus x (mult2 x y z)) (mult2 x (S y) z)))
    ([lemma-49,
      lemma-60,
      lemma-65,
      lemma-66,
      lemma-67,
      lemma-68,
      lemma-438,
      lemma-439,
      lemma-440,
      lemma-441,
      lemma-409,
      lemma-410,
      lemma-411]
      [0] structural z3-4.4.0 emna-0.1)))
(assert-proof
  (lemma-413
    (forall ((x Nat) (y Nat) (z Nat))
      (= (plus z (mult2 x y x)) (mult2 x (S y) z)))
    ([lemma-49,
      lemma-60,
      lemma-65,
      lemma-66,
      lemma-67,
      lemma-68,
      lemma-438,
      lemma-439,
      lemma-440,
      lemma-441,
      lemma-409,
      lemma-410,
      lemma-411,
      lemma-412]
      [0] structural z3-4.4.0 emna-0.1)))
(assert-proof
  (lemma-414
    (forall ((x Nat) (y Nat) (z Nat) (x2 Nat))
      (= (plus (mult2 y z x) x2) (plus x (mult2 y z x2))))
    ([lemma-49,
      lemma-60,
      lemma-65,
      lemma-66,
      lemma-67,
      lemma-68,
      lemma-438,
      lemma-439,
      lemma-440,
      lemma-441,
      lemma-409,
      lemma-410,
      lemma-411,
      lemma-412,
      lemma-413]
      [1] structural z3-4.4.0 emna-0.1)))
(assert-proof
  (lemma-415
    (forall ((x Nat) (y Nat) (z Nat))
      (= (mult2 y (plus x x) z) (mult2 x (plus y y) z)))
    ([lemma-49,
      lemma-60,
      lemma-65,
      lemma-66,
      lemma-67,
      lemma-68,
      lemma-438,
      lemma-439,
      lemma-440,
      lemma-441,
      lemma-409,
      lemma-410,
      lemma-411,
      lemma-412,
      lemma-413,
      lemma-414]
      [0] structural z3-4.4.0 emna-0.1)))
(assert-proof
  (lemma-416
    (forall ((x Nat) (y Nat) (z Nat) (x2 Nat))
      (= (mult2 x y (mult2 x z x2)) (mult2 x (plus y z) x2)))
    ([lemma-49,
      lemma-60,
      lemma-65,
      lemma-66,
      lemma-67,
      lemma-68,
      lemma-438,
      lemma-439,
      lemma-440,
      lemma-441,
      lemma-409,
      lemma-410,
      lemma-411,
      lemma-412,
      lemma-413,
      lemma-414,
      lemma-415]
      [0] structural z3-4.4.0 emna-0.1)))
(assert-proof
  (lemma-417
    (forall ((x Nat) (y Nat) (z Nat) (x2 Nat))
      (= (mult2 (mult2 x y Z) z x2) (mult2 x (mult2 y z Z) x2)))
    ([lemma-49,
      lemma-60,
      lemma-65,
      lemma-66,
      lemma-67,
      lemma-68,
      lemma-438,
      lemma-439,
      lemma-440,
      lemma-441,
      lemma-409,
      lemma-410,
      lemma-411,
      lemma-412,
      lemma-413,
      lemma-414,
      lemma-415,
      lemma-416]
      [0] structural z3-4.4.0 emna-0.1)))
(assert-proof
  (lemma-418
    (forall ((x Nat) (y Nat) (z Nat) (x2 Nat))
      (= (mult2 z z (mult2 x y x2)) (mult2 x y (mult2 z z x2))))
    ([lemma-49,
      lemma-60,
      lemma-65,
      lemma-66,
      lemma-67,
      lemma-68,
      lemma-438,
      lemma-439,
      lemma-440,
      lemma-441,
      lemma-409,
      lemma-410,
      lemma-411,
      lemma-412,
      lemma-413,
      lemma-414,
      lemma-415,
      lemma-416,
      lemma-417]
      [0, 1, 2, 3] structural z3-4.4.0 emna-0.1)))
(assert-proof
  (lemma-42
    (forall ((x Nat) (y Nat)) (= (equal (S x) (S y)) (equal x y)))
    ([lemma-36, lemma-37, lemma-39, lemma-40, lemma-41]
      [] structural z3-4.4.0 emna-0.1)))
(assert-proof
  (lemma-420
    (forall ((x Nat) (y Nat) (z Nat) (x2 Nat))
      (= (mult2 y z (mult2 x2 x x2)) (mult2 x2 x (mult2 y z x2))))
    ([lemma-49,
      lemma-60,
      lemma-65,
      lemma-66,
      lemma-67,
      lemma-68,
      lemma-438,
      lemma-439,
      lemma-440,
      lemma-441,
      lemma-409,
      lemma-410,
      lemma-411,
      lemma-412,
      lemma-413,
      lemma-414,
      lemma-415,
      lemma-416,
      lemma-417,
      lemma-418]
      [1] structural z3-4.4.0 emna-0.1)))
(assert-proof
  (lemma-421
    (forall ((x Nat) (y Nat) (z Nat) (x2 Nat))
      (= (mult2 z (mult2 x y x) x2) (mult2 x (mult2 z y z) x2)))
    ([lemma-49,
      lemma-60,
      lemma-65,
      lemma-66,
      lemma-67,
      lemma-68,
      lemma-438,
      lemma-439,
      lemma-440,
      lemma-441,
      lemma-409,
      lemma-410,
      lemma-411,
      lemma-412,
      lemma-413,
      lemma-414,
      lemma-415,
      lemma-416,
      lemma-417,
      lemma-418,
      lemma-420]
      [] structural z3-4.4.0 emna-0.1)))
(assert-proof
  (lemma-422
    (forall ((x Nat) (y Nat) (z Nat) (x2 Nat))
      (= (mult2 z x2 (mult2 x y Z)) (mult2 x y (mult2 z x2 Z))))
    ([lemma-49,
      lemma-60,
      lemma-65,
      lemma-66,
      lemma-67,
      lemma-68,
      lemma-438,
      lemma-439,
      lemma-440,
      lemma-441,
      lemma-409,
      lemma-410,
      lemma-411,
      lemma-412,
      lemma-413,
      lemma-414,
      lemma-415,
      lemma-416,
      lemma-417,
      lemma-418,
      lemma-420,
      lemma-421]
      [] structural z3-4.4.0 emna-0.1)))
(assert-proof
  (lemma-423
    (forall ((x Nat) (y Nat))
      (= (mult2 y (plus x (S x)) x) (mult2 x (plus y (S y)) y)))
    ([lemma-49,
      lemma-60,
      lemma-65,
      lemma-66,
      lemma-67,
      lemma-68,
      lemma-438,
      lemma-439,
      lemma-440,
      lemma-441,
      lemma-409,
      lemma-410,
      lemma-411,
      lemma-412,
      lemma-413,
      lemma-414,
      lemma-415,
      lemma-416,
      lemma-417,
      lemma-418,
      lemma-420,
      lemma-421,
      lemma-422]
      [] structural z3-4.4.0 emna-0.1)))
(assert-proof
  (lemma-424
    (forall ((x Nat) (y Nat))
      (= (mult2 (S x) (plus x y) Z) (mult2 x (plus x (S y)) y)))
    ([lemma-49,
      lemma-60,
      lemma-65,
      lemma-66,
      lemma-67,
      lemma-68,
      lemma-438,
      lemma-439,
      lemma-440,
      lemma-441,
      lemma-409,
      lemma-410,
      lemma-411,
      lemma-412,
      lemma-413,
      lemma-414,
      lemma-415,
      lemma-416,
      lemma-417,
      lemma-418,
      lemma-420,
      lemma-421,
      lemma-422,
      lemma-423]
      [] structural z3-4.4.0 emna-0.1)))
(assert-proof
  (lemma-425 (forall ((x Nat)) (= (mult x Z) Z))
    ([lemma-49,
      lemma-60,
      lemma-65,
      lemma-66,
      lemma-67,
      lemma-68,
      lemma-438,
      lemma-439,
      lemma-440,
      lemma-441,
      lemma-409,
      lemma-410,
      lemma-411,
      lemma-412,
      lemma-413,
      lemma-414,
      lemma-415,
      lemma-416,
      lemma-417,
      lemma-418,
      lemma-420,
      lemma-421,
      lemma-422,
      lemma-423,
      lemma-424]
      [0] structural z3-4.4.0 emna-0.1)))
(assert-proof
  (lemma-426 (forall ((x Nat)) (= (mult Z x) Z))
    ([lemma-49,
      lemma-60,
      lemma-65,
      lemma-66,
      lemma-67,
      lemma-68,
      lemma-438,
      lemma-439,
      lemma-440,
      lemma-441,
      lemma-409,
      lemma-410,
      lemma-411,
      lemma-412,
      lemma-413,
      lemma-414,
      lemma-415,
      lemma-416,
      lemma-417,
      lemma-418,
      lemma-420,
      lemma-421,
      lemma-422,
      lemma-423,
      lemma-424,
      lemma-425]
      [] structural z3-4.4.0 emna-0.1)))
(assert-proof
  (lemma-427 (forall ((x Nat) (y Nat)) (= (mult y x) (mult x y)))
    ([lemma-49,
      lemma-60,
      lemma-65,
      lemma-66,
      lemma-67,
      lemma-68,
      lemma-438,
      lemma-439,
      lemma-440,
      lemma-441,
      lemma-409,
      lemma-410,
      lemma-411,
      lemma-412,
      lemma-413,
      lemma-414,
      lemma-415,
      lemma-416,
      lemma-417,
      lemma-418,
      lemma-420,
      lemma-421,
      lemma-422,
      lemma-423,
      lemma-424,
      lemma-425,
      lemma-426]
      [0, 1] structural z3-4.4.0 emna-0.1)))
(assert-proof
  (lemma-428 (forall ((x Nat)) (= (mult x (S Z)) x))
    ([lemma-49,
      lemma-60,
      lemma-65,
      lemma-66,
      lemma-67,
      lemma-68,
      lemma-438,
      lemma-439,
      lemma-440,
      lemma-441,
      lemma-409,
      lemma-410,
      lemma-411,
      lemma-412,
      lemma-413,
      lemma-414,
      lemma-415,
      lemma-416,
      lemma-417,
      lemma-418,
      lemma-420,
      lemma-421,
      lemma-422,
      lemma-423,
      lemma-424,
      lemma-425,
      lemma-426,
      lemma-427]
      [] structural z3-4.4.0 emna-0.1)))
(assert-proof
  (lemma-429
    (forall ((x Nat) (y Nat) (z Nat))
      (= (mult (mult x y) z) (mult x (mult y z))))
    ([lemma-49,
      lemma-60,
      lemma-65,
      lemma-66,
      lemma-67,
      lemma-68,
      lemma-438,
      lemma-439,
      lemma-440,
      lemma-441,
      lemma-409,
      lemma-410,
      lemma-411,
      lemma-412,
      lemma-413,
      lemma-414,
      lemma-415,
      lemma-416,
      lemma-417,
      lemma-418,
      lemma-420,
      lemma-421,
      lemma-422,
      lemma-423,
      lemma-424,
      lemma-425,
      lemma-426,
      lemma-427,
      lemma-428]
      [0, 1, 2] structural z3-4.4.0 emna-0.1)))
(assert-proof
  (lemma-43 (forall ((x Nat)) (= (count x (as nil (list Nat))) Z))
    ([lemma-36, lemma-37, lemma-39, lemma-40, lemma-41, lemma-42]
      [] structural z3-4.4.0 emna-0.1)))
(assert-proof
  (lemma-431
    (forall ((x Nat) (y Nat)) (= (plus x (mult x y)) (mult x (S y))))
    ([lemma-49,
      lemma-60,
      lemma-65,
      lemma-66,
      lemma-67,
      lemma-68,
      lemma-438,
      lemma-439,
      lemma-440,
      lemma-441,
      lemma-409,
      lemma-410,
      lemma-411,
      lemma-412,
      lemma-413,
      lemma-414,
      lemma-415,
      lemma-416,
      lemma-417,
      lemma-418,
      lemma-420,
      lemma-421,
      lemma-422,
      lemma-423,
      lemma-424,
      lemma-425,
      lemma-426,
      lemma-427,
      lemma-428,
      lemma-429]
      [] structural z3-4.4.0 emna-0.1)))
(assert-proof
  (lemma-432
    (forall ((x Nat) (y Nat) (z Nat))
      (= (plus (mult x y) (mult x z)) (mult x (plus y z))))
    ([lemma-49,
      lemma-60,
      lemma-65,
      lemma-66,
      lemma-67,
      lemma-68,
      lemma-438,
      lemma-439,
      lemma-440,
      lemma-441,
      lemma-409,
      lemma-410,
      lemma-411,
      lemma-412,
      lemma-413,
      lemma-414,
      lemma-415,
      lemma-416,
      lemma-417,
      lemma-418,
      lemma-420,
      lemma-421,
      lemma-422,
      lemma-423,
      lemma-424,
      lemma-425,
      lemma-426,
      lemma-427,
      lemma-428,
      lemma-429,
      lemma-431]
      [0] structural z3-4.4.0 emna-0.1)))
(assert-proof
  (lemma-433
    (forall ((x Nat) (y Nat)) (= (mult y (S x)) (mult2 y x y)))
    ([lemma-49,
      lemma-60,
      lemma-65,
      lemma-66,
      lemma-67,
      lemma-68,
      lemma-438,
      lemma-439,
      lemma-440,
      lemma-441,
      lemma-409,
      lemma-410,
      lemma-411,
      lemma-412,
      lemma-413,
      lemma-414,
      lemma-415,
      lemma-416,
      lemma-417,
      lemma-418,
      lemma-420,
      lemma-421,
      lemma-422,
      lemma-423,
      lemma-424,
      lemma-425,
      lemma-426,
      lemma-427,
      lemma-428,
      lemma-429,
      lemma-431,
      lemma-432]
      [0] structural z3-4.4.0 emna-0.1)))
(assert-proof
  (lemma-434 (forall ((x Nat) (y Nat)) (= (mult2 x y Z) (mult x y)))
    ([lemma-49,
      lemma-60,
      lemma-65,
      lemma-66,
      lemma-67,
      lemma-68,
      lemma-438,
      lemma-439,
      lemma-440,
      lemma-441,
      lemma-409,
      lemma-410,
      lemma-411,
      lemma-412,
      lemma-413,
      lemma-414,
      lemma-415,
      lemma-416,
      lemma-417,
      lemma-418,
      lemma-420,
      lemma-421,
      lemma-422,
      lemma-423,
      lemma-424,
      lemma-425,
      lemma-426,
      lemma-427,
      lemma-428,
      lemma-429,
      lemma-431,
      lemma-432,
      lemma-433]
      [0] structural z3-4.4.0 emna-0.1)))
(assert-proof
  (lemma-435 (forall ((x Nat) (y Nat)) (= (mult x y) (mult2 x y Z)))
    ([lemma-49,
      lemma-60,
      lemma-65,
      lemma-66,
      lemma-67,
      lemma-68,
      lemma-438,
      lemma-439,
      lemma-440,
      lemma-441,
      lemma-409,
      lemma-410,
      lemma-411,
      lemma-412,
      lemma-413,
      lemma-414,
      lemma-415,
      lemma-416,
      lemma-417,
      lemma-418,
      lemma-420,
      lemma-421,
      lemma-422,
      lemma-423,
      lemma-424,
      lemma-425,
      lemma-426,
      lemma-427,
      lemma-428,
      lemma-429,
      lemma-431,
      lemma-432,
      lemma-433,
      lemma-434]
      [] structural z3-4.4.0 emna-0.1)))
(assert-proof
  (lemma-438 (forall ((x Nat) (y Nat)) (= (mult2 x Z y) y))
    ([lemma-49, lemma-60, lemma-65, lemma-66, lemma-67, lemma-68]
      [0] structural z3-4.4.0 emna-0.1)))
(assert-proof
  (lemma-439 (forall ((x Nat) (y Nat)) (= (mult2 Z x y) y))
    ([lemma-49,
      lemma-60,
      lemma-65,
      lemma-66,
      lemma-67,
      lemma-68,
      lemma-438]
      [] structural z3-4.4.0 emna-0.1)))
(assert-proof
  (lemma-44
    (forall ((x Nat) (y (list Nat)))
      (= (count x (cons x y)) (S (count x y))))
    ([lemma-36,
      lemma-37,
      lemma-39,
      lemma-40,
      lemma-41,
      lemma-42,
      lemma-43]
      [] structural z3-4.4.0 emna-0.1)))
(assert-proof
  (lemma-440
    (forall ((x Nat) (y Nat) (z Nat)) (= (mult2 y x z) (mult2 x y z)))
    ([lemma-49,
      lemma-60,
      lemma-65,
      lemma-66,
      lemma-67,
      lemma-68,
      lemma-438,
      lemma-439]
      [0, 1] structural z3-4.4.0 emna-0.1)))
(assert-proof
  (lemma-441
    (forall ((x Nat) (y Nat) (z Nat))
      (= (mult2 x y (S z)) (S (mult2 x y z))))
    ([lemma-49,
      lemma-60,
      lemma-65,
      lemma-66,
      lemma-67,
      lemma-68,
      lemma-438,
      lemma-439,
      lemma-440]
      [0] structural z3-4.4.0 emna-0.1)))
(assert-proof
  (lemma-45
    (forall ((x Nat) (y Nat))
      (= (count y (cons x (as nil (list Nat))))
        (count x (cons y (as nil (list Nat))))))
    ([lemma-36,
      lemma-37,
      lemma-39,
      lemma-40,
      lemma-41,
      lemma-42,
      lemma-43,
      lemma-44]
      [] structural z3-4.4.0 emna-0.1)))
(assert-proof
  (lemma-46
    (forall ((x Nat) (y (list Nat)))
      (= (count (S x) (cons x y)) (count (S x) y)))
    ([lemma-36,
      lemma-37,
      lemma-39,
      lemma-40,
      lemma-41,
      lemma-42,
      lemma-43,
      lemma-44,
      lemma-45]
      [] structural z3-4.4.0 emna-0.1)))
(assert-proof
  (lemma-47
    (forall ((n Nat) (x Nat) (xs (list Nat)))
      (=> (= n x) (= (S (count n xs)) (count n (cons x xs)))))
    ([] [0] structural z3-4.4.0 emna-0.1)))
(assert-proof
  (lemma-48 (forall ((n Nat) (m Nat)) (= (minus n (plus n m)) Z))
    ([] [0] structural z3-4.4.0 emna-0.1)))
(assert-proof
  (lemma-49 (forall ((x Nat)) (= (plus x Z) x))
    ([lemma-48] [0] structural z3-4.4.0 emna-0.1)))
(assert-proof
  (lemma-50 (forall ((x Nat)) (= (minus x (S x)) Z))
    ([lemma-48,
      lemma-49,
      lemma-60,
      lemma-65,
      lemma-66,
      lemma-67,
      lemma-68,
      lemma-69,
      lemma-70,
      lemma-71]
      [0] structural z3-4.4.0 emna-0.1)))
(assert-proof
  (lemma-51 (forall ((x Nat)) (= (minus (S x) x) (S Z)))
    ([lemma-48,
      lemma-49,
      lemma-60,
      lemma-65,
      lemma-66,
      lemma-67,
      lemma-68,
      lemma-69,
      lemma-70,
      lemma-71,
      lemma-50]
      [0] structural z3-4.4.0 emna-0.1)))
(assert-proof
  (lemma-52
    (forall ((x Nat) (y Nat)) (= (minus (S x) (S y)) (minus x y)))
    ([lemma-48,
      lemma-49,
      lemma-60,
      lemma-65,
      lemma-66,
      lemma-67,
      lemma-68,
      lemma-69,
      lemma-70,
      lemma-71,
      lemma-50,
      lemma-51]
      [] structural z3-4.4.0 emna-0.1)))
(assert-proof
  (lemma-53
    (forall ((x Nat) (y Nat) (z Nat))
      (= (minus (minus x z) y) (minus (minus x y) z)))
    ([lemma-48,
      lemma-49,
      lemma-60,
      lemma-65,
      lemma-66,
      lemma-67,
      lemma-68,
      lemma-69,
      lemma-70,
      lemma-71,
      lemma-50,
      lemma-51,
      lemma-52]
      [0] structural z3-4.4.0 emna-0.1)))
(assert-proof
  (lemma-54
    (forall ((x Nat) (y Nat))
      (= (minus (minus x y) (minus y x)) (minus x y)))
    ([lemma-48,
      lemma-49,
      lemma-60,
      lemma-65,
      lemma-66,
      lemma-67,
      lemma-68,
      lemma-69,
      lemma-70,
      lemma-71,
      lemma-50,
      lemma-51,
      lemma-52,
      lemma-53]
      [0, 1] structural z3-4.4.0 emna-0.1)))
(assert-proof
  (lemma-55
    (forall ((x Nat) (y Nat) (z Nat))
      (= (minus (minus x y) (minus z y))
        (minus (minus x z) (minus y z))))
    ([lemma-48,
      lemma-49,
      lemma-60,
      lemma-65,
      lemma-66,
      lemma-67,
      lemma-68,
      lemma-69,
      lemma-70,
      lemma-71,
      lemma-50,
      lemma-51,
      lemma-52,
      lemma-53,
      lemma-54]
      [0, 1, 2] structural z3-4.4.0 emna-0.1)))
(assert-proof
  (lemma-56 (forall ((x Nat) (y Nat)) (= (minus x (plus x y)) Z))
    ([lemma-48,
      lemma-49,
      lemma-60,
      lemma-65,
      lemma-66,
      lemma-67,
      lemma-68,
      lemma-69,
      lemma-70,
      lemma-71,
      lemma-50,
      lemma-51,
      lemma-52,
      lemma-53,
      lemma-54,
      lemma-55]
      [] structural z3-4.4.0 emna-0.1)))
(assert-proof
  (lemma-57
    (forall ((x Nat) (y Nat) (z Nat))
      (= (minus (minus x y) z) (minus x (plus y z))))
    ([lemma-48,
      lemma-49,
      lemma-60,
      lemma-65,
      lemma-66,
      lemma-67,
      lemma-68,
      lemma-69,
      lemma-70,
      lemma-71,
      lemma-50,
      lemma-51,
      lemma-52,
      lemma-53,
      lemma-54,
      lemma-55,
      lemma-56]
      [0, 1, 2] structural z3-4.4.0 emna-0.1)))
(assert-proof
  (lemma-58 (forall ((x Nat) (y Nat)) (= (minus (plus x y) x) y))
    ([lemma-48,
      lemma-49,
      lemma-60,
      lemma-65,
      lemma-66,
      lemma-67,
      lemma-68,
      lemma-69,
      lemma-70,
      lemma-71,
      lemma-50,
      lemma-51,
      lemma-52,
      lemma-53,
      lemma-54,
      lemma-55,
      lemma-56,
      lemma-57]
      [0] structural z3-4.4.0 emna-0.1)))
(assert-proof
  (lemma-59
    (forall ((x Nat) (y Nat))
      (= (plus x (minus y x)) (plus y (minus x y))))
    ([lemma-48,
      lemma-49,
      lemma-60,
      lemma-65,
      lemma-66,
      lemma-67,
      lemma-68,
      lemma-69,
      lemma-70,
      lemma-71,
      lemma-50,
      lemma-51,
      lemma-52,
      lemma-53,
      lemma-54,
      lemma-55,
      lemma-56,
      lemma-57,
      lemma-58]
      [0, 1] structural z3-4.4.0 emna-0.1)))
(assert-proof
  (lemma-60 (forall ((x Nat)) (= (plus Z x) x))
    ([lemma-48, lemma-49] [] structural z3-4.4.0 emna-0.1)))
(assert-proof
  (lemma-61
    (forall ((x Nat)) (= (minus (S Z) (plus x x)) (minus (S Z) x)))
    ([lemma-48,
      lemma-49,
      lemma-60,
      lemma-65,
      lemma-66,
      lemma-67,
      lemma-68,
      lemma-69,
      lemma-70,
      lemma-71,
      lemma-50,
      lemma-51,
      lemma-52,
      lemma-53,
      lemma-54,
      lemma-55,
      lemma-56,
      lemma-57,
      lemma-58,
      lemma-59]
      [0] structural z3-4.4.0 emna-0.1)))
(assert-proof
  (lemma-62 (forall ((x Nat) (y Nat)) (= (minus (minus y x) y) Z))
    ([lemma-48,
      lemma-49,
      lemma-60,
      lemma-65,
      lemma-66,
      lemma-67,
      lemma-68,
      lemma-69,
      lemma-70,
      lemma-71,
      lemma-50,
      lemma-51,
      lemma-52,
      lemma-53,
      lemma-54,
      lemma-55,
      lemma-56,
      lemma-57,
      lemma-58,
      lemma-59,
      lemma-61]
      [] structural z3-4.4.0 emna-0.1)))
(assert-proof
  (lemma-63
    (forall ((x Nat) (y Nat))
      (= (minus y (minus y x)) (minus x (minus x y))))
    ([lemma-48,
      lemma-49,
      lemma-60,
      lemma-65,
      lemma-66,
      lemma-67,
      lemma-68,
      lemma-69,
      lemma-70,
      lemma-71,
      lemma-50,
      lemma-51,
      lemma-52,
      lemma-53,
      lemma-54,
      lemma-55,
      lemma-56,
      lemma-57,
      lemma-58,
      lemma-59,
      lemma-61,
      lemma-62]
      [] structural z3-4.4.0 emna-0.1)))
(assert-proof
  (lemma-64
    (forall ((x Nat) (y Nat))
      (= (plus (minus x y) (minus x y)) (minus (plus x x) (plus y y))))
    ([lemma-48,
      lemma-49,
      lemma-60,
      lemma-65,
      lemma-66,
      lemma-67,
      lemma-68,
      lemma-69,
      lemma-70,
      lemma-71,
      lemma-50,
      lemma-51,
      lemma-52,
      lemma-53,
      lemma-54,
      lemma-55,
      lemma-56,
      lemma-57,
      lemma-58,
      lemma-59,
      lemma-61,
      lemma-62,
      lemma-63]
      [1, 0] structural z3-4.4.0 emna-0.1)))
(assert-proof
  (lemma-65 (forall ((x Nat) (y Nat)) (= (plus y x) (plus x y)))
    ([lemma-48, lemma-49, lemma-60]
      [0, 1] structural z3-4.4.0 emna-0.1)))
(assert-proof
  (lemma-66
    (forall ((x Nat) (y Nat)) (= (plus (S x) y) (plus x (S y))))
    ([lemma-48, lemma-49, lemma-60, lemma-65]
      [] structural z3-4.4.0 emna-0.1)))
(assert-proof
  (lemma-67
    (forall ((x Nat) (y Nat)) (= (S (plus x y)) (plus x (S y))))
    ([lemma-48, lemma-49, lemma-60, lemma-65, lemma-66]
      [] structural z3-4.4.0 emna-0.1)))
(assert-proof
  (lemma-68
    (forall ((x Nat) (y Nat) (z Nat))
      (= (plus (plus x y) z) (plus x (plus y z))))
    ([lemma-48, lemma-49, lemma-60, lemma-65, lemma-66, lemma-67]
      [0] structural z3-4.4.0 emna-0.1)))
(assert-proof
  (lemma-69 (forall ((x Nat)) (= (minus x x) Z))
    ([lemma-48,
      lemma-49,
      lemma-60,
      lemma-65,
      lemma-66,
      lemma-67,
      lemma-68]
      [0] structural z3-4.4.0 emna-0.1)))
(assert-proof
  (lemma-70 (forall ((x Nat)) (= (minus x Z) x))
    ([lemma-48,
      lemma-49,
      lemma-60,
      lemma-65,
      lemma-66,
      lemma-67,
      lemma-68,
      lemma-69]
      [] structural z3-4.4.0 emna-0.1)))
(assert-proof
  (lemma-71 (forall ((x Nat)) (= (minus Z x) Z))
    ([lemma-48,
      lemma-49,
      lemma-60,
      lemma-65,
      lemma-66,
      lemma-67,
      lemma-68,
      lemma-69,
      lemma-70]
      [] structural z3-4.4.0 emna-0.1)))
(assert-proof
  (lemma-72 (forall ((n Nat) (m Nat)) (= (minus (plus n m) n) m))
    ([] [0] structural z3-4.4.0 emna-0.1)))
(assert-proof
  (lemma-73
    (forall ((k Nat) (m Nat) (n Nat))
      (= (minus (plus k m) (plus k n)) (minus m n)))
    ([] [0] structural z3-4.4.0 emna-0.1)))
(assert-proof
  (lemma-74
    (forall ((i Nat) (j Nat) (k Nat))
      (= (minus (minus i j) k) (minus i (plus j k))))
    ([] [1] structural z3-4.4.0 emna-0.1)))
(assert-proof
  (par (a)
    lemma-75 (forall ((xs (list a))) (= (drop Z xs) xs))
    ([] [] structural z3-4.4.0 emna-0.1)))
(assert-proof
  (par (a)
    lemma-76
    (forall ((n Nat) (x a) (xs (list a)))
      (= (drop (S n) (cons x xs)) (drop n xs)))
    ([] [] structural z3-4.4.0 emna-0.1)))
(assert-proof
  (lemma-77
    (forall ((x Nat) (xs (list Nat)))
      (=> (= xs (as nil (list Nat))) (= (last (cons x xs)) x)))
    ([] [] structural z3-4.4.0 emna-0.1)))
(assert-proof
  (lemma-78 (= (last (as nil (list Nat))) Z)
    ([lemma-77] [] structural z3-4.4.0 emna-0.1)))
(assert-proof
  (lemma-79
    (forall ((x Nat)) (= (last (cons x (as nil (list Nat)))) x))
    ([lemma-77, lemma-78] [] structural z3-4.4.0 emna-0.1)))
(assert-proof
  (lemma-80 (forall ((x (list Nat))) (= (last (cons Z x)) (last x)))
    ([lemma-77, lemma-78, lemma-79] [] structural z3-4.4.0 emna-0.1)))
(assert-proof
  (lemma-81 (forall ((n Nat)) (= (le n Z) (equal n Z)))
    ([] [] structural z3-4.4.0 emna-0.1)))
(assert-proof
  (lemma-82 (forall ((x Nat)) (= (le x x) true))
    ([lemma-81] [0] structural z3-4.4.0 emna-0.1)))
(assert-proof
  (lemma-85 (forall ((x Nat)) (= (le x Z) (equal x Z)))
    ([lemma-81,
      lemma-82,
      lemma-86,
      lemma-87,
      lemma-88,
      lemma-89,
      lemma-90,
      lemma-37,
      lemma-39,
      lemma-40,
      lemma-41,
      lemma-42]
      [] structural z3-4.4.0 emna-0.1)))
(assert-proof
  (lemma-86 (forall ((x Nat)) (= (le Z x) true))
    ([lemma-81, lemma-82] [] structural z3-4.4.0 emna-0.1)))
(assert-proof
  (lemma-87 (forall ((x Nat)) (= (le x (S x)) true))
    ([lemma-81, lemma-82, lemma-86] [0] structural z3-4.4.0 emna-0.1)))
(assert-proof
  (lemma-88 (forall ((x Nat)) (= (le (S x) x) false))
    ([lemma-81, lemma-82, lemma-86, lemma-87]
      [0] structural z3-4.4.0 emna-0.1)))
(assert-proof
  (lemma-89 (forall ((x Nat)) (= (le (S x) Z) false))
    ([lemma-81, lemma-82, lemma-86, lemma-87, lemma-88]
      [] structural z3-4.4.0 emna-0.1)))
(assert-proof
  (lemma-90 (forall ((x Nat) (y Nat)) (= (le (S x) (S y)) (le x y)))
    ([lemma-81, lemma-82, lemma-86, lemma-87, lemma-88, lemma-89]
      [] structural z3-4.4.0 emna-0.1)))
(assert-proof
  (lemma-91
    (forall ((a Nat) (b Nat) (c Nat))
      (= (max2 (max2 a b) c) (max2 a (max2 b c))))
    ([] [0] structural z3-4.4.0 emna-0.1)))
(assert-proof
  (lemma-92 (forall ((x Nat)) (= (max2 x x) x))
    ([lemma-91] [0] structural z3-4.4.0 emna-0.1)))
(assert-proof
  (lemma-93 (forall ((x Nat)) (= (max2 x Z) x))
    ([lemma-91, lemma-92] [] structural z3-4.4.0 emna-0.1)))
(assert-proof
  (lemma-94 (forall ((x Nat)) (= (max2 Z x) x))
    ([lemma-91, lemma-92, lemma-93] [] structural z3-4.4.0 emna-0.1)))
(assert-proof
  (lemma-95 (forall ((x Nat) (y Nat)) (= (max2 y x) (max2 x y)))
    ([lemma-91, lemma-92, lemma-93, lemma-94]
      [0] structural z3-4.4.0 emna-0.1)))
(assert-proof
  (lemma-96 (forall ((x Nat)) (= (max2 x (S x)) (S x)))
    ([lemma-91, lemma-92, lemma-93, lemma-94, lemma-95]
      [0] structural z3-4.4.0 emna-0.1)))
(assert-proof
  (lemma-97
    (forall ((x Nat) (y Nat)) (= (max2 x (max2 x y)) (max2 x y)))
    ([lemma-91, lemma-92, lemma-93, lemma-94, lemma-95, lemma-96]
      [] structural z3-4.4.0 emna-0.1)))
(assert-proof
  (lemma-98
    (forall ((x Nat) (y Nat) (z Nat))
      (= (max2 (max2 x y) z) (max2 x (max2 y z))))
    ([lemma-91,
      lemma-92,
      lemma-93,
      lemma-94,
      lemma-95,
      lemma-96,
      lemma-97]
      [] structural z3-4.4.0 emna-0.1)))
(assert-proof
  (lemma-99
    (forall ((x Nat) (y Nat)) (= (max2 (S x) (S y)) (S (max2 x y))))
    ([lemma-91,
      lemma-92,
      lemma-93,
      lemma-94,
      lemma-95,
      lemma-96,
      lemma-97,
      lemma-98]
      [] structural z3-4.4.0 emna-0.1)))
(check-sat)