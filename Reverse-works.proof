(declare-datatypes (a)
  ((list (nil) (cons (head a) (tail (list a))))))
(define-fun-rec
  (par (a)
    (append
       ((x (list a)) (y (list a))) (list a)
       (match x
         (case nil y)
         (case (cons z xs) (cons z (append xs y)))))))
(define-fun-rec
  (par (a)
    (rev
       ((x (list a))) (list a)
       (match x
         (case nil (as nil (list a)))
         (case (cons y xs) (append (rev xs) (cons y (as nil (list a)))))))))
(assert-proof
  (par (x) lemmax
    (forall ((y (list x))) (= (rev (rev y)) y))
    ([0, 1, 2, 3, 4, 5, 6, 7] [])))
(assert-proof
  (par (a) lemmax
    (forall ((xs (list a))) (= (rev (rev xs)) xs))
    ([0, 1, 2, 3, 4, 5, 6] [0])))
(assert-proof
  (par (x) lemmax
    (forall ((y (list x)) (z (list x)))
      (= (append (rev z) (rev y)) (rev (append y z))))
    ([0, 1, 2, 3, 4, 5] [0])))
(assert-proof
  (par (x) lemmax
    (forall ((y x))
      (= (rev (cons y (as nil (list x)))) (cons y (as nil (list x)))))
    ([0, 1, 2, 3, 4] [])))
(assert-proof
  (par (x) lemmax
    (= (rev (as nil (list x))) (as nil (list x))) ([0, 1, 2, 3] [])))
(assert-proof
  (par (x) lemmax
    (forall ((y (list x)) (z (list x)) (x2 (list x)))
      (= (append (append y z) x2) (append y (append z x2))))
    ([0, 1, 2] [0])))
(assert-proof
  (par (x) lemmax
    (forall ((y x) (z (list x)) (x2 (list x)))
      (= (append (cons y z) x2) (cons y (append z x2))))
    ([0, 1] [])))
(assert-proof
  (par (x) lemmax
    (forall ((y (list x))) (= (append (as nil (list x)) y) y))
    ([0] [])))
(assert-proof
  (par (x) lemmax
    (forall ((y (list x))) (= (append y (as nil (list x))) y))
    ([] [0])))
(check-sat)