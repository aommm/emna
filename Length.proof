(declare-datatypes (a)
  ((list (nil) (cons (head a) (tail (list a))))))
(declare-datatypes () ((Nat (Z) (S (p Nat)))))
(define-fun-rec
  (par (a)
    (length
       ((x (list a))) Nat
       (match x
         (case nil Z)
         (case (cons y xs) (S (length xs)))))))
(define-fun-rec
  (par (a)
    (append
       ((x (list a)) (y (list a))) (list a)
       (match x
         (case nil y)
         (case (cons z xs) (cons z (append xs y)))))))
(assert-proof
  (par (x)
    lemma-10
    (forall ((y x) (z (list x)))
      (= (length (cons y z)) (S (length z))))
    ([lemma-8, lemma-9] [])))
(assert-proof
  (par (x)
    lemma-11 (forall ((y (list x))) (= (append y (as nil (list x))) y))
    ([lemma-8, lemma-9, lemma-10] [0])))
(assert-proof
  (par (x)
    lemma-12 (forall ((y (list x))) (= (append (as nil (list x)) y) y))
    ([lemma-8, lemma-9, lemma-10, lemma-11] [])))
(assert-proof
  (par (x)
    lemma-13
    (forall ((y x) (z (list x)) (x2 (list x)))
      (= (append (cons y z) x2) (cons y (append z x2))))
    ([lemma-8, lemma-9, lemma-10, lemma-11, lemma-12] [])))
(assert-proof
  (par (x)
    lemma-14
    (forall ((y (list x)) (z (list x)) (x2 (list x)))
      (= (append (append y z) x2) (append y (append z x2))))
    ([lemma-8, lemma-9, lemma-10, lemma-11, lemma-12, lemma-13]
      [0, 1])))
(assert-proof
  (par (x)
    lemma-15
    (forall ((y (list x)) (z (list x)))
      (= (length (append z y)) (length (append y z))))
    ([lemma-8,
      lemma-9,
      lemma-10,
      lemma-11,
      lemma-12,
      lemma-13,
      lemma-14]
      [])))
(assert-proof
  (par (a)
    lemma-8
    (forall ((x (list a)) (y (list a)))
      (= (length (append x y)) (length (append y x))))
    ([] [0, 1])))
(assert-proof
  (par (x) lemma-9 (= (length (as nil (list x))) Z) ([lemma-8] [])))
(check-sat)