["fa","fs","ls","la"]
lemma-10 = _abstract Equals
lemma-10 = _abstract Equals(Func, Var)
lemma-10 = _abstract Equals(Func(Func, Var), Var)
lemma-10 = _abstract Equals(Func(Var), Var)
lemma-10 = _abstract Equals(Func(Func), Var)
lemma-10 = _abstract Equals(Var)
lemma-10 = _abstract Equals(Func)
lemma-10 = _abstract Equals(Func(Func, Var))
lemma-10 = _abstract Equals(Func(Var))
lemma-10 = _abstract Equals(Func(Func))
lemma-10 = _abstract Func
lemma-10 = _abstract Func(Func, Var)
lemma-10 = _abstract Func(Var)
lemma-10 = _abstract Func(Func)
lemma-10 = _abstract Var
lemma-10 = ==
lemma-10 = ==(append, list)
lemma-10 = ==(append(nil, list), list)
lemma-10 = ==(append(list), list)
lemma-10 = ==(append(nil), list)
lemma-10 = ==(list)
lemma-10 = ==(append)
lemma-10 = ==(append(nil, list))
lemma-10 = ==(append(list))
lemma-10 = ==(append(nil))
lemma-10 = append
lemma-10 = append(nil, list)
lemma-10 = append(list)
lemma-10 = append(nil)
lemma-10 = nil
lemma-10 = list
lemma-10 = _func _abstract match Var
lemma-10 = _func _abstract match Var(Var, Func)
lemma-10 = _func _abstract match Var(Func)
lemma-10 = _func _abstract match Var(Var)
lemma-10 = _func _abstract match Var(Var, Func(Var, Func))
lemma-10 = _func _abstract match Var(Func(Var, Func))
lemma-10 = _func _abstract match Var(Var, Func(Func))
lemma-10 = _func _abstract match Var(Func(Func))
lemma-10 = _func _abstract match Var(Var, Func(Var))
lemma-10 = _func _abstract match Var(Func(Var))
lemma-10 = _func _abstract Var
lemma-10 = _func _abstract Func
lemma-10 = _func _abstract Func(Var, Func)
lemma-10 = _func _abstract Func(Func)
lemma-10 = _func _abstract Func(Var)
lemma-10 = _func _abstract Func(Var, Func(Var, Var))
lemma-10 = _func _abstract Func(Func(Var, Var))
lemma-10 = _func _abstract Func(Var, Func(Var))
lemma-10 = _func _abstract Func(Func(Var))
lemma-10 = _func _abstract Func(Var, Var)
lemma-10 = _func ==
lemma-10 = _func ==(append, list)
lemma-10 = _func ==(append(nil, list), list)
lemma-10 = _func ==(append(list), list)
lemma-10 = _func ==(append(nil), list)
lemma-10 = _func ==(list)
lemma-10 = _func ==(append)
lemma-10 = _func ==(append(nil, list))
lemma-10 = _func ==(append(list))
lemma-10 = _func ==(append(nil))
lemma-10 = _func append
lemma-10 = _func append(nil, list)
lemma-10 = _func append(list)
lemma-10 = _func append(nil)
lemma-10 = _func nil
lemma-10 = _func list

lemma-11 = _abstract Equals
lemma-11 = _abstract Equals(Func, Func)
lemma-11 = _abstract Equals(Func(Func, Var), Func)
lemma-11 = _abstract Equals(Func(Var), Func)
lemma-11 = _abstract Equals(Func(Func), Func)
lemma-11 = _abstract Equals(Func)
lemma-11 = _abstract Equals(Func(Func, Var))
lemma-11 = _abstract Equals(Func(Var))
lemma-11 = _abstract Equals(Func(Func))
lemma-11 = _abstract Equals(Func, Func(Var, Func))
lemma-11 = _abstract Equals(Func(Func, Var), Func(Var, Func))
lemma-11 = _abstract Equals(Func(Var), Func(Var, Func))
lemma-11 = _abstract Equals(Func(Func), Func(Var, Func))
lemma-11 = _abstract Equals(Func(Var, Func))
lemma-11 = _abstract Equals(Func, Func(Func))
lemma-11 = _abstract Equals(Func(Func, Var), Func(Func))
lemma-11 = _abstract Equals(Func(Var), Func(Func))
lemma-11 = _abstract Equals(Func(Func), Func(Func))
lemma-11 = _abstract Equals(Func, Func(Var))
lemma-11 = _abstract Equals(Func(Func, Var), Func(Var))
lemma-11 = _abstract Equals(Func(Var), Func(Var))
lemma-11 = _abstract Equals(Func(Func), Func(Var))
lemma-11 = _abstract Func
lemma-11 = _abstract Func(Func, Var)
lemma-11 = _abstract Func(Func(Var, Var), Var)
lemma-11 = _abstract Func(Func(Var), Var)
lemma-11 = _abstract Func(Var)
lemma-11 = _abstract Func(Func)
lemma-11 = _abstract Func(Func(Var, Var))
lemma-11 = _abstract Func(Func(Var))
lemma-11 = _abstract Func(Var, Var)
lemma-11 = _abstract Var
lemma-11 = _abstract Func(Var, Func)
lemma-11 = _abstract Func(Var, Func(Var, Var))
lemma-11 = _abstract Func(Var, Func(Var))
lemma-11 = ==
lemma-11 = ==(append, cons)
lemma-11 = ==(append(cons, list), cons)
lemma-11 = ==(append(list), cons)
lemma-11 = ==(append(cons), cons)
lemma-11 = ==(cons)
lemma-11 = ==(append)
lemma-11 = ==(append(cons, list))
lemma-11 = ==(append(list))
lemma-11 = ==(append(cons))
lemma-11 = ==(append, cons(anyType, append))
lemma-11 = ==(append(cons, list), cons(anyType, append))
lemma-11 = ==(append(list), cons(anyType, append))
lemma-11 = ==(append(cons), cons(anyType, append))
lemma-11 = ==(cons(anyType, append))
lemma-11 = ==(append, cons(append))
lemma-11 = ==(append(cons, list), cons(append))
lemma-11 = ==(append(list), cons(append))
lemma-11 = ==(append(cons), cons(append))
lemma-11 = ==(cons(append))
lemma-11 = ==(append, cons(anyType))
lemma-11 = ==(append(cons, list), cons(anyType))
lemma-11 = ==(append(list), cons(anyType))
lemma-11 = ==(append(cons), cons(anyType))
lemma-11 = ==(cons(anyType))
lemma-11 = append
lemma-11 = append(cons, list)
lemma-11 = append(cons(anyType, list), list)
lemma-11 = append(cons(list), list)
lemma-11 = append(cons(anyType), list)
lemma-11 = append(list)
lemma-11 = append(cons)
lemma-11 = append(cons(anyType, list))
lemma-11 = append(cons(list))
lemma-11 = append(cons(anyType))
lemma-11 = cons
lemma-11 = cons(anyType, list)
lemma-11 = cons(list)
lemma-11 = cons(anyType)
lemma-11 = anyType
lemma-11 = list
lemma-11 = cons(anyType, append)
lemma-11 = cons(append)
lemma-11 = cons(anyType, append(list, list))
lemma-11 = cons(append(list, list))
lemma-11 = cons(anyType, append(list))
lemma-11 = cons(append(list))
lemma-11 = append(list, list)
lemma-11 = _func _abstract match Var
lemma-11 = _func _abstract match Var(Var, Func)
lemma-11 = _func _abstract match Var(Func)
lemma-11 = _func _abstract match Var(Var)
lemma-11 = _func _abstract match Var(Var, Func(Var, Func))
lemma-11 = _func _abstract match Var(Func(Var, Func))
lemma-11 = _func _abstract match Var(Var, Func(Func))
lemma-11 = _func _abstract match Var(Func(Func))
lemma-11 = _func _abstract match Var(Var, Func(Var))
lemma-11 = _func _abstract match Var(Func(Var))
lemma-11 = _func _abstract Var
lemma-11 = _func _abstract Func
lemma-11 = _func _abstract Func(Var, Func)
lemma-11 = _func _abstract Func(Func)
lemma-11 = _func _abstract Func(Var)
lemma-11 = _func _abstract Func(Var, Func(Var, Var))
lemma-11 = _func _abstract Func(Func(Var, Var))
lemma-11 = _func _abstract Func(Var, Func(Var))
lemma-11 = _func _abstract Func(Func(Var))
lemma-11 = _func _abstract Func(Var, Var)
lemma-11 = _func ==
lemma-11 = _func ==(append, list)
lemma-11 = _func ==(append(nil, list), list)
lemma-11 = _func ==(append(list), list)
lemma-11 = _func ==(append(nil), list)
lemma-11 = _func ==(list)
lemma-11 = _func ==(append)
lemma-11 = _func ==(append(nil, list))
lemma-11 = _func ==(append(list))
lemma-11 = _func ==(append(nil))
lemma-11 = _func append
lemma-11 = _func append(nil, list)
lemma-11 = _func append(list)
lemma-11 = _func append(nil)
lemma-11 = _func nil
lemma-11 = _func list

lemma-12 = _abstract Equals
lemma-12 = _abstract Equals(Func, Func)
lemma-12 = _abstract Equals(Func(Func, Var), Func)
lemma-12 = _abstract Equals(Func(Var), Func)
lemma-12 = _abstract Equals(Func(Func), Func)
lemma-12 = _abstract Equals(Func)
lemma-12 = _abstract Equals(Func(Func, Var))
lemma-12 = _abstract Equals(Func(Var))
lemma-12 = _abstract Equals(Func(Func))
lemma-12 = _abstract Equals(Func, Func(Var, Func))
lemma-12 = _abstract Equals(Func(Func, Var), Func(Var, Func))
lemma-12 = _abstract Equals(Func(Var), Func(Var, Func))
lemma-12 = _abstract Equals(Func(Func), Func(Var, Func))
lemma-12 = _abstract Equals(Func(Var, Func))
lemma-12 = _abstract Equals(Func, Func(Func))
lemma-12 = _abstract Equals(Func(Func, Var), Func(Func))
lemma-12 = _abstract Equals(Func(Var), Func(Func))
lemma-12 = _abstract Equals(Func(Func), Func(Func))
lemma-12 = _abstract Equals(Func, Func(Var))
lemma-12 = _abstract Equals(Func(Func, Var), Func(Var))
lemma-12 = _abstract Equals(Func(Var), Func(Var))
lemma-12 = _abstract Equals(Func(Func), Func(Var))
lemma-12 = _abstract Func
lemma-12 = _abstract Func(Func, Var)
lemma-12 = _abstract Func(Func(Var, Var), Var)
lemma-12 = _abstract Func(Func(Var), Var)
lemma-12 = _abstract Func(Var)
lemma-12 = _abstract Func(Func)
lemma-12 = _abstract Func(Func(Var, Var))
lemma-12 = _abstract Func(Func(Var))
lemma-12 = _abstract Func(Var, Var)
lemma-12 = _abstract Var
lemma-12 = _abstract Func(Var, Func)
lemma-12 = _abstract Func(Var, Func(Var, Var))
lemma-12 = _abstract Func(Var, Func(Var))
lemma-12 = ==
lemma-12 = ==(append, append)
lemma-12 = ==(append(append, list), append)
lemma-12 = ==(append(list), append)
lemma-12 = ==(append(append), append)
lemma-12 = ==(append)
lemma-12 = ==(append(append, list))
lemma-12 = ==(append(list))
lemma-12 = ==(append(append))
lemma-12 = ==(append, append(list, append))
lemma-12 = ==(append(append, list), append(list, append))
lemma-12 = ==(append(list), append(list, append))
lemma-12 = ==(append(append), append(list, append))
lemma-12 = ==(append(list, append))
lemma-12 = ==(append, append(append))
lemma-12 = ==(append(append, list), append(append))
lemma-12 = ==(append(list), append(append))
lemma-12 = ==(append(append), append(append))
lemma-12 = ==(append, append(list))
lemma-12 = ==(append(append, list), append(list))
lemma-12 = ==(append(list), append(list))
lemma-12 = ==(append(append), append(list))
lemma-12 = append
lemma-12 = append(append, list)
lemma-12 = append(append(list, list), list)
lemma-12 = append(append(list), list)
lemma-12 = append(list)
lemma-12 = append(append)
lemma-12 = append(append(list, list))
lemma-12 = append(append(list))
lemma-12 = append(list, list)
lemma-12 = list
lemma-12 = append(list, append)
lemma-12 = append(list, append(list, list))
lemma-12 = append(list, append(list))
lemma-12 = _func _abstract match Var
lemma-12 = _func _abstract match Var(Var, Func)
lemma-12 = _func _abstract match Var(Func)
lemma-12 = _func _abstract match Var(Var)
lemma-12 = _func _abstract match Var(Var, Func(Var, Func))
lemma-12 = _func _abstract match Var(Func(Var, Func))
lemma-12 = _func _abstract match Var(Var, Func(Func))
lemma-12 = _func _abstract match Var(Func(Func))
lemma-12 = _func _abstract match Var(Var, Func(Var))
lemma-12 = _func _abstract match Var(Func(Var))
lemma-12 = _func _abstract Var
lemma-12 = _func _abstract Func
lemma-12 = _func _abstract Func(Var, Func)
lemma-12 = _func _abstract Func(Func)
lemma-12 = _func _abstract Func(Var)
lemma-12 = _func _abstract Func(Var, Func(Var, Var))
lemma-12 = _func _abstract Func(Func(Var, Var))
lemma-12 = _func _abstract Func(Var, Func(Var))
lemma-12 = _func _abstract Func(Func(Var))
lemma-12 = _func _abstract Func(Var, Var)
lemma-12 = _func ==
lemma-12 = _func ==(append, list)
lemma-12 = _func ==(append(nil, list), list)
lemma-12 = _func ==(append(list), list)
lemma-12 = _func ==(append(nil), list)
lemma-12 = _func ==(list)
lemma-12 = _func ==(append)
lemma-12 = _func ==(append(nil, list))
lemma-12 = _func ==(append(list))
lemma-12 = _func ==(append(nil))
lemma-12 = _func append
lemma-12 = _func append(nil, list)
lemma-12 = _func append(list)
lemma-12 = _func append(nil)
lemma-12 = _func nil
lemma-12 = _func list

lemma-13 = _abstract Equals
lemma-13 = _abstract Equals(Func, Func)
lemma-13 = _abstract Equals(Func(Func), Func)
lemma-13 = _abstract Equals(Func)
lemma-13 = _abstract Equals(Func(Func))
lemma-13 = _abstract Func
lemma-13 = _abstract Func(Func)
lemma-13 = ==
lemma-13 = ==(reverse, nil)
lemma-13 = ==(reverse(nil), nil)
lemma-13 = ==(nil)
lemma-13 = ==(reverse)
lemma-13 = ==(reverse(nil))
lemma-13 = reverse
lemma-13 = reverse(nil)
lemma-13 = nil
lemma-13 = _func _abstract match Var
lemma-13 = _func _abstract match Var(Func, Func)
lemma-13 = _func _abstract match Var(Func)
lemma-13 = _func _abstract match Var(Func, Func(Func, Func))
lemma-13 = _func _abstract match Var(Func(Func, Func))
lemma-13 = _func _abstract match Var(Func, Func(Func))
lemma-13 = _func _abstract match Var(Func(Func))
lemma-13 = _func _abstract Func
lemma-13 = _func _abstract Func(Func, Func)
lemma-13 = _func _abstract Func(Func(Var), Func)
lemma-13 = _func _abstract Func(Func)
lemma-13 = _func _abstract Func(Func(Var))
lemma-13 = _func _abstract Func(Func, Func(Var, Func))
lemma-13 = _func _abstract Func(Func(Var), Func(Var, Func))
lemma-13 = _func _abstract Func(Func(Var, Func))
lemma-13 = _func _abstract Func(Func, Func(Func))
lemma-13 = _func _abstract Func(Func(Var), Func(Func))
lemma-13 = _func _abstract Func(Func(Func))
lemma-13 = _func _abstract Func(Func, Func(Var))
lemma-13 = _func _abstract Func(Func(Var), Func(Var))
lemma-13 = _func _abstract Func(Var)
lemma-13 = _func _abstract Var
lemma-13 = _func _abstract Func(Var, Func)
lemma-13 = _func ==
lemma-13 = _func ==(append, cons)
lemma-13 = _func ==(append(cons, list), cons)
lemma-13 = _func ==(append(list), cons)
lemma-13 = _func ==(append(cons), cons)
lemma-13 = _func ==(cons)
lemma-13 = _func ==(append)
lemma-13 = _func ==(append(cons, list))
lemma-13 = _func ==(append(list))
lemma-13 = _func ==(append(cons))
lemma-13 = _func ==(append, cons(anyType, append))
lemma-13 = _func ==(append(cons, list), cons(anyType, append))
lemma-13 = _func ==(append(list), cons(anyType, append))
lemma-13 = _func ==(append(cons), cons(anyType, append))
lemma-13 = _func ==(cons(anyType, append))
lemma-13 = _func ==(append, cons(append))
lemma-13 = _func ==(append(cons, list), cons(append))
lemma-13 = _func ==(append(list), cons(append))
lemma-13 = _func ==(append(cons), cons(append))
lemma-13 = _func ==(cons(append))
lemma-13 = _func ==(append, cons(anyType))
lemma-13 = _func ==(append(cons, list), cons(anyType))
lemma-13 = _func ==(append(list), cons(anyType))
lemma-13 = _func ==(append(cons), cons(anyType))
lemma-13 = _func ==(cons(anyType))
lemma-13 = _func append
lemma-13 = _func append(cons, list)
lemma-13 = _func append(cons(anyType, list), list)
lemma-13 = _func append(cons(list), list)
lemma-13 = _func append(cons(anyType), list)
lemma-13 = _func append(list)
lemma-13 = _func append(cons)
lemma-13 = _func append(cons(anyType, list))
lemma-13 = _func append(cons(list))
lemma-13 = _func append(cons(anyType))
lemma-13 = _func cons
lemma-13 = _func cons(anyType, list)
lemma-13 = _func cons(list)
lemma-13 = _func cons(anyType)
lemma-13 = _func anyType
lemma-13 = _func list
lemma-13 = _func cons(anyType, append)
lemma-13 = _func cons(append)
lemma-13 = _func cons(anyType, append(list, list))
lemma-13 = _func cons(append(list, list))
lemma-13 = _func cons(anyType, append(list))
lemma-13 = _func cons(append(list))
lemma-13 = _func append(list, list)

lemma-14 = _abstract Equals
lemma-14 = _abstract Equals(Func, Func)
lemma-14 = _abstract Equals(Func(Func), Func)
lemma-14 = _abstract Equals(Func)
lemma-14 = _abstract Equals(Func(Func))
lemma-14 = _abstract Equals(Func, Func(Var, Func))
lemma-14 = _abstract Equals(Func(Func), Func(Var, Func))
lemma-14 = _abstract Equals(Func(Var, Func))
lemma-14 = _abstract Equals(Func, Func(Func))
lemma-14 = _abstract Equals(Func(Func), Func(Func))
lemma-14 = _abstract Equals(Func, Func(Var))
lemma-14 = _abstract Equals(Func(Func), Func(Var))
lemma-14 = _abstract Equals(Func(Var))
lemma-14 = _abstract Func
lemma-14 = _abstract Func(Func)
lemma-14 = _abstract Func(Func(Var, Func))
lemma-14 = _abstract Func(Func(Func))
lemma-14 = _abstract Func(Func(Var))
lemma-14 = _abstract Func(Var, Func)
lemma-14 = _abstract Func(Var)
lemma-14 = _abstract Var
lemma-14 = ==
lemma-14 = ==(reverse, cons)
lemma-14 = ==(reverse(cons), cons)
lemma-14 = ==(cons)
lemma-14 = ==(reverse)
lemma-14 = ==(reverse(cons))
lemma-14 = ==(reverse, cons(anyType, nil))
lemma-14 = ==(reverse(cons), cons(anyType, nil))
lemma-14 = ==(cons(anyType, nil))
lemma-14 = ==(reverse, cons(nil))
lemma-14 = ==(reverse(cons), cons(nil))
lemma-14 = ==(cons(nil))
lemma-14 = ==(reverse, cons(anyType))
lemma-14 = ==(reverse(cons), cons(anyType))
lemma-14 = ==(cons(anyType))
lemma-14 = reverse
lemma-14 = reverse(cons)
lemma-14 = reverse(cons(anyType, nil))
lemma-14 = reverse(cons(nil))
lemma-14 = reverse(cons(anyType))
lemma-14 = cons
lemma-14 = cons(anyType, nil)
lemma-14 = cons(nil)
lemma-14 = cons(anyType)
lemma-14 = anyType
lemma-14 = nil
lemma-14 = _func _abstract match Var
lemma-14 = _func _abstract match Var(Func, Func)
lemma-14 = _func _abstract match Var(Func)
lemma-14 = _func _abstract match Var(Func, Func(Func, Func))
lemma-14 = _func _abstract match Var(Func(Func, Func))
lemma-14 = _func _abstract match Var(Func, Func(Func))
lemma-14 = _func _abstract match Var(Func(Func))
lemma-14 = _func _abstract Func
lemma-14 = _func _abstract Func(Func, Func)
lemma-14 = _func _abstract Func(Func(Var), Func)
lemma-14 = _func _abstract Func(Func)
lemma-14 = _func _abstract Func(Func(Var))
lemma-14 = _func _abstract Func(Func, Func(Var, Func))
lemma-14 = _func _abstract Func(Func(Var), Func(Var, Func))
lemma-14 = _func _abstract Func(Func(Var, Func))
lemma-14 = _func _abstract Func(Func, Func(Func))
lemma-14 = _func _abstract Func(Func(Var), Func(Func))
lemma-14 = _func _abstract Func(Func(Func))
lemma-14 = _func _abstract Func(Func, Func(Var))
lemma-14 = _func _abstract Func(Func(Var), Func(Var))
lemma-14 = _func _abstract Func(Var)
lemma-14 = _func _abstract Var
lemma-14 = _func _abstract Func(Var, Func)
lemma-14 = _func ==
lemma-14 = _func ==(append, cons)
lemma-14 = _func ==(append(cons, list), cons)
lemma-14 = _func ==(append(list), cons)
lemma-14 = _func ==(append(cons), cons)
lemma-14 = _func ==(cons)
lemma-14 = _func ==(append)
lemma-14 = _func ==(append(cons, list))
lemma-14 = _func ==(append(list))
lemma-14 = _func ==(append(cons))
lemma-14 = _func ==(append, cons(anyType, append))
lemma-14 = _func ==(append(cons, list), cons(anyType, append))
lemma-14 = _func ==(append(list), cons(anyType, append))
lemma-14 = _func ==(append(cons), cons(anyType, append))
lemma-14 = _func ==(cons(anyType, append))
lemma-14 = _func ==(append, cons(append))
lemma-14 = _func ==(append(cons, list), cons(append))
lemma-14 = _func ==(append(list), cons(append))
lemma-14 = _func ==(append(cons), cons(append))
lemma-14 = _func ==(cons(append))
lemma-14 = _func ==(append, cons(anyType))
lemma-14 = _func ==(append(cons, list), cons(anyType))
lemma-14 = _func ==(append(list), cons(anyType))
lemma-14 = _func ==(append(cons), cons(anyType))
lemma-14 = _func ==(cons(anyType))
lemma-14 = _func append
lemma-14 = _func append(cons, list)
lemma-14 = _func append(cons(anyType, list), list)
lemma-14 = _func append(cons(list), list)
lemma-14 = _func append(cons(anyType), list)
lemma-14 = _func append(list)
lemma-14 = _func append(cons)
lemma-14 = _func append(cons(anyType, list))
lemma-14 = _func append(cons(list))
lemma-14 = _func append(cons(anyType))
lemma-14 = _func cons
lemma-14 = _func cons(anyType, list)
lemma-14 = _func cons(list)
lemma-14 = _func cons(anyType)
lemma-14 = _func anyType
lemma-14 = _func list
lemma-14 = _func cons(anyType, append)
lemma-14 = _func cons(append)
lemma-14 = _func cons(anyType, append(list, list))
lemma-14 = _func cons(append(list, list))
lemma-14 = _func cons(anyType, append(list))
lemma-14 = _func cons(append(list))
lemma-14 = _func append(list, list)

lemma-15 = _abstract Equals
lemma-15 = _abstract Equals(Func, Func)
lemma-15 = _abstract Equals(Func(Func, Func), Func)
lemma-15 = _abstract Equals(Func(Func), Func)
lemma-15 = _abstract Equals(Func)
lemma-15 = _abstract Equals(Func(Func, Func))
lemma-15 = _abstract Equals(Func(Func))
lemma-15 = _abstract Equals(Func, Func(Func))
lemma-15 = _abstract Equals(Func(Func, Func), Func(Func))
lemma-15 = _abstract Equals(Func(Func), Func(Func))
lemma-15 = _abstract Func
lemma-15 = _abstract Func(Func, Func)
lemma-15 = _abstract Func(Func(Var), Func)
lemma-15 = _abstract Func(Func)
lemma-15 = _abstract Func(Func(Var))
lemma-15 = _abstract Func(Func, Func(Var))
lemma-15 = _abstract Func(Func(Var), Func(Var))
lemma-15 = _abstract Func(Var)
lemma-15 = _abstract Var
lemma-15 = _abstract Func(Func(Var, Var))
lemma-15 = _abstract Func(Var, Var)
lemma-15 = ==
lemma-15 = ==(append, reverse)
lemma-15 = ==(append(reverse, reverse), reverse)
lemma-15 = ==(append(reverse), reverse)
lemma-15 = ==(reverse)
lemma-15 = ==(append)
lemma-15 = ==(append(reverse, reverse))
lemma-15 = ==(append(reverse))
lemma-15 = ==(append, reverse(append))
lemma-15 = ==(append(reverse, reverse), reverse(append))
lemma-15 = ==(append(reverse), reverse(append))
lemma-15 = ==(reverse(append))
lemma-15 = append
lemma-15 = append(reverse, reverse)
lemma-15 = append(reverse(list), reverse)
lemma-15 = append(reverse)
lemma-15 = append(reverse(list))
lemma-15 = append(reverse, reverse(list))
lemma-15 = append(reverse(list), reverse(list))
lemma-15 = reverse
lemma-15 = reverse(list)
lemma-15 = list
lemma-15 = reverse(append)
lemma-15 = reverse(append(list, list))
lemma-15 = reverse(append(list))
lemma-15 = append(list, list)
lemma-15 = append(list)
lemma-15 = _func _abstract match Var
lemma-15 = _func _abstract match Var(Var, Func)
lemma-15 = _func _abstract match Var(Func)
lemma-15 = _func _abstract match Var(Var)
lemma-15 = _func _abstract match Var(Var, Func(Var, Func))
lemma-15 = _func _abstract match Var(Func(Var, Func))
lemma-15 = _func _abstract match Var(Var, Func(Func))
lemma-15 = _func _abstract match Var(Func(Func))
lemma-15 = _func _abstract match Var(Var, Func(Var))
lemma-15 = _func _abstract match Var(Func(Var))
lemma-15 = _func _abstract Var
lemma-15 = _func _abstract Func
lemma-15 = _func _abstract Func(Var, Func)
lemma-15 = _func _abstract Func(Func)
lemma-15 = _func _abstract Func(Var)
lemma-15 = _func _abstract Func(Var, Func(Var, Var))
lemma-15 = _func _abstract Func(Func(Var, Var))
lemma-15 = _func _abstract Func(Var, Func(Var))
lemma-15 = _func _abstract Func(Func(Var))
lemma-15 = _func _abstract Func(Var, Var)
lemma-15 = _func ==
lemma-15 = _func ==(append, list)
lemma-15 = _func ==(append(nil, list), list)
lemma-15 = _func ==(append(list), list)
lemma-15 = _func ==(append(nil), list)
lemma-15 = _func ==(list)
lemma-15 = _func ==(append)
lemma-15 = _func ==(append(nil, list))
lemma-15 = _func ==(append(list))
lemma-15 = _func ==(append(nil))
lemma-15 = _func append
lemma-15 = _func append(nil, list)
lemma-15 = _func append(list)
lemma-15 = _func append(nil)
lemma-15 = _func nil
lemma-15 = _func list
lemma-15 = _func _abstract match Var(Func, Func)
lemma-15 = _func _abstract match Var(Func, Func(Func, Func))
lemma-15 = _func _abstract match Var(Func(Func, Func))
lemma-15 = _func _abstract match Var(Func, Func(Func))
lemma-15 = _func _abstract Func(Func, Func)
lemma-15 = _func _abstract Func(Func(Var), Func)
lemma-15 = _func _abstract Func(Func, Func(Var, Func))
lemma-15 = _func _abstract Func(Func(Var), Func(Var, Func))
lemma-15 = _func _abstract Func(Func(Var, Func))
lemma-15 = _func _abstract Func(Func, Func(Func))
lemma-15 = _func _abstract Func(Func(Var), Func(Func))
lemma-15 = _func _abstract Func(Func(Func))
lemma-15 = _func _abstract Func(Func, Func(Var))
lemma-15 = _func _abstract Func(Func(Var), Func(Var))
lemma-15 = _func ==(append, cons)
lemma-15 = _func ==(append(cons, list), cons)
lemma-15 = _func ==(append(list), cons)
lemma-15 = _func ==(append(cons), cons)
lemma-15 = _func ==(cons)
lemma-15 = _func ==(append(cons, list))
lemma-15 = _func ==(append(cons))
lemma-15 = _func ==(append, cons(anyType, append))
lemma-15 = _func ==(append(cons, list), cons(anyType, append))
lemma-15 = _func ==(append(list), cons(anyType, append))
lemma-15 = _func ==(append(cons), cons(anyType, append))
lemma-15 = _func ==(cons(anyType, append))
lemma-15 = _func ==(append, cons(append))
lemma-15 = _func ==(append(cons, list), cons(append))
lemma-15 = _func ==(append(list), cons(append))
lemma-15 = _func ==(append(cons), cons(append))
lemma-15 = _func ==(cons(append))
lemma-15 = _func ==(append, cons(anyType))
lemma-15 = _func ==(append(cons, list), cons(anyType))
lemma-15 = _func ==(append(list), cons(anyType))
lemma-15 = _func ==(append(cons), cons(anyType))
lemma-15 = _func ==(cons(anyType))
lemma-15 = _func append(cons, list)
lemma-15 = _func append(cons(anyType, list), list)
lemma-15 = _func append(cons(list), list)
lemma-15 = _func append(cons(anyType), list)
lemma-15 = _func append(cons)
lemma-15 = _func append(cons(anyType, list))
lemma-15 = _func append(cons(list))
lemma-15 = _func append(cons(anyType))
lemma-15 = _func cons
lemma-15 = _func cons(anyType, list)
lemma-15 = _func cons(list)
lemma-15 = _func cons(anyType)
lemma-15 = _func anyType
lemma-15 = _func cons(anyType, append)
lemma-15 = _func cons(append)
lemma-15 = _func cons(anyType, append(list, list))
lemma-15 = _func cons(append(list, list))
lemma-15 = _func cons(anyType, append(list))
lemma-15 = _func cons(append(list))
lemma-15 = _func append(list, list)

lemma-16 = _abstract Equals
lemma-16 = _abstract Equals(Func, Var)
lemma-16 = _abstract Equals(Func(Func), Var)
lemma-16 = _abstract Equals(Var)
lemma-16 = _abstract Equals(Func)
lemma-16 = _abstract Equals(Func(Func))
lemma-16 = _abstract Func
lemma-16 = _abstract Func(Func)
lemma-16 = _abstract Func(Func(Var))
lemma-16 = _abstract Func(Var)
lemma-16 = _abstract Var
lemma-16 = ==
lemma-16 = ==(reverse, list)
lemma-16 = ==(reverse(reverse), list)
lemma-16 = ==(list)
lemma-16 = ==(reverse)
lemma-16 = ==(reverse(reverse))
lemma-16 = reverse
lemma-16 = reverse(reverse)
lemma-16 = reverse(reverse(list))
lemma-16 = reverse(list)
lemma-16 = list
lemma-16 = _func _abstract match Var
lemma-16 = _func _abstract match Var(Func, Func)
lemma-16 = _func _abstract match Var(Func)
lemma-16 = _func _abstract match Var(Func, Func(Func, Func))
lemma-16 = _func _abstract match Var(Func(Func, Func))
lemma-16 = _func _abstract match Var(Func, Func(Func))
lemma-16 = _func _abstract match Var(Func(Func))
lemma-16 = _func _abstract Func
lemma-16 = _func _abstract Func(Func, Func)
lemma-16 = _func _abstract Func(Func(Var), Func)
lemma-16 = _func _abstract Func(Func)
lemma-16 = _func _abstract Func(Func(Var))
lemma-16 = _func _abstract Func(Func, Func(Var, Func))
lemma-16 = _func _abstract Func(Func(Var), Func(Var, Func))
lemma-16 = _func _abstract Func(Func(Var, Func))
lemma-16 = _func _abstract Func(Func, Func(Func))
lemma-16 = _func _abstract Func(Func(Var), Func(Func))
lemma-16 = _func _abstract Func(Func(Func))
lemma-16 = _func _abstract Func(Func, Func(Var))
lemma-16 = _func _abstract Func(Func(Var), Func(Var))
lemma-16 = _func _abstract Func(Var)
lemma-16 = _func _abstract Var
lemma-16 = _func _abstract Func(Var, Func)
lemma-16 = _func ==
lemma-16 = _func ==(append, cons)
lemma-16 = _func ==(append(cons, list), cons)
lemma-16 = _func ==(append(list), cons)
lemma-16 = _func ==(append(cons), cons)
lemma-16 = _func ==(cons)
lemma-16 = _func ==(append)
lemma-16 = _func ==(append(cons, list))
lemma-16 = _func ==(append(list))
lemma-16 = _func ==(append(cons))
lemma-16 = _func ==(append, cons(anyType, append))
lemma-16 = _func ==(append(cons, list), cons(anyType, append))
lemma-16 = _func ==(append(list), cons(anyType, append))
lemma-16 = _func ==(append(cons), cons(anyType, append))
lemma-16 = _func ==(cons(anyType, append))
lemma-16 = _func ==(append, cons(append))
lemma-16 = _func ==(append(cons, list), cons(append))
lemma-16 = _func ==(append(list), cons(append))
lemma-16 = _func ==(append(cons), cons(append))
lemma-16 = _func ==(cons(append))
lemma-16 = _func ==(append, cons(anyType))
lemma-16 = _func ==(append(cons, list), cons(anyType))
lemma-16 = _func ==(append(list), cons(anyType))
lemma-16 = _func ==(append(cons), cons(anyType))
lemma-16 = _func ==(cons(anyType))
lemma-16 = _func append
lemma-16 = _func append(cons, list)
lemma-16 = _func append(cons(anyType, list), list)
lemma-16 = _func append(cons(list), list)
lemma-16 = _func append(cons(anyType), list)
lemma-16 = _func append(list)
lemma-16 = _func append(cons)
lemma-16 = _func append(cons(anyType, list))
lemma-16 = _func append(cons(list))
lemma-16 = _func append(cons(anyType))
lemma-16 = _func cons
lemma-16 = _func cons(anyType, list)
lemma-16 = _func cons(list)
lemma-16 = _func cons(anyType)
lemma-16 = _func anyType
lemma-16 = _func list
lemma-16 = _func cons(anyType, append)
lemma-16 = _func cons(append)
lemma-16 = _func cons(anyType, append(list, list))
lemma-16 = _func cons(append(list, list))
lemma-16 = _func cons(anyType, append(list))
lemma-16 = _func cons(append(list))
lemma-16 = _func append(list, list)

lemma-17 = _abstract Equals
lemma-17 = _abstract Equals(Func, Var)
lemma-17 = _abstract Equals(Func(Func), Var)
lemma-17 = _abstract Equals(Var)
lemma-17 = _abstract Equals(Func)
lemma-17 = _abstract Equals(Func(Func))
lemma-17 = _abstract Func
lemma-17 = _abstract Func(Func)
lemma-17 = _abstract Func(Func(Var))
lemma-17 = _abstract Func(Var)
lemma-17 = _abstract Var
lemma-17 = ==
lemma-17 = ==(reverse, list)
lemma-17 = ==(reverse(reverse), list)
lemma-17 = ==(list)
lemma-17 = ==(reverse)
lemma-17 = ==(reverse(reverse))
lemma-17 = reverse
lemma-17 = reverse(reverse)
lemma-17 = reverse(reverse(list))
lemma-17 = reverse(list)
lemma-17 = list
lemma-17 = _func _abstract match Var
lemma-17 = _func _abstract match Var(Func, Func)
lemma-17 = _func _abstract match Var(Func)
lemma-17 = _func _abstract match Var(Func, Func(Func, Func))
lemma-17 = _func _abstract match Var(Func(Func, Func))
lemma-17 = _func _abstract match Var(Func, Func(Func))
lemma-17 = _func _abstract match Var(Func(Func))
lemma-17 = _func _abstract Func
lemma-17 = _func _abstract Func(Func, Func)
lemma-17 = _func _abstract Func(Func(Var), Func)
lemma-17 = _func _abstract Func(Func)
lemma-17 = _func _abstract Func(Func(Var))
lemma-17 = _func _abstract Func(Func, Func(Var, Func))
lemma-17 = _func _abstract Func(Func(Var), Func(Var, Func))
lemma-17 = _func _abstract Func(Func(Var, Func))
lemma-17 = _func _abstract Func(Func, Func(Func))
lemma-17 = _func _abstract Func(Func(Var), Func(Func))
lemma-17 = _func _abstract Func(Func(Func))
lemma-17 = _func _abstract Func(Func, Func(Var))
lemma-17 = _func _abstract Func(Func(Var), Func(Var))
lemma-17 = _func _abstract Func(Var)
lemma-17 = _func _abstract Var
lemma-17 = _func _abstract Func(Var, Func)
lemma-17 = _func ==
lemma-17 = _func ==(append, cons)
lemma-17 = _func ==(append(cons, list), cons)
lemma-17 = _func ==(append(list), cons)
lemma-17 = _func ==(append(cons), cons)
lemma-17 = _func ==(cons)
lemma-17 = _func ==(append)
lemma-17 = _func ==(append(cons, list))
lemma-17 = _func ==(append(list))
lemma-17 = _func ==(append(cons))
lemma-17 = _func ==(append, cons(anyType, append))
lemma-17 = _func ==(append(cons, list), cons(anyType, append))
lemma-17 = _func ==(append(list), cons(anyType, append))
lemma-17 = _func ==(append(cons), cons(anyType, append))
lemma-17 = _func ==(cons(anyType, append))
lemma-17 = _func ==(append, cons(append))
lemma-17 = _func ==(append(cons, list), cons(append))
lemma-17 = _func ==(append(list), cons(append))
lemma-17 = _func ==(append(cons), cons(append))
lemma-17 = _func ==(cons(append))
lemma-17 = _func ==(append, cons(anyType))
lemma-17 = _func ==(append(cons, list), cons(anyType))
lemma-17 = _func ==(append(list), cons(anyType))
lemma-17 = _func ==(append(cons), cons(anyType))
lemma-17 = _func ==(cons(anyType))
lemma-17 = _func append
lemma-17 = _func append(cons, list)
lemma-17 = _func append(cons(anyType, list), list)
lemma-17 = _func append(cons(list), list)
lemma-17 = _func append(cons(anyType), list)
lemma-17 = _func append(list)
lemma-17 = _func append(cons)
lemma-17 = _func append(cons(anyType, list))
lemma-17 = _func append(cons(list))
lemma-17 = _func append(cons(anyType))
lemma-17 = _func cons
lemma-17 = _func cons(anyType, list)
lemma-17 = _func cons(list)
lemma-17 = _func cons(anyType)
lemma-17 = _func anyType
lemma-17 = _func list
lemma-17 = _func cons(anyType, append)
lemma-17 = _func cons(append)
lemma-17 = _func cons(anyType, append(list, list))
lemma-17 = _func cons(append(list, list))
lemma-17 = _func cons(anyType, append(list))
lemma-17 = _func cons(append(list))
lemma-17 = _func append(list, list)

lemma-9 = _abstract Equals
lemma-9 = _abstract Equals(Func, Var)
lemma-9 = _abstract Equals(Func(Var, Func), Var)
lemma-9 = _abstract Equals(Func(Func), Var)
lemma-9 = _abstract Equals(Func(Var), Var)
lemma-9 = _abstract Equals(Var)
lemma-9 = _abstract Equals(Func)
lemma-9 = _abstract Equals(Func(Var, Func))
lemma-9 = _abstract Equals(Func(Func))
lemma-9 = _abstract Equals(Func(Var))
lemma-9 = _abstract Func
lemma-9 = _abstract Func(Var, Func)
lemma-9 = _abstract Func(Func)
lemma-9 = _abstract Func(Var)
lemma-9 = _abstract Var
lemma-9 = ==
lemma-9 = ==(append, list)
lemma-9 = ==(append(list, nil), list)
lemma-9 = ==(append(nil), list)
lemma-9 = ==(append(list), list)
lemma-9 = ==(list)
lemma-9 = ==(append)
lemma-9 = ==(append(list, nil))
lemma-9 = ==(append(nil))
lemma-9 = ==(append(list))
lemma-9 = append
lemma-9 = append(list, nil)
lemma-9 = append(nil)
lemma-9 = append(list)
lemma-9 = list
lemma-9 = nil
lemma-9 = _func _abstract match Var
lemma-9 = _func _abstract match Var(Var, Func)
lemma-9 = _func _abstract match Var(Func)
lemma-9 = _func _abstract match Var(Var)
lemma-9 = _func _abstract match Var(Var, Func(Var, Func))
lemma-9 = _func _abstract match Var(Func(Var, Func))
lemma-9 = _func _abstract match Var(Var, Func(Func))
lemma-9 = _func _abstract match Var(Func(Func))
lemma-9 = _func _abstract match Var(Var, Func(Var))
lemma-9 = _func _abstract match Var(Func(Var))
lemma-9 = _func _abstract Var
lemma-9 = _func _abstract Func
lemma-9 = _func _abstract Func(Var, Func)
lemma-9 = _func _abstract Func(Func)
lemma-9 = _func _abstract Func(Var)
lemma-9 = _func _abstract Func(Var, Func(Var, Var))
lemma-9 = _func _abstract Func(Func(Var, Var))
lemma-9 = _func _abstract Func(Var, Func(Var))
lemma-9 = _func _abstract Func(Func(Var))
lemma-9 = _func _abstract Func(Var, Var)
lemma-9 = _func ==
lemma-9 = _func ==(append, list)
lemma-9 = _func ==(append(nil, list), list)
lemma-9 = _func ==(append(list), list)
lemma-9 = _func ==(append(nil), list)
lemma-9 = _func ==(list)
lemma-9 = _func ==(append)
lemma-9 = _func ==(append(nil, list))
lemma-9 = _func ==(append(list))
lemma-9 = _func ==(append(nil))
lemma-9 = _func append
lemma-9 = _func append(nil, list)
lemma-9 = _func append(list)
lemma-9 = _func append(nil)
lemma-9 = _func nil
lemma-9 = _func list

finished
